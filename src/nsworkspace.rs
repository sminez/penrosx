/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
use objc::{self, class, msg_send, sel, sel_impl};
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140400;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140000;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const __IPHONE_COMPAT_VERSION: u32 = 40000;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_OS_VISION: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const OBJC_API_VERSION: u32 = 2;
pub const OBJC_NO_GC: u32 = 1;
pub const NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: u32 = 1;
pub const OBJC_OLD_DISPATCH_PROTOTYPES: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const OBJC_BOOL_IS_BOOL: u32 = 1;
pub const NSINTEGER_DEFINED: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const NS_BLOCKS_AVAILABLE: u32 = 1;
pub const __COREFOUNDATION_CFAVAILABILITY__: u32 = 1;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const NSFoundationVersionNumber10_0: f64 = 397.4;
pub const NSFoundationVersionNumber10_1: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_1: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_2: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_3: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_4: f64 = 425.0;
pub const NSFoundationVersionNumber10_2: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_1: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_2: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_3: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_4: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_5: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_6: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_7: f64 = 462.7;
pub const NSFoundationVersionNumber10_2_8: f64 = 462.7;
pub const NSFoundationVersionNumber10_3: f64 = 500.0;
pub const NSFoundationVersionNumber10_3_1: f64 = 500.0;
pub const NSFoundationVersionNumber10_3_2: f64 = 500.3;
pub const NSFoundationVersionNumber10_3_3: f64 = 500.54;
pub const NSFoundationVersionNumber10_3_4: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_5: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_6: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_7: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_8: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_9: f64 = 500.58;
pub const NSFoundationVersionNumber10_4: f64 = 567.0;
pub const NSFoundationVersionNumber10_4_1: f64 = 567.0;
pub const NSFoundationVersionNumber10_4_2: f64 = 567.12;
pub const NSFoundationVersionNumber10_4_3: f64 = 567.21;
pub const NSFoundationVersionNumber10_4_4_Intel: f64 = 567.23;
pub const NSFoundationVersionNumber10_4_4_PowerPC: f64 = 567.21;
pub const NSFoundationVersionNumber10_4_5: f64 = 567.25;
pub const NSFoundationVersionNumber10_4_6: f64 = 567.26;
pub const NSFoundationVersionNumber10_4_7: f64 = 567.27;
pub const NSFoundationVersionNumber10_4_8: f64 = 567.28;
pub const NSFoundationVersionNumber10_4_9: f64 = 567.29;
pub const NSFoundationVersionNumber10_4_10: f64 = 567.29;
pub const NSFoundationVersionNumber10_4_11: f64 = 567.36;
pub const NSFoundationVersionNumber10_5: f64 = 677.0;
pub const NSFoundationVersionNumber10_5_1: f64 = 677.1;
pub const NSFoundationVersionNumber10_5_2: f64 = 677.15;
pub const NSFoundationVersionNumber10_5_3: f64 = 677.19;
pub const NSFoundationVersionNumber10_5_4: f64 = 677.19;
pub const NSFoundationVersionNumber10_5_5: f64 = 677.21;
pub const NSFoundationVersionNumber10_5_6: f64 = 677.22;
pub const NSFoundationVersionNumber10_5_7: f64 = 677.24;
pub const NSFoundationVersionNumber10_5_8: f64 = 677.26;
pub const NSFoundationVersionNumber10_6: f64 = 751.0;
pub const NSFoundationVersionNumber10_6_1: f64 = 751.0;
pub const NSFoundationVersionNumber10_6_2: f64 = 751.14;
pub const NSFoundationVersionNumber10_6_3: f64 = 751.21;
pub const NSFoundationVersionNumber10_6_4: f64 = 751.29;
pub const NSFoundationVersionNumber10_6_5: f64 = 751.42;
pub const NSFoundationVersionNumber10_6_6: f64 = 751.53;
pub const NSFoundationVersionNumber10_6_7: f64 = 751.53;
pub const NSFoundationVersionNumber10_6_8: f64 = 751.62;
pub const NSFoundationVersionNumber10_7: f64 = 833.1;
pub const NSFoundationVersionNumber10_7_1: f64 = 833.1;
pub const NSFoundationVersionNumber10_7_2: f64 = 833.2;
pub const NSFoundationVersionNumber10_7_3: f64 = 833.24;
pub const NSFoundationVersionNumber10_7_4: f64 = 833.25;
pub const NSFoundationVersionNumber10_8: f64 = 945.0;
pub const NSFoundationVersionNumber10_8_1: f64 = 945.0;
pub const NSFoundationVersionNumber10_8_2: f64 = 945.11;
pub const NSFoundationVersionNumber10_8_3: f64 = 945.16;
pub const NSFoundationVersionNumber10_8_4: f64 = 945.18;
pub const NSFoundationVersionNumber10_9: u32 = 1056;
pub const NSFoundationVersionNumber10_9_1: u32 = 1056;
pub const NSFoundationVersionNumber10_9_2: f64 = 1056.13;
pub const NSFoundationVersionNumber10_10: f64 = 1151.16;
pub const NSFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const NSFoundationVersionNumber10_10_2: f64 = 1152.14;
pub const NSFoundationVersionNumber10_10_3: f64 = 1153.2;
pub const NSFoundationVersionNumber10_10_4: f64 = 1153.2;
pub const NSFoundationVersionNumber10_10_5: u32 = 1154;
pub const NSFoundationVersionNumber10_10_Max: u32 = 1199;
pub const NSFoundationVersionNumber10_11: u32 = 1252;
pub const NSFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const NSFoundationVersionNumber10_11_2: f64 = 1256.1;
pub const NSFoundationVersionNumber10_11_3: f64 = 1256.1;
pub const NSFoundationVersionNumber10_11_4: u32 = 1258;
pub const NSFoundationVersionNumber10_11_Max: u32 = 1299;
pub const __COREFOUNDATION_CFBASE__: u32 = 1;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const kCFCoreFoundationVersionNumber10_0: f64 = 196.4;
pub const kCFCoreFoundationVersionNumber10_0_3: f64 = 196.5;
pub const kCFCoreFoundationVersionNumber10_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_2: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_3: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_4: f64 = 227.3;
pub const kCFCoreFoundationVersionNumber10_2: f64 = 263.0;
pub const kCFCoreFoundationVersionNumber10_2_1: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_2: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_3: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_4: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_5: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_6: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_7: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_8: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_3: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_1: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_2: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_3: f64 = 299.3;
pub const kCFCoreFoundationVersionNumber10_3_4: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6: f64 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9: f64 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4: f64 = 368.0;
pub const kCFCoreFoundationVersionNumber10_4_1: f64 = 368.1;
pub const kCFCoreFoundationVersionNumber10_4_2: f64 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3: f64 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11: f64 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_1: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_2: f64 = 476.1;
pub const kCFCoreFoundationVersionNumber10_5_3: f64 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4: f64 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5: f64 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6: f64 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7: f64 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8: f64 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_1: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_2: f64 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3: f64 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4: f64 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8: f64 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_1: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_2: f64 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3: f64 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_1: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_2: f64 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3: f64 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4: f64 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2: f64 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2: u32 = 1152;
pub const kCFCoreFoundationVersionNumber10_10_3: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber10_11: u32 = 1253;
pub const kCFCoreFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4: f64 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max: u32 = 1299;
pub const ISA_PTRAUTH_DISCRIMINATOR: u32 = 27361;
pub const __COREFOUNDATION_COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION__: u32 = 1;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_FAST_FMA: u32 = 1;
pub const FP_FAST_FMAF: u32 = 1;
pub const FP_FAST_FMAL: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const _JBLEN: u32 = 48;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const PRId8: &[u8; 4] = b"hhd\0";
pub const PRIi8: &[u8; 4] = b"hhi\0";
pub const PRIo8: &[u8; 4] = b"hho\0";
pub const PRIu8: &[u8; 4] = b"hhu\0";
pub const PRIx8: &[u8; 4] = b"hhx\0";
pub const PRIX8: &[u8; 4] = b"hhX\0";
pub const PRId16: &[u8; 3] = b"hd\0";
pub const PRIi16: &[u8; 3] = b"hi\0";
pub const PRIo16: &[u8; 3] = b"ho\0";
pub const PRIu16: &[u8; 3] = b"hu\0";
pub const PRIx16: &[u8; 3] = b"hx\0";
pub const PRIX16: &[u8; 3] = b"hX\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRId64: &[u8; 4] = b"lld\0";
pub const PRIi64: &[u8; 4] = b"lli\0";
pub const PRIo64: &[u8; 4] = b"llo\0";
pub const PRIu64: &[u8; 4] = b"llu\0";
pub const PRIx64: &[u8; 4] = b"llx\0";
pub const PRIX64: &[u8; 4] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIdLEAST64: &[u8; 4] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4] = b"llX\0";
pub const PRIdFAST8: &[u8; 4] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4] = b"hho\0";
pub const PRIuFAST8: &[u8; 4] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3] = b"hd\0";
pub const PRIiFAST16: &[u8; 3] = b"hi\0";
pub const PRIoFAST16: &[u8; 3] = b"ho\0";
pub const PRIuFAST16: &[u8; 3] = b"hu\0";
pub const PRIxFAST16: &[u8; 3] = b"hx\0";
pub const PRIXFAST16: &[u8; 3] = b"hX\0";
pub const PRIdFAST32: &[u8; 2] = b"d\0";
pub const PRIiFAST32: &[u8; 2] = b"i\0";
pub const PRIoFAST32: &[u8; 2] = b"o\0";
pub const PRIuFAST32: &[u8; 2] = b"u\0";
pub const PRIxFAST32: &[u8; 2] = b"x\0";
pub const PRIXFAST32: &[u8; 2] = b"X\0";
pub const PRIdFAST64: &[u8; 4] = b"lld\0";
pub const PRIiFAST64: &[u8; 4] = b"lli\0";
pub const PRIoFAST64: &[u8; 4] = b"llo\0";
pub const PRIuFAST64: &[u8; 4] = b"llu\0";
pub const PRIxFAST64: &[u8; 4] = b"llx\0";
pub const PRIXFAST64: &[u8; 4] = b"llX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"jd\0";
pub const PRIiMAX: &[u8; 3] = b"ji\0";
pub const PRIoMAX: &[u8; 3] = b"jo\0";
pub const PRIuMAX: &[u8; 3] = b"ju\0";
pub const PRIxMAX: &[u8; 3] = b"jx\0";
pub const PRIXMAX: &[u8; 3] = b"jX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNd64: &[u8; 4] = b"lld\0";
pub const SCNi64: &[u8; 4] = b"lli\0";
pub const SCNo64: &[u8; 4] = b"llo\0";
pub const SCNu64: &[u8; 4] = b"llu\0";
pub const SCNx64: &[u8; 4] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNdLEAST64: &[u8; 4] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4] = b"llx\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3] = b"hd\0";
pub const SCNiFAST16: &[u8; 3] = b"hi\0";
pub const SCNoFAST16: &[u8; 3] = b"ho\0";
pub const SCNuFAST16: &[u8; 3] = b"hu\0";
pub const SCNxFAST16: &[u8; 3] = b"hx\0";
pub const SCNdFAST32: &[u8; 2] = b"d\0";
pub const SCNiFAST32: &[u8; 2] = b"i\0";
pub const SCNoFAST32: &[u8; 2] = b"o\0";
pub const SCNuFAST32: &[u8; 2] = b"u\0";
pub const SCNxFAST32: &[u8; 2] = b"x\0";
pub const SCNdFAST64: &[u8; 4] = b"lld\0";
pub const SCNiFAST64: &[u8; 4] = b"lli\0";
pub const SCNoFAST64: &[u8; 4] = b"llo\0";
pub const SCNuFAST64: &[u8; 4] = b"llu\0";
pub const SCNxFAST64: &[u8; 4] = b"llx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"jd\0";
pub const SCNiMAX: &[u8; 3] = b"ji\0";
pub const SCNoMAX: &[u8; 3] = b"jo\0";
pub const SCNuMAX: &[u8; 3] = b"ju\0";
pub const SCNxMAX: &[u8; 3] = b"jx\0";
pub const __COREFOUNDATION_CFARRAY__: u32 = 1;
pub const __COREFOUNDATION_CFBAG__: u32 = 1;
pub const __COREFOUNDATION_CFBINARYHEAP__: u32 = 1;
pub const __COREFOUNDATION_CFBITVECTOR__: u32 = 1;
pub const __COREFOUNDATION_CFBYTEORDER__: u32 = 1;
pub const CF_USE_OSBYTEORDER_H: u32 = 1;
pub const __COREFOUNDATION_CFCALENDAR__: u32 = 1;
pub const __COREFOUNDATION_CFLOCALE__: u32 = 1;
pub const __COREFOUNDATION_CFDICTIONARY__: u32 = 1;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__: u32 = 1;
pub const __COREFOUNDATION_CFDATE__: u32 = 1;
pub const __COREFOUNDATION_CFTIMEZONE__: u32 = 1;
pub const __COREFOUNDATION_CFDATA__: u32 = 1;
pub const __COREFOUNDATION_CFSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFCHARACTERSET__: u32 = 1;
pub const __COREFOUNDATION_CFERROR__: u32 = 1;
pub const kCFStringEncodingInvalidId: u32 = 4294967295;
pub const __kCFStringInlineBufferLength: u32 = 64;
pub const __COREFOUNDATION_CFCGTYPES__: u32 = 1;
pub const CGFLOAT_IS_DOUBLE: u32 = 1;
pub const CGFLOAT_DEFINED: u32 = 1;
pub const CGVECTOR_DEFINED: u32 = 1;
pub const __COREFOUNDATION_CFDATEFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBERFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFPREFERENCES__: u32 = 1;
pub const __COREFOUNDATION_CFPROPERTYLIST__: u32 = 1;
pub const __COREFOUNDATION_CFSTREAM__: u32 = 1;
pub const __COREFOUNDATION_CFURL__: u32 = 1;
pub const __COREFOUNDATION_CFRUNLOOP__: u32 = 1;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_SERVICE_THROTTLED: u32 = 9;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_PORT_SERVICE_THROTTLED_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const MPO_PROVISIONAL_ID_PROT_OPTOUT: u32 = 32768;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const __COREFOUNDATION_CFSOCKET__: u32 = 1;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: u32 = 200112;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_OFD_SETLK: u32 = 90;
pub const F_OFD_SETLKW: u32 = 91;
pub const F_OFD_GETLK: u32 = 92;
pub const F_OFD_SETLKWTIMEOUT: u32 = 93;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const F_ATTRIBUTION_TAG: u32 = 111;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const ATTRIBUTION_NAME_MAX: u32 = 255;
pub const F_CREATE_TAG: u32 = 1;
pub const F_DELETE_TAG: u32 = 2;
pub const F_QUERY_TAG: u32 = 4;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const DISPATCH_API_VERSION: u32 = 20181008;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT: u32 = 1;
pub const OS_OBJECT_USE_OBJC: u32 = 1;
pub const OS_OBJECT_SWIFT3: u32 = 0;
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE: u32 = 0;
pub const __OS_WORKGROUP_ATTR_SIZE__: u32 = 60;
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__: u32 = 56;
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__: u32 = 36;
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT: u32 = 799564724;
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT: u32 = 799564740;
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT: u32 = 1386695757;
pub const DISPATCH_SWIFT3_OVERLAY: u32 = 0;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MSEC_PER_SEC: u32 = 1000;
pub const DISPATCH_TIME_NOW: u32 = 0;
pub const DISPATCH_TIME_FOREVER: i32 = -1;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const DISPATCH_APPLY_AUTO_AVAILABLE: u32 = 1;
pub const DISPATCH_QUEUE_PRIORITY_HIGH: u32 = 2;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT: u32 = 0;
pub const DISPATCH_QUEUE_PRIORITY_LOW: i32 = -2;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND: i32 = -32768;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const DISPATCH_MACH_SEND_DEAD: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_NORMAL: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_WARN: u32 = 2;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL: u32 = 4;
pub const DISPATCH_PROC_EXIT: u32 = 2147483648;
pub const DISPATCH_PROC_FORK: u32 = 1073741824;
pub const DISPATCH_PROC_EXEC: u32 = 536870912;
pub const DISPATCH_PROC_SIGNAL: u32 = 134217728;
pub const DISPATCH_VNODE_DELETE: u32 = 1;
pub const DISPATCH_VNODE_WRITE: u32 = 2;
pub const DISPATCH_VNODE_EXTEND: u32 = 4;
pub const DISPATCH_VNODE_ATTRIB: u32 = 8;
pub const DISPATCH_VNODE_LINK: u32 = 16;
pub const DISPATCH_VNODE_RENAME: u32 = 32;
pub const DISPATCH_VNODE_REVOKE: u32 = 64;
pub const DISPATCH_VNODE_FUNLOCK: u32 = 256;
pub const DISPATCH_TIMER_STRICT: u32 = 1;
pub const DISPATCH_ONCE_INLINE_FASTPATH: u32 = 1;
pub const DISPATCH_IO_STREAM: u32 = 0;
pub const DISPATCH_IO_RANDOM: u32 = 1;
pub const DISPATCH_IO_STOP: u32 = 1;
pub const DISPATCH_IO_STRICT_INTERVAL: u32 = 1;
pub const __COREFOUNDATION_CFSET__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__: u32 = 1;
pub const __COREFOUNDATION_CFTREE__: u32 = 1;
pub const __COREFOUNDATION_CFURLACCESS__: u32 = 1;
pub const __COREFOUNDATION_CFUUID__: u32 = 1;
pub const __COREFOUNDATION_CFUTILITIES__: u32 = 1;
pub const __COREFOUNDATION_CFBUNDLE__: u32 = 1;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUFAMILY_ARM_IBIZA: u32 = 4197663070;
pub const CPUFAMILY_ARM_PALMA: u32 = 1912690738;
pub const CPUFAMILY_ARM_COLL: u32 = 678884789;
pub const CPUFAMILY_ARM_LOBOS: u32 = 1598941843;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUSUBFAMILY_ARM_HA: u32 = 6;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const __COREFOUNDATION_CFMESSAGEPORT__: u32 = 1;
pub const __COREFOUNDATION_CFPLUGIN__: u32 = 1;
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE: u32 = 1;
pub const __COREFOUNDATION_CFMACHPORT__: u32 = 1;
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFURLENUMERATOR__: u32 = 1;
pub const __COREFOUNDATION_CFFILESECURITY__: u32 = 1;
pub const KAUTH_GUID_SIZE: u32 = 16;
pub const KAUTH_NTSID_MAX_AUTHORITIES: u32 = 16;
pub const KAUTH_NTSID_HDRSIZE: u32 = 8;
pub const KAUTH_EXTLOOKUP_SUCCESS: u32 = 0;
pub const KAUTH_EXTLOOKUP_BADRQ: u32 = 1;
pub const KAUTH_EXTLOOKUP_FAILURE: u32 = 2;
pub const KAUTH_EXTLOOKUP_FATAL: u32 = 3;
pub const KAUTH_EXTLOOKUP_INPROG: u32 = 100;
pub const KAUTH_EXTLOOKUP_VALID_UID: u32 = 1;
pub const KAUTH_EXTLOOKUP_VALID_UGUID: u32 = 2;
pub const KAUTH_EXTLOOKUP_VALID_USID: u32 = 4;
pub const KAUTH_EXTLOOKUP_VALID_GID: u32 = 8;
pub const KAUTH_EXTLOOKUP_VALID_GGUID: u32 = 16;
pub const KAUTH_EXTLOOKUP_VALID_GSID: u32 = 32;
pub const KAUTH_EXTLOOKUP_WANT_UID: u32 = 64;
pub const KAUTH_EXTLOOKUP_WANT_UGUID: u32 = 128;
pub const KAUTH_EXTLOOKUP_WANT_USID: u32 = 256;
pub const KAUTH_EXTLOOKUP_WANT_GID: u32 = 512;
pub const KAUTH_EXTLOOKUP_WANT_GGUID: u32 = 1024;
pub const KAUTH_EXTLOOKUP_WANT_GSID: u32 = 2048;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: u32 = 4096;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: u32 = 8192;
pub const KAUTH_EXTLOOKUP_ISMEMBER: u32 = 16384;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM: u32 = 32768;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM: u32 = 65536;
pub const KAUTH_EXTLOOKUP_VALID_GRNAM: u32 = 131072;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM: u32 = 262144;
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS: u32 = 524288;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS: u32 = 1048576;
pub const KAUTH_EXTLOOKUP_REGISTER: u32 = 0;
pub const KAUTH_EXTLOOKUP_RESULT: u32 = 1;
pub const KAUTH_EXTLOOKUP_WORKER: u32 = 2;
pub const KAUTH_EXTLOOKUP_DEREGISTER: u32 = 4;
pub const KAUTH_GET_CACHE_SIZES: u32 = 8;
pub const KAUTH_SET_CACHE_SIZES: u32 = 16;
pub const KAUTH_CLEAR_CACHES: u32 = 32;
pub const IDENTITYSVC_ENTITLEMENT: &[u8; 30] = b"com.apple.private.identitysvc\0";
pub const KAUTH_ACE_KINDMASK: u32 = 15;
pub const KAUTH_ACE_PERMIT: u32 = 1;
pub const KAUTH_ACE_DENY: u32 = 2;
pub const KAUTH_ACE_AUDIT: u32 = 3;
pub const KAUTH_ACE_ALARM: u32 = 4;
pub const KAUTH_ACE_INHERITED: u32 = 16;
pub const KAUTH_ACE_FILE_INHERIT: u32 = 32;
pub const KAUTH_ACE_DIRECTORY_INHERIT: u32 = 64;
pub const KAUTH_ACE_LIMIT_INHERIT: u32 = 128;
pub const KAUTH_ACE_ONLY_INHERIT: u32 = 256;
pub const KAUTH_ACE_SUCCESS: u32 = 512;
pub const KAUTH_ACE_FAILURE: u32 = 1024;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS: u32 = 480;
pub const KAUTH_ACE_GENERIC_ALL: u32 = 2097152;
pub const KAUTH_ACE_GENERIC_EXECUTE: u32 = 4194304;
pub const KAUTH_ACE_GENERIC_WRITE: u32 = 8388608;
pub const KAUTH_ACE_GENERIC_READ: u32 = 16777216;
pub const KAUTH_ACL_MAX_ENTRIES: u32 = 128;
pub const KAUTH_ACL_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_ACL_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_ACL_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_MAGIC: u32 = 19710317;
pub const KAUTH_FILESEC_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_FILESEC_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_FILESEC_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_XATTR: &[u8; 26] = b"com.apple.system.Security\0";
pub const KAUTH_ENDIAN_HOST: u32 = 1;
pub const KAUTH_ENDIAN_DISK: u32 = 2;
pub const KAUTH_VNODE_READ_DATA: u32 = 2;
pub const KAUTH_VNODE_LIST_DIRECTORY: u32 = 2;
pub const KAUTH_VNODE_WRITE_DATA: u32 = 4;
pub const KAUTH_VNODE_ADD_FILE: u32 = 4;
pub const KAUTH_VNODE_EXECUTE: u32 = 8;
pub const KAUTH_VNODE_SEARCH: u32 = 8;
pub const KAUTH_VNODE_DELETE: u32 = 16;
pub const KAUTH_VNODE_APPEND_DATA: u32 = 32;
pub const KAUTH_VNODE_ADD_SUBDIRECTORY: u32 = 32;
pub const KAUTH_VNODE_DELETE_CHILD: u32 = 64;
pub const KAUTH_VNODE_READ_ATTRIBUTES: u32 = 128;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES: u32 = 256;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES: u32 = 512;
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const KAUTH_VNODE_READ_SECURITY: u32 = 2048;
pub const KAUTH_VNODE_WRITE_SECURITY: u32 = 4096;
pub const KAUTH_VNODE_TAKE_OWNERSHIP: u32 = 8192;
pub const KAUTH_VNODE_CHANGE_OWNER: u32 = 8192;
pub const KAUTH_VNODE_SYNCHRONIZE: u32 = 1048576;
pub const KAUTH_VNODE_LINKTARGET: u32 = 33554432;
pub const KAUTH_VNODE_CHECKIMMUTABLE: u32 = 67108864;
pub const KAUTH_VNODE_ACCESS: u32 = 2147483648;
pub const KAUTH_VNODE_NOIMMUTABLE: u32 = 1073741824;
pub const KAUTH_VNODE_SEARCHBYANYONE: u32 = 536870912;
pub const KAUTH_VNODE_GENERIC_READ_BITS: u32 = 2690;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS: u32 = 5492;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS: u32 = 8;
pub const KAUTH_VNODE_GENERIC_ALL_BITS: u32 = 8190;
pub const KAUTH_VNODE_WRITE_RIGHTS: u32 = 100676980;
pub const __DARWIN_ACL_READ_DATA: u32 = 2;
pub const __DARWIN_ACL_LIST_DIRECTORY: u32 = 2;
pub const __DARWIN_ACL_WRITE_DATA: u32 = 4;
pub const __DARWIN_ACL_ADD_FILE: u32 = 4;
pub const __DARWIN_ACL_EXECUTE: u32 = 8;
pub const __DARWIN_ACL_SEARCH: u32 = 8;
pub const __DARWIN_ACL_DELETE: u32 = 16;
pub const __DARWIN_ACL_APPEND_DATA: u32 = 32;
pub const __DARWIN_ACL_ADD_SUBDIRECTORY: u32 = 32;
pub const __DARWIN_ACL_DELETE_CHILD: u32 = 64;
pub const __DARWIN_ACL_READ_ATTRIBUTES: u32 = 128;
pub const __DARWIN_ACL_WRITE_ATTRIBUTES: u32 = 256;
pub const __DARWIN_ACL_READ_EXTATTRIBUTES: u32 = 512;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const __DARWIN_ACL_READ_SECURITY: u32 = 2048;
pub const __DARWIN_ACL_WRITE_SECURITY: u32 = 4096;
pub const __DARWIN_ACL_CHANGE_OWNER: u32 = 8192;
pub const __DARWIN_ACL_SYNCHRONIZE: u32 = 1048576;
pub const __DARWIN_ACL_EXTENDED_ALLOW: u32 = 1;
pub const __DARWIN_ACL_EXTENDED_DENY: u32 = 2;
pub const __DARWIN_ACL_ENTRY_INHERITED: u32 = 16;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT: u32 = 32;
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: u32 = 64;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT: u32 = 128;
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT: u32 = 256;
pub const __DARWIN_ACL_FLAG_NO_INHERIT: u32 = 131072;
pub const ACL_MAX_ENTRIES: u32 = 128;
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__: u32 = 1;
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__: u32 = 1;
pub const __COREFOUNDATION_CFUSERNOTIFICATION__: u32 = 1;
pub const __COREFOUNDATION_CFXMLNODE__: u32 = 1;
pub const __CFXMLNode_DEPRECATION_MSG: &[u8; 83] =
    b"CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFXMLPARSER__: u32 = 1;
pub const __CFXMLParser_DEPRECATION_MSG: &[u8; 85] =
    b"CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const NSGEOMETRY_TYPES_SAME_AS_CGGEOMETRY_TYPES: u32 = 1;
pub const NSEDGEINSETS_DEFINED: u32 = 1;
pub const NSMaximumStringLength: u32 = 2147483646;
pub const NS_UNICHAR_IS_EIGHT_BIT: u32 = 0;
pub const NSFoundationVersionWithFileManagerResourceForkSupport: u32 = 412;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__ns"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_reserved: [u64; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 368usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
unsafe extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU16"][::std::mem::size_of::<_OSUnalignedU16>() - 2usize];
    ["Alignment of _OSUnalignedU16"][::std::mem::align_of::<_OSUnalignedU16>() - 1usize];
    ["Offset of field: _OSUnalignedU16::__val"]
        [::std::mem::offset_of!(_OSUnalignedU16, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU32"][::std::mem::size_of::<_OSUnalignedU32>() - 4usize];
    ["Alignment of _OSUnalignedU32"][::std::mem::align_of::<_OSUnalignedU32>() - 1usize];
    ["Offset of field: _OSUnalignedU32::__val"]
        [::std::mem::offset_of!(_OSUnalignedU32, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU64"][::std::mem::size_of::<_OSUnalignedU64>() - 8usize];
    ["Alignment of _OSUnalignedU64"][::std::mem::align_of::<_OSUnalignedU64>() - 1usize];
    ["Offset of field: _OSUnalignedU64::__val"]
        [::std::mem::offset_of!(_OSUnalignedU64, __val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Termsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Termsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Coredump_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Coredump_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Retcode_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Retcode_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopval_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopval_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
unsafe extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
unsafe extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
unsafe extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
unsafe extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
unsafe extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
unsafe extern "C" {
    pub fn arc4random() -> u32;
}
unsafe extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
unsafe extern "C" {
    pub fn arc4random_stir();
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
unsafe extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sranddev();
}
unsafe extern "C" {
    pub fn srandomdev();
}
unsafe extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type rsize_t = ::std::os::raw::c_ulong;
pub type max_align_t = f64;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
unsafe extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_class {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Class(pub id);
impl std::ops::Deref for Class {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Class {}
impl Class {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Class), alloc) })
    }
}
impl IClass for Class {}
pub trait IClass: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_selector {
    _unused: [u8; 0],
}
pub type IMP = ::std::option::Option<unsafe extern "C" fn()>;
pub type BOOL = bool;
pub type objc_zone_t = *mut _malloc_zone_t;
unsafe extern "C" {
    pub fn sel_getName(sel: objc::runtime::Sel) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sel_registerName(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
unsafe extern "C" {
    pub fn object_getClassName(obj: id) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn object_getIndexedIvars(obj: id) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sel_isMapped(sel: objc::runtime::Sel) -> BOOL;
}
unsafe extern "C" {
    pub fn sel_getUid(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
pub type objc_objectptr_t = *const ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn objc_retainedObject(obj: objc_objectptr_t) -> id;
}
unsafe extern "C" {
    pub fn objc_unretainedObject(obj: objc_objectptr_t) -> id;
}
unsafe extern "C" {
    pub fn objc_unretainedPointer(obj: id) -> objc_objectptr_t;
}
pub type NSInteger = ::std::os::raw::c_long;
pub type NSUInteger = ::std::os::raw::c_ulong;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMethodSignature(pub id);
impl std::ops::Deref for NSMethodSignature {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMethodSignature {}
impl NSMethodSignature {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMethodSignature), alloc) })
    }
}
impl INSMethodSignature for NSMethodSignature {}
pub trait INSMethodSignature: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInvocation(pub id);
impl std::ops::Deref for NSInvocation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInvocation {}
impl NSInvocation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInvocation), alloc) })
    }
}
impl INSInvocation for NSInvocation {}
pub trait INSInvocation: Sized + std::ops::Deref {}
pub trait PNSObject: Sized + std::ops::Deref {
    unsafe fn isEqual_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isEqual : object) }
    }
    unsafe fn class(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, class) }
    }
    unsafe fn self_(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, self_) }
    }
    unsafe fn performSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , performSelector : aSelector) }
    }
    unsafe fn performSelector_withObject_(&self, aSelector: objc::runtime::Sel, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , performSelector : aSelector withObject : object) }
    }
    unsafe fn performSelector_withObject_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        object1: id,
        object2: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , performSelector : aSelector withObject : object1 withObject : object2)
        }
    }
    unsafe fn isProxy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isProxy) }
    }
    unsafe fn isKindOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isKindOfClass : aClass) }
    }
    unsafe fn isMemberOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isMemberOfClass : aClass) }
    }
    unsafe fn conformsToProtocol_(&self, aProtocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , conformsToProtocol : aProtocol) }
    }
    unsafe fn respondsToSelector_(&self, aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , respondsToSelector : aSelector) }
    }
    unsafe fn retain(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, retain) }
    }
    unsafe fn release(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, release) }
    }
    unsafe fn autorelease(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, autorelease) }
    }
    unsafe fn retainCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, retainCount) }
    }
    unsafe fn zone(&self) -> *mut _NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, zone) }
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hash) }
    }
    unsafe fn superclass(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, superclass) }
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, description) }
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, debugDescription) }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSZone {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSObject(pub id);
impl std::ops::Deref for NSObject {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSObject {}
impl NSObject {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSObject), alloc) })
    }
}
impl PNSObject for NSObject {}
impl INSObject for NSObject {}
pub trait INSObject: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, dealloc) }
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, finalize) }
    }
    unsafe fn copy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, copy) }
    }
    unsafe fn mutableCopy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, mutableCopy) }
    }
    unsafe fn methodForSelector_(&self, aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , methodForSelector : aSelector) }
    }
    unsafe fn doesNotRecognizeSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , doesNotRecognizeSelector : aSelector) }
    }
    unsafe fn forwardingTargetForSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , forwardingTargetForSelector : aSelector) }
    }
    unsafe fn forwardInvocation_(&self, anInvocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , forwardInvocation : anInvocation) }
    }
    unsafe fn methodSignatureForSelector_(&self, aSelector: objc::runtime::Sel) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , methodSignatureForSelector : aSelector) }
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, allowsWeakReference) }
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, retainWeakReference) }
    }
    unsafe fn load()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), load) }
    }
    unsafe fn initialize()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), initialize) }
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), new) }
    }
    unsafe fn allocWithZone_(zone: *mut _NSZone) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , allocWithZone : zone) }
    }
    unsafe fn alloc() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), alloc) }
    }
    unsafe fn copyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , copyWithZone : zone) }
    }
    unsafe fn mutableCopyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , mutableCopyWithZone : zone) }
    }
    unsafe fn instancesRespondToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , instancesRespondToSelector : aSelector) }
    }
    unsafe fn conformsToProtocol_(protocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , conformsToProtocol : protocol) }
    }
    unsafe fn instanceMethodForSelector_(aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , instanceMethodForSelector : aSelector) }
    }
    unsafe fn instanceMethodSignatureForSelector_(
        aSelector: objc::runtime::Sel,
    ) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , instanceMethodSignatureForSelector : aSelector) }
    }
    unsafe fn isSubclassOfClass_(aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , isSubclassOfClass : aClass) }
    }
    unsafe fn resolveClassMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , resolveClassMethod : sel) }
    }
    unsafe fn resolveInstanceMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , resolveInstanceMethod : sel) }
    }
    unsafe fn hash() -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), hash) }
    }
    unsafe fn superclass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), superclass) }
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), class) }
    }
    unsafe fn description() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), description) }
    }
    unsafe fn debugDescription() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), debugDescription) }
    }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
unsafe extern "C" {
    pub static mut NSFoundationVersionNumber: f64;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Protocol(pub id);
impl std::ops::Deref for Protocol {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Protocol {}
impl Protocol {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Protocol), alloc) })
    }
}
impl IProtocol for Protocol {}
pub trait IProtocol: Sized + std::ops::Deref {}
pub type NSExceptionName = NSString;
pub type NSRunLoopMode = NSString;
unsafe extern "C" {
    pub fn NSStringFromSelector(aSelector: objc::runtime::Sel) -> NSString;
}
unsafe extern "C" {
    pub fn NSSelectorFromString(aSelectorName: NSString) -> objc::runtime::Sel;
}
unsafe extern "C" {
    pub fn NSStringFromClass(aClass: Class) -> NSString;
}
unsafe extern "C" {
    pub fn NSClassFromString(aClassName: NSString) -> Class;
}
unsafe extern "C" {
    pub fn NSStringFromProtocol(proto: Protocol) -> NSString;
}
unsafe extern "C" {
    pub fn NSProtocolFromString(namestr: NSString) -> Protocol;
}
unsafe extern "C" {
    pub fn NSGetSizeAndAlignment(
        typePtr: *const ::std::os::raw::c_char,
        sizep: *mut NSUInteger,
        alignp: *mut NSUInteger,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn NSLog(format: id, ...);
}
unsafe extern "C" {
    pub fn NSLogv(format: id, args: __builtin_va_list);
}
pub const NSComparisonResult_NSOrderedAscending: NSComparisonResult = -1;
pub const NSComparisonResult_NSOrderedSame: NSComparisonResult = 0;
pub const NSComparisonResult_NSOrderedDescending: NSComparisonResult = 1;
pub type NSComparisonResult = NSInteger;
pub type NSComparator = *mut ::std::os::raw::c_void;
pub const NSEnumerationOptions_NSEnumerationConcurrent: NSEnumerationOptions = 1;
pub const NSEnumerationOptions_NSEnumerationReverse: NSEnumerationOptions = 2;
pub type NSEnumerationOptions = NSUInteger;
pub const NSSortOptions_NSSortConcurrent: NSSortOptions = 1;
pub const NSSortOptions_NSSortStable: NSSortOptions = 16;
pub type NSSortOptions = NSUInteger;
pub const NSQualityOfService_NSQualityOfServiceUserInteractive: NSQualityOfService = 33;
pub const NSQualityOfService_NSQualityOfServiceUserInitiated: NSQualityOfService = 25;
pub const NSQualityOfService_NSQualityOfServiceUtility: NSQualityOfService = 17;
pub const NSQualityOfService_NSQualityOfServiceBackground: NSQualityOfService = 9;
pub const NSQualityOfService_NSQualityOfServiceDefault: NSQualityOfService = -1;
pub type NSQualityOfService = NSInteger;
pub const NSNotFound: NSInteger = 9223372036854775807;
pub const ptrauth_key_ptrauth_key_none: ptrauth_key = -1;
pub const ptrauth_key_ptrauth_key_asia: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_asib: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_asda: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_asdb: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_process_independent_code: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_process_dependent_code: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_process_independent_data: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_process_dependent_data: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_function_pointer: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_return_address: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_frame_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_block_function: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_cxx_vtable_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_method_list_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_isa_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_super_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_block_descriptor_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_sel_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_objc_class_ro_pointer: ptrauth_key = 2;
pub type ptrauth_key = ::std::os::raw::c_int;
pub type ptrauth_extra_data_t = ::std::os::raw::c_ulong;
pub type ptrauth_generic_signature_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn _Block_copy(aBlock: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn _Block_object_dispose(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::std::os::raw::c_void; 32usize];
}
unsafe extern "C" {
    pub static mut _NSConcreteStackBlock: [*mut ::std::os::raw::c_void; 32usize];
}
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wide"][::std::mem::size_of::<wide>() - 8usize];
    ["Alignment of wide"][::std::mem::align_of::<wide>() - 2usize];
    ["Offset of field: wide::lo"][::std::mem::offset_of!(wide, lo) - 0usize];
    ["Offset of field: wide::hi"][::std::mem::offset_of!(wide, hi) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnsignedWide"][::std::mem::size_of::<UnsignedWide>() - 8usize];
    ["Alignment of UnsignedWide"][::std::mem::align_of::<UnsignedWide>() - 2usize];
    ["Offset of field: UnsignedWide::lo"][::std::mem::offset_of!(UnsignedWide, lo) - 0usize];
    ["Offset of field: UnsignedWide::hi"][::std::mem::offset_of!(UnsignedWide, hi) - 4usize];
};
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Float80"][::std::mem::size_of::<Float80>() - 10usize];
    ["Alignment of Float80"][::std::mem::align_of::<Float80>() - 2usize];
    ["Offset of field: Float80::exp"][::std::mem::offset_of!(Float80, exp) - 0usize];
    ["Offset of field: Float80::man"][::std::mem::offset_of!(Float80, man) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Float96"][::std::mem::size_of::<Float96>() - 12usize];
    ["Alignment of Float96"][::std::mem::align_of::<Float96>() - 2usize];
    ["Offset of field: Float96::exp"][::std::mem::offset_of!(Float96, exp) - 0usize];
    ["Offset of field: Float96::man"][::std::mem::offset_of!(Float96, man) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Float32Point"][::std::mem::size_of::<Float32Point>() - 8usize];
    ["Alignment of Float32Point"][::std::mem::align_of::<Float32Point>() - 2usize];
    ["Offset of field: Float32Point::x"][::std::mem::offset_of!(Float32Point, x) - 0usize];
    ["Offset of field: Float32Point::y"][::std::mem::offset_of!(Float32Point, y) - 4usize];
};
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const kNilOptions: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const kUnknownType: _bindgen_ty_4 = 1061109567;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProcessSerialNumber"][::std::mem::size_of::<ProcessSerialNumber>() - 8usize];
    ["Alignment of ProcessSerialNumber"][::std::mem::align_of::<ProcessSerialNumber>() - 2usize];
    ["Offset of field: ProcessSerialNumber::highLongOfPSN"]
        [::std::mem::offset_of!(ProcessSerialNumber, highLongOfPSN) - 0usize];
    ["Offset of field: ProcessSerialNumber::lowLongOfPSN"]
        [::std::mem::offset_of!(ProcessSerialNumber, lowLongOfPSN) - 4usize];
};
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Point"][::std::mem::size_of::<Point>() - 4usize];
    ["Alignment of Point"][::std::mem::align_of::<Point>() - 2usize];
    ["Offset of field: Point::v"][::std::mem::offset_of!(Point, v) - 0usize];
    ["Offset of field: Point::h"][::std::mem::offset_of!(Point, h) - 2usize];
};
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Rect"][::std::mem::size_of::<Rect>() - 8usize];
    ["Alignment of Rect"][::std::mem::align_of::<Rect>() - 2usize];
    ["Offset of field: Rect::top"][::std::mem::offset_of!(Rect, top) - 0usize];
    ["Offset of field: Rect::left"][::std::mem::offset_of!(Rect, left) - 2usize];
    ["Offset of field: Rect::bottom"][::std::mem::offset_of!(Rect, bottom) - 4usize];
    ["Offset of field: Rect::right"][::std::mem::offset_of!(Rect, right) - 6usize];
};
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FixedPoint"][::std::mem::size_of::<FixedPoint>() - 8usize];
    ["Alignment of FixedPoint"][::std::mem::align_of::<FixedPoint>() - 2usize];
    ["Offset of field: FixedPoint::x"][::std::mem::offset_of!(FixedPoint, x) - 0usize];
    ["Offset of field: FixedPoint::y"][::std::mem::offset_of!(FixedPoint, y) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FixedRect"][::std::mem::size_of::<FixedRect>() - 16usize];
    ["Alignment of FixedRect"][::std::mem::align_of::<FixedRect>() - 2usize];
    ["Offset of field: FixedRect::left"][::std::mem::offset_of!(FixedRect, left) - 0usize];
    ["Offset of field: FixedRect::top"][::std::mem::offset_of!(FixedRect, top) - 4usize];
    ["Offset of field: FixedRect::right"][::std::mem::offset_of!(FixedRect, right) - 8usize];
    ["Offset of field: FixedRect::bottom"][::std::mem::offset_of!(FixedRect, bottom) - 12usize];
};
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: _bindgen_ty_5 = 0;
pub const bold: _bindgen_ty_5 = 1;
pub const italic: _bindgen_ty_5 = 2;
pub const underline: _bindgen_ty_5 = 4;
pub const outline: _bindgen_ty_5 = 8;
pub const shadow: _bindgen_ty_5 = 16;
pub const condense: _bindgen_ty_5 = 32;
pub const extend: _bindgen_ty_5 = 64;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TimeRecord"][::std::mem::size_of::<TimeRecord>() - 20usize];
    ["Alignment of TimeRecord"][::std::mem::align_of::<TimeRecord>() - 2usize];
    ["Offset of field: TimeRecord::value"][::std::mem::offset_of!(TimeRecord, value) - 0usize];
    ["Offset of field: TimeRecord::scale"][::std::mem::offset_of!(TimeRecord, scale) - 8usize];
    ["Offset of field: TimeRecord::base"][::std::mem::offset_of!(TimeRecord, base) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NumVersion"][::std::mem::size_of::<NumVersion>() - 4usize];
    ["Alignment of NumVersion"][::std::mem::align_of::<NumVersion>() - 1usize];
    ["Offset of field: NumVersion::nonRelRev"]
        [::std::mem::offset_of!(NumVersion, nonRelRev) - 0usize];
    ["Offset of field: NumVersion::stage"][::std::mem::offset_of!(NumVersion, stage) - 1usize];
    ["Offset of field: NumVersion::minorAndBugRev"]
        [::std::mem::offset_of!(NumVersion, minorAndBugRev) - 2usize];
    ["Offset of field: NumVersion::majorRev"]
        [::std::mem::offset_of!(NumVersion, majorRev) - 3usize];
};
pub const developStage: _bindgen_ty_6 = 32;
pub const alphaStage: _bindgen_ty_6 = 64;
pub const betaStage: _bindgen_ty_6 = 96;
pub const finalStage: _bindgen_ty_6 = 128;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NumVersionVariant"][::std::mem::size_of::<NumVersionVariant>() - 4usize];
    ["Alignment of NumVersionVariant"][::std::mem::align_of::<NumVersionVariant>() - 2usize];
    ["Offset of field: NumVersionVariant::parts"]
        [::std::mem::offset_of!(NumVersionVariant, parts) - 0usize];
    ["Offset of field: NumVersionVariant::whole"]
        [::std::mem::offset_of!(NumVersionVariant, whole) - 0usize];
};
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VersRec"][::std::mem::size_of::<VersRec>() - 518usize];
    ["Alignment of VersRec"][::std::mem::align_of::<VersRec>() - 2usize];
    ["Offset of field: VersRec::numericVersion"]
        [::std::mem::offset_of!(VersRec, numericVersion) - 0usize];
    ["Offset of field: VersRec::countryCode"]
        [::std::mem::offset_of!(VersRec, countryCode) - 4usize];
    ["Offset of field: VersRec::shortVersion"]
        [::std::mem::offset_of!(VersRec, shortVersion) - 6usize];
    ["Offset of field: VersRec::reserved"][::std::mem::offset_of!(VersRec, reserved) - 262usize];
};
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
unsafe extern "C" {
    pub fn Debugger();
}
unsafe extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
unsafe extern "C" {
    pub fn SysBreak();
}
unsafe extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
unsafe extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAttributedString(pub id);
impl std::ops::Deref for NSAttributedString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedString {}
impl NSAttributedString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAttributedString), alloc) })
    }
}
impl INSAttributedString for NSAttributedString {}
pub trait INSAttributedString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNull(pub id);
impl std::ops::Deref for NSNull {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNull {}
impl NSNull {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNull), alloc) })
    }
}
impl INSNull for NSNull {}
pub trait INSNull: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSData(pub id);
impl std::ops::Deref for NSData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSData {}
impl NSData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSData), alloc) })
    }
}
impl INSData for NSData {}
pub trait INSData: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDate(pub id);
impl std::ops::Deref for NSDate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDate {}
impl NSDate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDate), alloc) })
    }
}
impl INSDate for NSDate {}
pub trait INSDate: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSTimeZone(pub id);
impl std::ops::Deref for NSTimeZone {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimeZone {}
impl NSTimeZone {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSTimeZone), alloc) })
    }
}
impl INSTimeZone for NSTimeZone {}
pub trait INSTimeZone: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLocale(pub id);
impl std::ops::Deref for NSLocale {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLocale {}
impl NSLocale {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLocale), alloc) })
    }
}
impl INSLocale for NSLocale {}
pub trait INSLocale: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSet(pub id);
impl std::ops::Deref for NSSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSet {}
impl NSSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSet), alloc) })
    }
}
impl INSSet for NSSet {}
pub trait INSSet: Sized + std::ops::Deref {}
unsafe extern "C" {
    pub static mut kCFCoreFoundationVersionNumber: f64;
}
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFHashCode = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
pub type CFTypeRef = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFMutableStringRef = *mut __CFString;
pub type CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult_kCFCompareLessThan: CFComparisonResult = -1;
pub const CFComparisonResult_kCFCompareEqualTo: CFComparisonResult = 0;
pub const CFComparisonResult_kCFCompareGreaterThan: CFComparisonResult = 1;
pub type CFComparisonResult = CFIndex;
pub type CFComparatorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult,
>;
pub const kCFNotFound: CFIndex = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFRange"][::std::mem::size_of::<CFRange>() - 16usize];
    ["Alignment of CFRange"][::std::mem::align_of::<CFRange>() - 8usize];
    ["Offset of field: CFRange::location"][::std::mem::offset_of!(CFRange, location) - 0usize];
    ["Offset of field: CFRange::length"][::std::mem::offset_of!(CFRange, length) - 8usize];
};
unsafe extern "C" {
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
unsafe extern "C" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
unsafe extern "C" {
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
unsafe extern "C" {
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
unsafe extern "C" {
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}
unsafe extern "C" {
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}
unsafe extern "C" {
    pub static kCFAllocatorNull: CFAllocatorRef;
}
unsafe extern "C" {
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}
pub type CFAllocatorRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
pub type CFAllocatorAllocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocSize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorReallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorDeallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, info: *mut ::std::os::raw::c_void),
>;
pub type CFAllocatorPreferredSizeCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        size: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> CFIndex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFAllocatorContext"][::std::mem::size_of::<CFAllocatorContext>() - 72usize];
    ["Alignment of CFAllocatorContext"][::std::mem::align_of::<CFAllocatorContext>() - 8usize];
    ["Offset of field: CFAllocatorContext::version"]
        [::std::mem::offset_of!(CFAllocatorContext, version) - 0usize];
    ["Offset of field: CFAllocatorContext::info"]
        [::std::mem::offset_of!(CFAllocatorContext, info) - 8usize];
    ["Offset of field: CFAllocatorContext::retain"]
        [::std::mem::offset_of!(CFAllocatorContext, retain) - 16usize];
    ["Offset of field: CFAllocatorContext::release"]
        [::std::mem::offset_of!(CFAllocatorContext, release) - 24usize];
    ["Offset of field: CFAllocatorContext::copyDescription"]
        [::std::mem::offset_of!(CFAllocatorContext, copyDescription) - 32usize];
    ["Offset of field: CFAllocatorContext::allocate"]
        [::std::mem::offset_of!(CFAllocatorContext, allocate) - 40usize];
    ["Offset of field: CFAllocatorContext::reallocate"]
        [::std::mem::offset_of!(CFAllocatorContext, reallocate) - 48usize];
    ["Offset of field: CFAllocatorContext::deallocate"]
        [::std::mem::offset_of!(CFAllocatorContext, deallocate) - 56usize];
    ["Offset of field: CFAllocatorContext::preferredSize"]
        [::std::mem::offset_of!(CFAllocatorContext, preferredSize) - 64usize];
};
unsafe extern "C" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
unsafe extern "C" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
unsafe extern "C" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}
unsafe extern "C" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: *mut CFAllocatorContext);
}
unsafe extern "C" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFRelease(cf: CFTypeRef);
}
unsafe extern "C" {
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}
unsafe extern "C" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}
unsafe extern "C" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
pub type NSZone = _NSZone;
unsafe extern "C" {
    pub fn NSDefaultMallocZone() -> *mut NSZone;
}
unsafe extern "C" {
    pub fn NSCreateZone(
        startSize: NSUInteger,
        granularity: NSUInteger,
        canFree: BOOL,
    ) -> *mut NSZone;
}
unsafe extern "C" {
    pub fn NSRecycleZone(zone: *mut NSZone);
}
unsafe extern "C" {
    pub fn NSSetZoneName(zone: *mut NSZone, name: NSString);
}
unsafe extern "C" {
    pub fn NSZoneName(zone: *mut NSZone) -> NSString;
}
unsafe extern "C" {
    pub fn NSZoneFromPointer(ptr: *mut ::std::os::raw::c_void) -> *mut NSZone;
}
unsafe extern "C" {
    pub fn NSZoneMalloc(zone: *mut NSZone, size: NSUInteger) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn NSZoneCalloc(
        zone: *mut NSZone,
        numElems: NSUInteger,
        byteSize: NSUInteger,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn NSZoneRealloc(
        zone: *mut NSZone,
        ptr: *mut ::std::os::raw::c_void,
        size: NSUInteger,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn NSZoneFree(zone: *mut NSZone, ptr: *mut ::std::os::raw::c_void);
}
pub const NSScannedOption: _bindgen_ty_7 = 1;
pub const NSCollectorDisabledOption: _bindgen_ty_7 = 2;
pub type _bindgen_ty_7 = NSUInteger;
unsafe extern "C" {
    pub fn NSAllocateCollectable(
        size: NSUInteger,
        options: NSUInteger,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn NSReallocateCollectable(
        ptr: *mut ::std::os::raw::c_void,
        size: NSUInteger,
        options: NSUInteger,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn NSPageSize() -> NSUInteger;
}
unsafe extern "C" {
    pub fn NSLogPageSize() -> NSUInteger;
}
unsafe extern "C" {
    pub fn NSRoundUpToMultipleOfPageSize(bytes: NSUInteger) -> NSUInteger;
}
unsafe extern "C" {
    pub fn NSRoundDownToMultipleOfPageSize(bytes: NSUInteger) -> NSUInteger;
}
unsafe extern "C" {
    pub fn NSAllocateMemoryPages(bytes: NSUInteger) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn NSDeallocateMemoryPages(ptr: *mut ::std::os::raw::c_void, bytes: NSUInteger);
}
unsafe extern "C" {
    pub fn NSCopyMemoryPages(
        source: *const ::std::os::raw::c_void,
        dest: *mut ::std::os::raw::c_void,
        bytes: NSUInteger,
    );
}
unsafe extern "C" {
    pub fn NSRealMemoryAvailable() -> NSUInteger;
}
pub trait PNSCopying: Sized + std::ops::Deref {
    unsafe fn copyWithZone_(&self, zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , copyWithZone : zone) }
    }
}
pub trait PNSMutableCopying: Sized + std::ops::Deref {
    unsafe fn mutableCopyWithZone_(&self, zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , mutableCopyWithZone : zone) }
    }
}
pub trait PNSCoding: Sized + std::ops::Deref {
    unsafe fn encodeWithCoder_(&self, coder: NSCoder)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeWithCoder : coder) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
}
pub trait PNSSecureCoding: Sized + std::ops::Deref {
    unsafe fn supportsSecureCoding() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSSecureCoding), supportsSecureCoding) }
    }
}
impl NSObject_NSCoderMethods for NSObject {}
pub trait NSObject_NSCoderMethods: Sized + std::ops::Deref {
    unsafe fn replacementObjectForCoder_(&self, coder: NSCoder) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , replacementObjectForCoder : coder) }
    }
    unsafe fn awakeAfterUsingCoder_(&self, coder: NSCoder) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , awakeAfterUsingCoder : coder) }
    }
    unsafe fn classForCoder(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, classForCoder) }
    }
    unsafe fn version() -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSObject), version) }
    }
    unsafe fn setVersion_(aVersion: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , setVersion : aVersion) }
    }
}
impl NSObject_NSDeprecatedMethods for NSObject {}
pub trait NSObject_NSDeprecatedMethods: Sized + std::ops::Deref {
    unsafe fn poseAsClass_(aClass: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSObject) , poseAsClass : aClass) }
    }
}
pub trait PNSDiscardableContent: Sized + std::ops::Deref {
    unsafe fn beginContentAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, beginContentAccess) }
    }
    unsafe fn endContentAccess(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, endContentAccess) }
    }
    unsafe fn discardContentIfPossible(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, discardContentIfPossible) }
    }
    unsafe fn isContentDiscarded(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isContentDiscarded) }
    }
}
impl NSObject_NSDiscardableContentProxy for NSObject {}
pub trait NSObject_NSDiscardableContentProxy: Sized + std::ops::Deref {
    unsafe fn autoContentAccessingProxy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, autoContentAccessingProxy) }
    }
}
unsafe extern "C" {
    pub fn NSAllocateObject(aClass: Class, extraBytes: NSUInteger, zone: *mut NSZone) -> id;
}
unsafe extern "C" {
    pub fn NSDeallocateObject(object: id);
}
unsafe extern "C" {
    pub fn NSCopyObject(object: id, extraBytes: NSUInteger, zone: *mut NSZone) -> id;
}
unsafe extern "C" {
    pub fn NSShouldRetainWithZone(anObject: id, requestedZone: *mut NSZone) -> BOOL;
}
unsafe extern "C" {
    pub fn NSIncrementExtraRefCount(object: id);
}
unsafe extern "C" {
    pub fn NSDecrementExtraRefCountWasZero(object: id) -> BOOL;
}
unsafe extern "C" {
    pub fn NSExtraRefCount(object: id) -> NSUInteger;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSFastEnumerationState {
    pub state: ::std::os::raw::c_ulong,
    pub itemsPtr: *mut id,
    pub mutationsPtr: *mut ::std::os::raw::c_ulong,
    pub extra: [::std::os::raw::c_ulong; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NSFastEnumerationState"][::std::mem::size_of::<NSFastEnumerationState>() - 64usize];
    ["Alignment of NSFastEnumerationState"]
        [::std::mem::align_of::<NSFastEnumerationState>() - 8usize];
    ["Offset of field: NSFastEnumerationState::state"]
        [::std::mem::offset_of!(NSFastEnumerationState, state) - 0usize];
    ["Offset of field: NSFastEnumerationState::itemsPtr"]
        [::std::mem::offset_of!(NSFastEnumerationState, itemsPtr) - 8usize];
    ["Offset of field: NSFastEnumerationState::mutationsPtr"]
        [::std::mem::offset_of!(NSFastEnumerationState, mutationsPtr) - 16usize];
    ["Offset of field: NSFastEnumerationState::extra"]
        [::std::mem::offset_of!(NSFastEnumerationState, extra) - 24usize];
};
pub trait PNSFastEnumeration: Sized + std::ops::Deref {
    unsafe fn countByEnumeratingWithState_objects_count_(
        &self,
        state: *mut NSFastEnumerationState,
        buffer: *mut id,
        len: NSUInteger,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , countByEnumeratingWithState : state objects : buffer count : len)
        }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSEnumerator(pub id);
impl std::ops::Deref for NSEnumerator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSEnumerator {}
impl NSEnumerator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSEnumerator), alloc) })
    }
}
impl PNSFastEnumeration for NSEnumerator {}
impl INSObject for NSEnumerator {}
impl PNSObject for NSEnumerator {}
impl From<NSEnumerator> for NSObject {
    fn from(child: NSEnumerator) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSEnumerator {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSEnumerator, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSEnumerator)) };
        if is_kind_of {
            Ok(NSEnumerator(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSEnumerator")
        }
    }
}
impl<ObjectType: 'static> INSEnumerator<ObjectType> for NSEnumerator {}
pub trait INSEnumerator<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn nextObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, nextObject) }
    }
}
impl<ObjectType: 'static> NSEnumerator_NSExtendedEnumerator<ObjectType> for NSEnumerator {}
pub trait NSEnumerator_NSExtendedEnumerator<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn allObjects(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, allObjects) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSValue(pub id);
impl std::ops::Deref for NSValue {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSValue {}
impl NSValue {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSValue), alloc) })
    }
}
impl PNSCopying for NSValue {}
impl PNSSecureCoding for NSValue {}
impl INSObject for NSValue {}
impl PNSObject for NSValue {}
impl From<NSValue> for NSObject {
    fn from(child: NSValue) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSValue {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSValue, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSValue)) };
        if is_kind_of {
            Ok(NSValue(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSValue")
        }
    }
}
impl INSValue for NSValue {}
pub trait INSValue: Sized + std::ops::Deref {
    unsafe fn getValue_size_(&self, value: *mut ::std::os::raw::c_void, size: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getValue : value size : size) }
    }
    unsafe fn initWithBytes_objCType_(
        &self,
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithBytes : value objCType : type_) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
    unsafe fn objCType(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, objCType) }
    }
}
impl NSValue_NSValueCreation for NSValue {}
pub trait NSValue_NSValueCreation: Sized + std::ops::Deref {
    unsafe fn valueWithBytes_objCType_(
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithBytes : value objCType : type_) }
    }
    unsafe fn value_withObjCType_(
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , value : value withObjCType : type_) }
    }
}
impl NSValue_NSValueExtensionMethods for NSValue {}
pub trait NSValue_NSValueExtensionMethods: Sized + std::ops::Deref {
    unsafe fn isEqualToValue_(&self, value: NSValue) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isEqualToValue : value) }
    }
    unsafe fn nonretainedObjectValue(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, nonretainedObjectValue) }
    }
    unsafe fn pointerValue(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, pointerValue) }
    }
    unsafe fn valueWithNonretainedObject_(anObject: id) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithNonretainedObject : anObject) }
    }
    unsafe fn valueWithPointer_(pointer: *const ::std::os::raw::c_void) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithPointer : pointer) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNumber(pub id);
impl std::ops::Deref for NSNumber {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNumber {}
impl NSNumber {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNumber), alloc) })
    }
}
impl INSValue for NSNumber {}
impl PNSCopying for NSNumber {}
impl PNSSecureCoding for NSNumber {}
impl From<NSNumber> for NSValue {
    fn from(child: NSNumber) -> NSValue {
        NSValue(child.0)
    }
}
impl std::convert::TryFrom<NSValue> for NSNumber {
    type Error = &'static str;
    fn try_from(parent: NSValue) -> Result<NSNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSNumber)) };
        if is_kind_of {
            Ok(NSNumber(parent.0))
        } else {
            Err("This NSValue cannot be downcasted to NSNumber")
        }
    }
}
impl INSObject for NSNumber {}
impl PNSObject for NSNumber {}
impl From<NSNumber> for NSObject {
    fn from(child: NSNumber) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNumber {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSNumber)) };
        if is_kind_of {
            Ok(NSNumber(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNumber")
        }
    }
}
impl INSNumber for NSNumber {}
pub trait INSNumber: Sized + std::ops::Deref {
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
    unsafe fn initWithChar_(&self, value: ::std::os::raw::c_char) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithChar : value) }
    }
    unsafe fn initWithUnsignedChar_(&self, value: ::std::os::raw::c_uchar) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithUnsignedChar : value) }
    }
    unsafe fn initWithShort_(&self, value: ::std::os::raw::c_short) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithShort : value) }
    }
    unsafe fn initWithUnsignedShort_(&self, value: ::std::os::raw::c_ushort) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithUnsignedShort : value) }
    }
    unsafe fn initWithInt_(&self, value: ::std::os::raw::c_int) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithInt : value) }
    }
    unsafe fn initWithUnsignedInt_(&self, value: ::std::os::raw::c_uint) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithUnsignedInt : value) }
    }
    unsafe fn initWithLong_(&self, value: ::std::os::raw::c_long) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithLong : value) }
    }
    unsafe fn initWithUnsignedLong_(&self, value: ::std::os::raw::c_ulong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithUnsignedLong : value) }
    }
    unsafe fn initWithLongLong_(&self, value: ::std::os::raw::c_longlong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithLongLong : value) }
    }
    unsafe fn initWithUnsignedLongLong_(&self, value: ::std::os::raw::c_ulonglong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithUnsignedLongLong : value) }
    }
    unsafe fn initWithFloat_(&self, value: f32) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithFloat : value) }
    }
    unsafe fn initWithDouble_(&self, value: f64) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithDouble : value) }
    }
    unsafe fn initWithBool_(&self, value: BOOL) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithBool : value) }
    }
    unsafe fn initWithInteger_(&self, value: NSInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithInteger : value) }
    }
    unsafe fn initWithUnsignedInteger_(&self, value: NSUInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithUnsignedInteger : value) }
    }
    unsafe fn compare_(&self, otherNumber: NSNumber) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , compare : otherNumber) }
    }
    unsafe fn isEqualToNumber_(&self, number: NSNumber) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isEqualToNumber : number) }
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , descriptionWithLocale : locale) }
    }
    unsafe fn charValue(&self) -> ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, charValue) }
    }
    unsafe fn unsignedCharValue(&self) -> ::std::os::raw::c_uchar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, unsignedCharValue) }
    }
    unsafe fn shortValue(&self) -> ::std::os::raw::c_short
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, shortValue) }
    }
    unsafe fn unsignedShortValue(&self) -> ::std::os::raw::c_ushort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, unsignedShortValue) }
    }
    unsafe fn intValue(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, intValue) }
    }
    unsafe fn unsignedIntValue(&self) -> ::std::os::raw::c_uint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, unsignedIntValue) }
    }
    unsafe fn longValue(&self) -> ::std::os::raw::c_long
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, longValue) }
    }
    unsafe fn unsignedLongValue(&self) -> ::std::os::raw::c_ulong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, unsignedLongValue) }
    }
    unsafe fn longLongValue(&self) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, longLongValue) }
    }
    unsafe fn unsignedLongLongValue(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, unsignedLongLongValue) }
    }
    unsafe fn floatValue(&self) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, floatValue) }
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, doubleValue) }
    }
    unsafe fn boolValue(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, boolValue) }
    }
    unsafe fn integerValue(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, integerValue) }
    }
    unsafe fn unsignedIntegerValue(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, unsignedIntegerValue) }
    }
    unsafe fn stringValue(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringValue) }
    }
}
impl NSNumber_NSNumberCreation for NSNumber {}
pub trait NSNumber_NSNumberCreation: Sized + std::ops::Deref {
    unsafe fn numberWithChar_(value: ::std::os::raw::c_char) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithChar : value) }
    }
    unsafe fn numberWithUnsignedChar_(value: ::std::os::raw::c_uchar) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithUnsignedChar : value) }
    }
    unsafe fn numberWithShort_(value: ::std::os::raw::c_short) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithShort : value) }
    }
    unsafe fn numberWithUnsignedShort_(value: ::std::os::raw::c_ushort) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithUnsignedShort : value) }
    }
    unsafe fn numberWithInt_(value: ::std::os::raw::c_int) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithInt : value) }
    }
    unsafe fn numberWithUnsignedInt_(value: ::std::os::raw::c_uint) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithUnsignedInt : value) }
    }
    unsafe fn numberWithLong_(value: ::std::os::raw::c_long) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithLong : value) }
    }
    unsafe fn numberWithUnsignedLong_(value: ::std::os::raw::c_ulong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithUnsignedLong : value) }
    }
    unsafe fn numberWithLongLong_(value: ::std::os::raw::c_longlong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithLongLong : value) }
    }
    unsafe fn numberWithUnsignedLongLong_(value: ::std::os::raw::c_ulonglong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithUnsignedLongLong : value) }
    }
    unsafe fn numberWithFloat_(value: f32) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithFloat : value) }
    }
    unsafe fn numberWithDouble_(value: f64) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithDouble : value) }
    }
    unsafe fn numberWithBool_(value: BOOL) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithBool : value) }
    }
    unsafe fn numberWithInteger_(value: NSInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithInteger : value) }
    }
    unsafe fn numberWithUnsignedInteger_(value: NSUInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSNumber) , numberWithUnsignedInteger : value) }
    }
}
impl NSValue_NSDeprecated for NSValue {}
pub trait NSValue_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn getValue_(&self, value: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getValue : value) }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSRange {
    pub location: NSUInteger,
    pub length: NSUInteger,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NSRange"][::std::mem::size_of::<_NSRange>() - 16usize];
    ["Alignment of _NSRange"][::std::mem::align_of::<_NSRange>() - 8usize];
    ["Offset of field: _NSRange::location"][::std::mem::offset_of!(_NSRange, location) - 0usize];
    ["Offset of field: _NSRange::length"][::std::mem::offset_of!(_NSRange, length) - 8usize];
};
pub type NSRange = _NSRange;
pub type NSRangePointer = *mut NSRange;
unsafe extern "C" {
    pub fn NSUnionRange(range1: NSRange, range2: NSRange) -> NSRange;
}
unsafe extern "C" {
    pub fn NSIntersectionRange(range1: NSRange, range2: NSRange) -> NSRange;
}
unsafe extern "C" {
    pub fn NSStringFromRange(range: NSRange) -> NSString;
}
unsafe extern "C" {
    pub fn NSRangeFromString(aString: NSString) -> NSRange;
}
impl NSValue_NSValueRangeExtensions for NSValue {}
pub trait NSValue_NSValueRangeExtensions: Sized + std::ops::Deref {
    unsafe fn rangeValue(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeValue) }
    }
    unsafe fn valueWithRange_(range: NSRange) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithRange : range) }
    }
}
pub const NSCollectionChangeType_NSCollectionChangeInsert: NSCollectionChangeType = 0;
pub const NSCollectionChangeType_NSCollectionChangeRemove: NSCollectionChangeType = 1;
pub type NSCollectionChangeType = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOrderedCollectionChange(pub id);
impl std::ops::Deref for NSOrderedCollectionChange {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedCollectionChange {}
impl NSOrderedCollectionChange {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOrderedCollectionChange), alloc) })
    }
}
impl INSObject for NSOrderedCollectionChange {}
impl PNSObject for NSOrderedCollectionChange {}
impl From<NSOrderedCollectionChange> for NSObject {
    fn from(child: NSOrderedCollectionChange) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedCollectionChange {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedCollectionChange, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSOrderedCollectionChange)) };
        if is_kind_of {
            Ok(NSOrderedCollectionChange(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedCollectionChange")
        }
    }
}
impl<ObjectType: 'static> INSOrderedCollectionChange<ObjectType> for NSOrderedCollectionChange {}
pub trait INSOrderedCollectionChange<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn init(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn initWithObject_type_index_(
        &self,
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithObject : anObject r#type : type_ index : index) }
    }
    unsafe fn initWithObject_type_index_associatedIndex_(
        &self,
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
        associatedIndex: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithObject : anObject r#type : type_ index : index associatedIndex : associatedIndex)
        }
    }
    unsafe fn object(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, object) }
    }
    unsafe fn changeType(&self) -> NSCollectionChangeType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, changeType) }
    }
    unsafe fn index(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, index) }
    }
    unsafe fn associatedIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, associatedIndex) }
    }
    unsafe fn changeWithObject_type_index_(
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
    ) -> NSOrderedCollectionChange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSOrderedCollectionChange) , changeWithObject : anObject r#type : type_ index : index)
        }
    }
    unsafe fn changeWithObject_type_index_associatedIndex_(
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
        associatedIndex: NSUInteger,
    ) -> NSOrderedCollectionChange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSOrderedCollectionChange) , changeWithObject : anObject r#type : type_ index : index associatedIndex : associatedIndex)
        }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSIndexSet(pub id);
impl std::ops::Deref for NSIndexSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSIndexSet {}
impl NSIndexSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSIndexSet), alloc) })
    }
}
impl PNSCopying for NSIndexSet {}
impl PNSMutableCopying for NSIndexSet {}
impl PNSSecureCoding for NSIndexSet {}
impl INSObject for NSIndexSet {}
impl PNSObject for NSIndexSet {}
impl From<NSIndexSet> for NSObject {
    fn from(child: NSIndexSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSIndexSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSIndexSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSIndexSet)) };
        if is_kind_of {
            Ok(NSIndexSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSIndexSet")
        }
    }
}
impl INSIndexSet for NSIndexSet {}
pub trait INSIndexSet: Sized + std::ops::Deref {
    unsafe fn initWithIndexesInRange_(&self, range: NSRange) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithIndexesInRange : range) }
    }
    unsafe fn initWithIndexSet_(&self, indexSet: NSIndexSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithIndexSet : indexSet) }
    }
    unsafe fn initWithIndex_(&self, value: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithIndex : value) }
    }
    unsafe fn isEqualToIndexSet_(&self, indexSet: NSIndexSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isEqualToIndexSet : indexSet) }
    }
    unsafe fn indexGreaterThanIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexGreaterThanIndex : value) }
    }
    unsafe fn indexLessThanIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexLessThanIndex : value) }
    }
    unsafe fn indexGreaterThanOrEqualToIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexGreaterThanOrEqualToIndex : value) }
    }
    unsafe fn indexLessThanOrEqualToIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexLessThanOrEqualToIndex : value) }
    }
    unsafe fn getIndexes_maxCount_inIndexRange_(
        &self,
        indexBuffer: *mut NSUInteger,
        bufferSize: NSUInteger,
        range: NSRangePointer,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getIndexes : indexBuffer maxCount : bufferSize inIndexRange : range)
        }
    }
    unsafe fn countOfIndexesInRange_(&self, range: NSRange) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , countOfIndexesInRange : range) }
    }
    unsafe fn containsIndex_(&self, value: NSUInteger) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , containsIndex : value) }
    }
    unsafe fn containsIndexesInRange_(&self, range: NSRange) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , containsIndexesInRange : range) }
    }
    unsafe fn containsIndexes_(&self, indexSet: NSIndexSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , containsIndexes : indexSet) }
    }
    unsafe fn intersectsIndexesInRange_(&self, range: NSRange) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , intersectsIndexesInRange : range) }
    }
    unsafe fn enumerateIndexesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateIndexesUsingBlock : block) }
    }
    unsafe fn enumerateIndexesWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateIndexesWithOptions : opts usingBlock : block) }
    }
    unsafe fn enumerateIndexesInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , enumerateIndexesInRange : range options : opts usingBlock : block)
        }
    }
    unsafe fn indexPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexPassingTest : predicate) }
    }
    unsafe fn indexWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexWithOptions : opts passingTest : predicate) }
    }
    unsafe fn indexInRange_options_passingTest_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexInRange : range options : opts passingTest : predicate) }
    }
    unsafe fn indexesPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexesPassingTest : predicate) }
    }
    unsafe fn indexesWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexesWithOptions : opts passingTest : predicate) }
    }
    unsafe fn indexesInRange_options_passingTest_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , indexesInRange : range options : opts passingTest : predicate)
        }
    }
    unsafe fn enumerateRangesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateRangesUsingBlock : block) }
    }
    unsafe fn enumerateRangesWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateRangesWithOptions : opts usingBlock : block) }
    }
    unsafe fn enumerateRangesInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , enumerateRangesInRange : range options : opts usingBlock : block)
        }
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, count) }
    }
    unsafe fn firstIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, firstIndex) }
    }
    unsafe fn lastIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, lastIndex) }
    }
    unsafe fn indexSet() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSIndexSet), indexSet) }
    }
    unsafe fn indexSetWithIndex_(value: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSIndexSet) , indexSetWithIndex : value) }
    }
    unsafe fn indexSetWithIndexesInRange_(range: NSRange) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSIndexSet) , indexSetWithIndexesInRange : range) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableIndexSet(pub id);
impl std::ops::Deref for NSMutableIndexSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableIndexSet {}
impl NSMutableIndexSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableIndexSet), alloc) })
    }
}
impl INSIndexSet for NSMutableIndexSet {}
impl PNSCopying for NSMutableIndexSet {}
impl PNSMutableCopying for NSMutableIndexSet {}
impl PNSSecureCoding for NSMutableIndexSet {}
impl From<NSMutableIndexSet> for NSIndexSet {
    fn from(child: NSMutableIndexSet) -> NSIndexSet {
        NSIndexSet(child.0)
    }
}
impl std::convert::TryFrom<NSIndexSet> for NSMutableIndexSet {
    type Error = &'static str;
    fn try_from(parent: NSIndexSet) -> Result<NSMutableIndexSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableIndexSet)) };
        if is_kind_of {
            Ok(NSMutableIndexSet(parent.0))
        } else {
            Err("This NSIndexSet cannot be downcasted to NSMutableIndexSet")
        }
    }
}
impl INSObject for NSMutableIndexSet {}
impl PNSObject for NSMutableIndexSet {}
impl From<NSMutableIndexSet> for NSObject {
    fn from(child: NSMutableIndexSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableIndexSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableIndexSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableIndexSet)) };
        if is_kind_of {
            Ok(NSMutableIndexSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableIndexSet")
        }
    }
}
impl INSMutableIndexSet for NSMutableIndexSet {}
pub trait INSMutableIndexSet: Sized + std::ops::Deref {
    unsafe fn addIndexes_(&self, indexSet: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addIndexes : indexSet) }
    }
    unsafe fn removeIndexes_(&self, indexSet: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeIndexes : indexSet) }
    }
    unsafe fn removeAllIndexes(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, removeAllIndexes) }
    }
    unsafe fn addIndex_(&self, value: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addIndex : value) }
    }
    unsafe fn removeIndex_(&self, value: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeIndex : value) }
    }
    unsafe fn addIndexesInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addIndexesInRange : range) }
    }
    unsafe fn removeIndexesInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeIndexesInRange : range) }
    }
    unsafe fn shiftIndexesStartingAtIndex_by_(&self, index: NSUInteger, delta: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , shiftIndexesStartingAtIndex : index by : delta) }
    }
}
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationOmitInsertedObjects : NSOrderedCollectionDifferenceCalculationOptions = 1 ;
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationOmitRemovedObjects : NSOrderedCollectionDifferenceCalculationOptions = 2 ;
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationInferMoves : NSOrderedCollectionDifferenceCalculationOptions = 4 ;
pub type NSOrderedCollectionDifferenceCalculationOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOrderedCollectionDifference(pub id);
impl std::ops::Deref for NSOrderedCollectionDifference {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedCollectionDifference {}
impl NSOrderedCollectionDifference {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOrderedCollectionDifference), alloc) })
    }
}
impl PNSFastEnumeration for NSOrderedCollectionDifference {}
impl INSObject for NSOrderedCollectionDifference {}
impl PNSObject for NSOrderedCollectionDifference {}
impl From<NSOrderedCollectionDifference> for NSObject {
    fn from(child: NSOrderedCollectionDifference) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedCollectionDifference {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedCollectionDifference, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (NSOrderedCollectionDifference))
        };
        if is_kind_of {
            Ok(NSOrderedCollectionDifference(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedCollectionDifference")
        }
    }
}
impl<ObjectType: 'static> INSOrderedCollectionDifference<ObjectType>
    for NSOrderedCollectionDifference
{
}
pub trait INSOrderedCollectionDifference<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithChanges_(&self, changes: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithChanges : changes) }
    }
    unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_(
        &self,
        inserts: NSIndexSet,
        insertedObjects: NSArray,
        removes: NSIndexSet,
        removedObjects: NSArray,
        changes: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithInsertIndexes : inserts insertedObjects : insertedObjects removeIndexes : removes removedObjects : removedObjects additionalChanges : changes)
        }
    }
    unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_(
        &self,
        inserts: NSIndexSet,
        insertedObjects: NSArray,
        removes: NSIndexSet,
        removedObjects: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithInsertIndexes : inserts insertedObjects : insertedObjects removeIndexes : removes removedObjects : removedObjects)
        }
    }
    unsafe fn differenceByTransformingChangesWithBlock_(
        &self,
        block: *mut ::std::os::raw::c_void,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , differenceByTransformingChangesWithBlock : block) }
    }
    unsafe fn inverseDifference(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, inverseDifference) }
    }
    unsafe fn insertions(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, insertions) }
    }
    unsafe fn removals(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, removals) }
    }
    unsafe fn hasChanges(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hasChanges) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSArray(pub id);
impl std::ops::Deref for NSArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSArray {}
impl NSArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSArray), alloc) })
    }
}
impl PNSCopying for NSArray {}
impl PNSMutableCopying for NSArray {}
impl PNSSecureCoding for NSArray {}
impl PNSFastEnumeration for NSArray {}
impl INSObject for NSArray {}
impl PNSObject for NSArray {}
impl From<NSArray> for NSObject {
    fn from(child: NSArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSArray, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSArray)) };
        if is_kind_of {
            Ok(NSArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSArray")
        }
    }
}
impl<ObjectType: 'static> INSArray<ObjectType> for NSArray {}
pub trait INSArray<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn objectAtIndex_(&self, index: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , objectAtIndex : index) }
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn initWithObjects_count_(
        &self,
        objects: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithObjects : objects count : cnt) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, count) }
    }
}
impl<ObjectType: 'static> NSArray_NSExtendedArray<ObjectType> for NSArray {}
pub trait NSArray_NSExtendedArray<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn arrayByAddingObject_(&self, anObject: id) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , arrayByAddingObject : anObject) }
    }
    unsafe fn arrayByAddingObjectsFromArray_(&self, otherArray: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , arrayByAddingObjectsFromArray : otherArray) }
    }
    unsafe fn componentsJoinedByString_(&self, separator: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , componentsJoinedByString : separator) }
    }
    unsafe fn containsObject_(&self, anObject: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , containsObject : anObject) }
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , descriptionWithLocale : locale) }
    }
    unsafe fn descriptionWithLocale_indent_(&self, locale: id, level: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , descriptionWithLocale : locale indent : level) }
    }
    unsafe fn firstObjectCommonWithArray_(&self, otherArray: NSArray) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , firstObjectCommonWithArray : otherArray) }
    }
    unsafe fn getObjects_range_(&self, objects: *mut id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getObjects : objects range : range) }
    }
    unsafe fn indexOfObject_(&self, anObject: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexOfObject : anObject) }
    }
    unsafe fn indexOfObject_inRange_(&self, anObject: id, range: NSRange) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexOfObject : anObject inRange : range) }
    }
    unsafe fn indexOfObjectIdenticalTo_(&self, anObject: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexOfObjectIdenticalTo : anObject) }
    }
    unsafe fn indexOfObjectIdenticalTo_inRange_(&self, anObject: id, range: NSRange) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexOfObjectIdenticalTo : anObject inRange : range) }
    }
    unsafe fn isEqualToArray_(&self, otherArray: NSArray) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isEqualToArray : otherArray) }
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, objectEnumerator) }
    }
    unsafe fn reverseObjectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, reverseObjectEnumerator) }
    }
    unsafe fn sortedArrayUsingFunction_context_(
        &self,
        comparator: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: id,
                arg2: id,
                arg3: *mut ::std::os::raw::c_void,
            ) -> NSInteger,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortedArrayUsingFunction : comparator context : context) }
    }
    unsafe fn sortedArrayUsingFunction_context_hint_(
        &self,
        comparator: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: id,
                arg2: id,
                arg3: *mut ::std::os::raw::c_void,
            ) -> NSInteger,
        >,
        context: *mut ::std::os::raw::c_void,
        hint: NSData,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , sortedArrayUsingFunction : comparator context : context hint : hint)
        }
    }
    unsafe fn sortedArrayUsingSelector_(&self, comparator: objc::runtime::Sel) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortedArrayUsingSelector : comparator) }
    }
    unsafe fn subarrayWithRange_(&self, range: NSRange) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , subarrayWithRange : range) }
    }
    unsafe fn writeToURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToURL : url error : error) }
    }
    unsafe fn makeObjectsPerformSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , makeObjectsPerformSelector : aSelector) }
    }
    unsafe fn makeObjectsPerformSelector_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        argument: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , makeObjectsPerformSelector : aSelector withObject : argument)
        }
    }
    unsafe fn objectsAtIndexes_(&self, indexes: NSIndexSet) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , objectsAtIndexes : indexes) }
    }
    unsafe fn objectAtIndexedSubscript_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , objectAtIndexedSubscript : idx) }
    }
    unsafe fn enumerateObjectsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateObjectsUsingBlock : block) }
    }
    unsafe fn enumerateObjectsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateObjectsWithOptions : opts usingBlock : block) }
    }
    unsafe fn enumerateObjectsAtIndexes_options_usingBlock_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , enumerateObjectsAtIndexes : s options : opts usingBlock : block)
        }
    }
    unsafe fn indexOfObjectPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexOfObjectPassingTest : predicate) }
    }
    unsafe fn indexOfObjectWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexOfObjectWithOptions : opts passingTest : predicate) }
    }
    unsafe fn indexOfObjectAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , indexOfObjectAtIndexes : s options : opts passingTest : predicate)
        }
    }
    unsafe fn indexesOfObjectsPassingTest_(
        &self,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexesOfObjectsPassingTest : predicate) }
    }
    unsafe fn indexesOfObjectsWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , indexesOfObjectsWithOptions : opts passingTest : predicate) }
    }
    unsafe fn indexesOfObjectsAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , indexesOfObjectsAtIndexes : s options : opts passingTest : predicate)
        }
    }
    unsafe fn sortedArrayUsingComparator_(&self, cmptr: NSComparator) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortedArrayUsingComparator : cmptr) }
    }
    unsafe fn sortedArrayWithOptions_usingComparator_(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortedArrayWithOptions : opts usingComparator : cmptr) }
    }
    unsafe fn indexOfObject_inSortedRange_options_usingComparator_(
        &self,
        obj: id,
        r: NSRange,
        opts: NSBinarySearchingOptions,
        cmp: NSComparator,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , indexOfObject : obj inSortedRange : r options : opts usingComparator : cmp)
        }
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, description) }
    }
    unsafe fn firstObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, firstObject) }
    }
    unsafe fn lastObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, lastObject) }
    }
    unsafe fn sortedArrayHint(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, sortedArrayHint) }
    }
}
pub const NSBinarySearchingOptions_NSBinarySearchingFirstEqual: NSBinarySearchingOptions = 256;
pub const NSBinarySearchingOptions_NSBinarySearchingLastEqual: NSBinarySearchingOptions = 512;
pub const NSBinarySearchingOptions_NSBinarySearchingInsertionIndex: NSBinarySearchingOptions = 1024;
pub type NSBinarySearchingOptions = NSUInteger;
impl<ObjectType: 'static> NSArray_NSArrayCreation<ObjectType> for NSArray {}
pub trait NSArray_NSArrayCreation<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithObjects_(&self, firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithObjects : firstObj) }
    }
    unsafe fn initWithArray_(&self, array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithArray : array) }
    }
    unsafe fn initWithArray_copyItems_(&self, array: NSArray, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithArray : array copyItems : flag) }
    }
    unsafe fn initWithContentsOfURL_error_(&self, url: NSURL, error: *mut NSError) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url error : error) }
    }
    unsafe fn array() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSArray), array) }
    }
    unsafe fn arrayWithObject_(anObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSArray) , arrayWithObject : anObject) }
    }
    unsafe fn arrayWithObjects_count_(objects: *const *mut u64, cnt: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSArray) , arrayWithObjects : objects count : cnt) }
    }
    unsafe fn arrayWithObjects_(firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSArray) , arrayWithObjects : firstObj) }
    }
    unsafe fn arrayWithArray_(array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSArray) , arrayWithArray : array) }
    }
    unsafe fn arrayWithContentsOfURL_error_(url: NSURL, error: *mut NSError) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSArray) , arrayWithContentsOfURL : url error : error) }
    }
}
impl<ObjectType: 'static> NSArray_NSArrayDiffing<ObjectType> for NSArray {}
pub trait NSArray_NSArrayDiffing<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn differenceFromArray_withOptions_usingEquivalenceTest_(
        &self,
        other: NSArray,
        options: NSOrderedCollectionDifferenceCalculationOptions,
        block: *mut ::std::os::raw::c_void,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , differenceFromArray : other withOptions : options usingEquivalenceTest : block)
        }
    }
    unsafe fn differenceFromArray_withOptions_(
        &self,
        other: NSArray,
        options: NSOrderedCollectionDifferenceCalculationOptions,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , differenceFromArray : other withOptions : options) }
    }
    unsafe fn differenceFromArray_(&self, other: NSArray) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , differenceFromArray : other) }
    }
    unsafe fn arrayByApplyingDifference_(
        &self,
        difference: NSOrderedCollectionDifference,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , arrayByApplyingDifference : difference) }
    }
}
impl<ObjectType: 'static> NSArray_NSDeprecated<ObjectType> for NSArray {}
pub trait NSArray_NSDeprecated<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn getObjects_(&self, objects: *mut id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getObjects : objects) }
    }
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfFile : path) }
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url) }
    }
    unsafe fn writeToFile_atomically_(&self, path: NSString, useAuxiliaryFile: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile) }
    }
    unsafe fn writeToURL_atomically_(&self, url: NSURL, atomically: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToURL : url atomically : atomically) }
    }
    unsafe fn arrayWithContentsOfFile_(path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSArray) , arrayWithContentsOfFile : path) }
    }
    unsafe fn arrayWithContentsOfURL_(url: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSArray) , arrayWithContentsOfURL : url) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableArray(pub id);
impl std::ops::Deref for NSMutableArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableArray {}
impl NSMutableArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableArray), alloc) })
    }
}
impl<ObjectType: 'static> INSArray<ObjectType> for NSMutableArray {}
impl PNSCopying for NSMutableArray {}
impl PNSMutableCopying for NSMutableArray {}
impl PNSSecureCoding for NSMutableArray {}
impl PNSFastEnumeration for NSMutableArray {}
impl INSObject for NSMutableArray {}
impl PNSObject for NSMutableArray {}
impl From<NSMutableArray> for NSObject {
    fn from(child: NSMutableArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableArray, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableArray)) };
        if is_kind_of {
            Ok(NSMutableArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableArray")
        }
    }
}
impl<ObjectType: 'static> INSMutableArray<ObjectType> for NSMutableArray {}
pub trait INSMutableArray<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn addObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addObject : anObject) }
    }
    unsafe fn insertObject_atIndex_(&self, anObject: id, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , insertObject : anObject atIndex : index) }
    }
    unsafe fn removeLastObject(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, removeLastObject) }
    }
    unsafe fn removeObjectAtIndex_(&self, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectAtIndex : index) }
    }
    unsafe fn replaceObjectAtIndex_withObject_(&self, index: NSUInteger, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , replaceObjectAtIndex : index withObject : anObject) }
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCapacity : numItems) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
}
impl<ObjectType: 'static> NSMutableArray_NSExtendedMutableArray<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSExtendedMutableArray<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addObjectsFromArray_(&self, otherArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addObjectsFromArray : otherArray) }
    }
    unsafe fn exchangeObjectAtIndex_withObjectAtIndex_(&self, idx1: NSUInteger, idx2: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , exchangeObjectAtIndex : idx1 withObjectAtIndex : idx2) }
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, removeAllObjects) }
    }
    unsafe fn removeObject_inRange_(&self, anObject: id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObject : anObject inRange : range) }
    }
    unsafe fn removeObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObject : anObject) }
    }
    unsafe fn removeObjectIdenticalTo_inRange_(&self, anObject: id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectIdenticalTo : anObject inRange : range) }
    }
    unsafe fn removeObjectIdenticalTo_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectIdenticalTo : anObject) }
    }
    unsafe fn removeObjectsFromIndices_numIndices_(&self, indices: *mut NSUInteger, cnt: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectsFromIndices : indices numIndices : cnt) }
    }
    unsafe fn removeObjectsInArray_(&self, otherArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectsInArray : otherArray) }
    }
    unsafe fn removeObjectsInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectsInRange : range) }
    }
    unsafe fn replaceObjectsInRange_withObjectsFromArray_range_(
        &self,
        range: NSRange,
        otherArray: NSArray,
        otherRange: NSRange,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , replaceObjectsInRange : range withObjectsFromArray : otherArray range : otherRange)
        }
    }
    unsafe fn replaceObjectsInRange_withObjectsFromArray_(
        &self,
        range: NSRange,
        otherArray: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , replaceObjectsInRange : range withObjectsFromArray : otherArray)
        }
    }
    unsafe fn setArray_(&self, otherArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setArray : otherArray) }
    }
    unsafe fn sortUsingFunction_context_(
        &self,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: id,
                arg2: id,
                arg3: *mut ::std::os::raw::c_void,
            ) -> NSInteger,
        >,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortUsingFunction : compare context : context) }
    }
    unsafe fn sortUsingSelector_(&self, comparator: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortUsingSelector : comparator) }
    }
    unsafe fn insertObjects_atIndexes_(&self, objects: NSArray, indexes: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , insertObjects : objects atIndexes : indexes) }
    }
    unsafe fn removeObjectsAtIndexes_(&self, indexes: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectsAtIndexes : indexes) }
    }
    unsafe fn replaceObjectsAtIndexes_withObjects_(&self, indexes: NSIndexSet, objects: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , replaceObjectsAtIndexes : indexes withObjects : objects) }
    }
    unsafe fn setObject_atIndexedSubscript_(&self, obj: id, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setObject : obj atIndexedSubscript : idx) }
    }
    unsafe fn sortUsingComparator_(&self, cmptr: NSComparator)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortUsingComparator : cmptr) }
    }
    unsafe fn sortWithOptions_usingComparator_(&self, opts: NSSortOptions, cmptr: NSComparator)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , sortWithOptions : opts usingComparator : cmptr) }
    }
}
impl<ObjectType: 'static> NSMutableArray_NSMutableArrayCreation<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSMutableArrayCreation<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfFile : path) }
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url) }
    }
    unsafe fn arrayWithCapacity_(numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableArray) , arrayWithCapacity : numItems) }
    }
    unsafe fn arrayWithContentsOfFile_(path: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableArray) , arrayWithContentsOfFile : path) }
    }
    unsafe fn arrayWithContentsOfURL_(url: NSURL) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableArray) , arrayWithContentsOfURL : url) }
    }
}
impl<ObjectType: 'static> NSMutableArray_NSMutableArrayDiffing<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSMutableArrayDiffing<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn applyDifference_(&self, difference: NSOrderedCollectionDifference)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , applyDifference : difference) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDictionary(pub id);
impl std::ops::Deref for NSDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDictionary {}
impl NSDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDictionary), alloc) })
    }
}
impl PNSCopying for NSDictionary {}
impl PNSMutableCopying for NSDictionary {}
impl PNSSecureCoding for NSDictionary {}
impl PNSFastEnumeration for NSDictionary {}
impl INSObject for NSDictionary {}
impl PNSObject for NSDictionary {}
impl From<NSDictionary> for NSObject {
    fn from(child: NSDictionary) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDictionary {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDictionary, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSDictionary)) };
        if is_kind_of {
            Ok(NSDictionary(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDictionary")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSDictionary<KeyType, ObjectType> for NSDictionary {}
pub trait INSDictionary<KeyType: 'static, ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn objectForKey_(&self, aKey: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , objectForKey : aKey) }
    }
    unsafe fn keyEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, keyEnumerator) }
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn initWithObjects_forKeys_count_(
        &self,
        objects: *const *mut u64,
        keys: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithObjects : objects forKeys : keys count : cnt) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, count) }
    }
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSExtendedDictionary<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSExtendedDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn allKeysForObject_(&self, anObject: id) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , allKeysForObject : anObject) }
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , descriptionWithLocale : locale) }
    }
    unsafe fn descriptionWithLocale_indent_(&self, locale: id, level: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , descriptionWithLocale : locale indent : level) }
    }
    unsafe fn isEqualToDictionary_(&self, otherDictionary: NSDictionary) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isEqualToDictionary : otherDictionary) }
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, objectEnumerator) }
    }
    unsafe fn objectsForKeys_notFoundMarker_(&self, keys: NSArray, marker: id) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , objectsForKeys : keys notFoundMarker : marker) }
    }
    unsafe fn writeToURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToURL : url error : error) }
    }
    unsafe fn keysSortedByValueUsingSelector_(&self, comparator: objc::runtime::Sel) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , keysSortedByValueUsingSelector : comparator) }
    }
    unsafe fn getObjects_andKeys_count_(&self, objects: *mut id, keys: *mut id, count: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getObjects : objects andKeys : keys count : count) }
    }
    unsafe fn objectForKeyedSubscript_(&self, key: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , objectForKeyedSubscript : key) }
    }
    unsafe fn enumerateKeysAndObjectsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateKeysAndObjectsUsingBlock : block) }
    }
    unsafe fn enumerateKeysAndObjectsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , enumerateKeysAndObjectsWithOptions : opts usingBlock : block)
        }
    }
    unsafe fn keysSortedByValueUsingComparator_(&self, cmptr: NSComparator) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , keysSortedByValueUsingComparator : cmptr) }
    }
    unsafe fn keysSortedByValueWithOptions_usingComparator_(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , keysSortedByValueWithOptions : opts usingComparator : cmptr) }
    }
    unsafe fn keysOfEntriesPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , keysOfEntriesPassingTest : predicate) }
    }
    unsafe fn keysOfEntriesWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , keysOfEntriesWithOptions : opts passingTest : predicate) }
    }
    unsafe fn allKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, allKeys) }
    }
    unsafe fn allValues(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, allValues) }
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, description) }
    }
    unsafe fn descriptionInStringsFileFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, descriptionInStringsFileFormat) }
    }
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSDeprecated<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSDeprecated<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn getObjects_andKeys_(&self, objects: *mut id, keys: *mut id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getObjects : objects andKeys : keys) }
    }
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfFile : path) }
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url) }
    }
    unsafe fn writeToFile_atomically_(&self, path: NSString, useAuxiliaryFile: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile) }
    }
    unsafe fn writeToURL_atomically_(&self, url: NSURL, atomically: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToURL : url atomically : atomically) }
    }
    unsafe fn dictionaryWithContentsOfFile_(path: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSDictionary) , dictionaryWithContentsOfFile : path) }
    }
    unsafe fn dictionaryWithContentsOfURL_(url: NSURL) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSDictionary) , dictionaryWithContentsOfURL : url) }
    }
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSDictionaryCreation<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSDictionaryCreation<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn initWithObjectsAndKeys_(&self, firstObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithObjectsAndKeys : firstObject) }
    }
    unsafe fn initWithDictionary_(&self, otherDictionary: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithDictionary : otherDictionary) }
    }
    unsafe fn initWithDictionary_copyItems_(
        &self,
        otherDictionary: NSDictionary,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithDictionary : otherDictionary copyItems : flag) }
    }
    unsafe fn initWithObjects_forKeys_(&self, objects: NSArray, keys: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithObjects : objects forKeys : keys) }
    }
    unsafe fn initWithContentsOfURL_error_(&self, url: NSURL, error: *mut NSError) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url error : error) }
    }
    unsafe fn dictionary() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSDictionary), dictionary) }
    }
    unsafe fn dictionaryWithObject_forKey_(object: id, key: *mut u64) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSDictionary) , dictionaryWithObject : object forKey : key) }
    }
    unsafe fn dictionaryWithObjects_forKeys_count_(
        objects: *const *mut u64,
        keys: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSDictionary) , dictionaryWithObjects : objects forKeys : keys count : cnt)
        }
    }
    unsafe fn dictionaryWithObjectsAndKeys_(firstObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSDictionary) , dictionaryWithObjectsAndKeys : firstObject) }
    }
    unsafe fn dictionaryWithDictionary_(dict: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSDictionary) , dictionaryWithDictionary : dict) }
    }
    unsafe fn dictionaryWithObjects_forKeys_(objects: NSArray, keys: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSDictionary) , dictionaryWithObjects : objects forKeys : keys)
        }
    }
    unsafe fn dictionaryWithContentsOfURL_error_(url: NSURL, error: *mut NSError) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSDictionary) , dictionaryWithContentsOfURL : url error : error)
        }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableDictionary(pub id);
impl std::ops::Deref for NSMutableDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableDictionary {}
impl NSMutableDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableDictionary), alloc) })
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSDictionary<KeyType, ObjectType>
    for NSMutableDictionary
{
}
impl PNSCopying for NSMutableDictionary {}
impl PNSMutableCopying for NSMutableDictionary {}
impl PNSSecureCoding for NSMutableDictionary {}
impl PNSFastEnumeration for NSMutableDictionary {}
impl INSObject for NSMutableDictionary {}
impl PNSObject for NSMutableDictionary {}
impl From<NSMutableDictionary> for NSObject {
    fn from(child: NSMutableDictionary) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableDictionary {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableDictionary, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableDictionary)) };
        if is_kind_of {
            Ok(NSMutableDictionary(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableDictionary")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSMutableDictionary<KeyType, ObjectType>
    for NSMutableDictionary
{
}
pub trait INSMutableDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn removeObjectForKey_(&self, aKey: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectForKey : aKey) }
    }
    unsafe fn setObject_forKey_(&self, anObject: id, aKey: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setObject : anObject forKey : aKey) }
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCapacity : numItems) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSMutableDictionary_NSExtendedMutableDictionary<KeyType, ObjectType> for NSMutableDictionary
{
}
pub trait NSMutableDictionary_NSExtendedMutableDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addEntriesFromDictionary_(&self, otherDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addEntriesFromDictionary : otherDictionary) }
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, removeAllObjects) }
    }
    unsafe fn removeObjectsForKeys_(&self, keyArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObjectsForKeys : keyArray) }
    }
    unsafe fn setDictionary_(&self, otherDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setDictionary : otherDictionary) }
    }
    unsafe fn setObject_forKeyedSubscript_(&self, obj: id, key: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setObject : obj forKeyedSubscript : key) }
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSMutableDictionary_NSMutableDictionaryCreation<KeyType, ObjectType> for NSMutableDictionary
{
}
pub trait NSMutableDictionary_NSMutableDictionaryCreation<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfFile : path) }
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url) }
    }
    unsafe fn dictionaryWithCapacity_(numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableDictionary) , dictionaryWithCapacity : numItems) }
    }
    unsafe fn dictionaryWithContentsOfFile_(path: NSString) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableDictionary) , dictionaryWithContentsOfFile : path) }
    }
    unsafe fn dictionaryWithContentsOfURL_(url: NSURL) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableDictionary) , dictionaryWithContentsOfURL : url) }
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSDictionary_NSSharedKeySetDictionary<KeyType, ObjectType> for NSDictionary
{
}
pub trait NSDictionary_NSSharedKeySetDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn sharedKeySetForKeys_(keys: NSArray) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSDictionary) , sharedKeySetForKeys : keys) }
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSMutableDictionary_NSSharedKeySetDictionary<KeyType, ObjectType> for NSMutableDictionary
{
}
pub trait NSMutableDictionary_NSSharedKeySetDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn dictionaryWithSharedKeySet_(keyset: id) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableDictionary) , dictionaryWithSharedKeySet : keyset) }
    }
}
impl<K: 'static, V: 'static> NSDictionary_NSGenericFastEnumeration<K, V> for NSDictionary {}
pub trait NSDictionary_NSGenericFastEnumeration<K: 'static, V: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn countByEnumeratingWithState_objects_count_(
        &self,
        state: *mut NSFastEnumerationState,
        buffer: *mut id,
        len: NSUInteger,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , countByEnumeratingWithState : state objects : buffer count : len)
        }
    }
}
pub const NSDecodingFailurePolicy_NSDecodingFailurePolicyRaiseException: NSDecodingFailurePolicy =
    0;
pub const NSDecodingFailurePolicy_NSDecodingFailurePolicySetErrorAndReturn:
    NSDecodingFailurePolicy = 1;
pub type NSDecodingFailurePolicy = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCoder(pub id);
impl std::ops::Deref for NSCoder {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCoder {}
impl NSCoder {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCoder), alloc) })
    }
}
impl INSObject for NSCoder {}
impl PNSObject for NSCoder {}
impl From<NSCoder> for NSObject {
    fn from(child: NSCoder) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCoder {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCoder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSCoder)) };
        if is_kind_of {
            Ok(NSCoder(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCoder")
        }
    }
}
impl INSCoder for NSCoder {}
pub trait INSCoder: Sized + std::ops::Deref {
    unsafe fn encodeValueOfObjCType_at_(
        &self,
        type_: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeValueOfObjCType : type_ at : addr) }
    }
    unsafe fn encodeDataObject_(&self, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeDataObject : data) }
    }
    unsafe fn decodeDataObject(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodeDataObject) }
    }
    unsafe fn decodeValueOfObjCType_at_size_(
        &self,
        type_: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        size: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeValueOfObjCType : type_ at : data size : size) }
    }
    unsafe fn versionForClassName_(&self, className: NSString) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , versionForClassName : className) }
    }
}
impl NSCoder_NSExtendedCoder for NSCoder {}
pub trait NSCoder_NSExtendedCoder: Sized + std::ops::Deref {
    unsafe fn encodeObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeObject : object) }
    }
    unsafe fn encodeRootObject_(&self, rootObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeRootObject : rootObject) }
    }
    unsafe fn encodeBycopyObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeBycopyObject : anObject) }
    }
    unsafe fn encodeByrefObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeByrefObject : anObject) }
    }
    unsafe fn encodeConditionalObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeConditionalObject : object) }
    }
    unsafe fn encodeValuesOfObjCTypes_(&self, types: *const ::std::os::raw::c_char)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeValuesOfObjCTypes : types) }
    }
    unsafe fn encodeArrayOfObjCType_count_at_(
        &self,
        type_: *const ::std::os::raw::c_char,
        count: NSUInteger,
        array: *const ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeArrayOfObjCType : type_ count : count at : array) }
    }
    unsafe fn encodeBytes_length_(
        &self,
        byteaddr: *const ::std::os::raw::c_void,
        length: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeBytes : byteaddr length : length) }
    }
    unsafe fn decodeObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodeObject) }
    }
    unsafe fn decodeTopLevelObjectAndReturnError_(&self, error: *mut NSError) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeTopLevelObjectAndReturnError : error) }
    }
    unsafe fn decodeValuesOfObjCTypes_(&self, types: *const ::std::os::raw::c_char)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeValuesOfObjCTypes : types) }
    }
    unsafe fn decodeArrayOfObjCType_count_at_(
        &self,
        itemType: *const ::std::os::raw::c_char,
        count: NSUInteger,
        array: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeArrayOfObjCType : itemType count : count at : array) }
    }
    unsafe fn decodeBytesWithReturnedLength_(
        &self,
        lengthp: *mut NSUInteger,
    ) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeBytesWithReturnedLength : lengthp) }
    }
    unsafe fn encodePropertyList_(&self, aPropertyList: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodePropertyList : aPropertyList) }
    }
    unsafe fn decodePropertyList(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodePropertyList) }
    }
    unsafe fn setObjectZone_(&self, zone: *mut NSZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setObjectZone : zone) }
    }
    unsafe fn objectZone(&self) -> *mut NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, objectZone) }
    }
    unsafe fn encodeObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeObject : object forKey : key) }
    }
    unsafe fn encodeConditionalObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeConditionalObject : object forKey : key) }
    }
    unsafe fn encodeBool_forKey_(&self, value: BOOL, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeBool : value forKey : key) }
    }
    unsafe fn encodeInt_forKey_(&self, value: ::std::os::raw::c_int, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeInt : value forKey : key) }
    }
    unsafe fn encodeInt32_forKey_(&self, value: i32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeInt32 : value forKey : key) }
    }
    unsafe fn encodeInt64_forKey_(&self, value: i64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeInt64 : value forKey : key) }
    }
    unsafe fn encodeFloat_forKey_(&self, value: f32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeFloat : value forKey : key) }
    }
    unsafe fn encodeDouble_forKey_(&self, value: f64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeDouble : value forKey : key) }
    }
    unsafe fn encodeBytes_length_forKey_(&self, bytes: *const u8, length: NSUInteger, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeBytes : bytes length : length forKey : key) }
    }
    unsafe fn containsValueForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , containsValueForKey : key) }
    }
    unsafe fn decodeObjectForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeObjectForKey : key) }
    }
    unsafe fn decodeTopLevelObjectForKey_error_(&self, key: NSString, error: *mut NSError) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeTopLevelObjectForKey : key error : error) }
    }
    unsafe fn decodeBoolForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeBoolForKey : key) }
    }
    unsafe fn decodeIntForKey_(&self, key: NSString) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeIntForKey : key) }
    }
    unsafe fn decodeInt32ForKey_(&self, key: NSString) -> i32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeInt32ForKey : key) }
    }
    unsafe fn decodeInt64ForKey_(&self, key: NSString) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeInt64ForKey : key) }
    }
    unsafe fn decodeFloatForKey_(&self, key: NSString) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeFloatForKey : key) }
    }
    unsafe fn decodeDoubleForKey_(&self, key: NSString) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeDoubleForKey : key) }
    }
    unsafe fn decodeBytesForKey_returnedLength_(
        &self,
        key: NSString,
        lengthp: *mut NSUInteger,
    ) -> *const u8
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeBytesForKey : key returnedLength : lengthp) }
    }
    unsafe fn encodeInteger_forKey_(&self, value: NSInteger, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeInteger : value forKey : key) }
    }
    unsafe fn decodeIntegerForKey_(&self, key: NSString) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeIntegerForKey : key) }
    }
    unsafe fn decodeObjectOfClass_forKey_(&self, aClass: Class, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeObjectOfClass : aClass forKey : key) }
    }
    unsafe fn decodeTopLevelObjectOfClass_forKey_error_(
        &self,
        aClass: Class,
        key: NSString,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , decodeTopLevelObjectOfClass : aClass forKey : key error : error)
        }
    }
    unsafe fn decodeArrayOfObjectsOfClass_forKey_(&self, cls: Class, key: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeArrayOfObjectsOfClass : cls forKey : key) }
    }
    unsafe fn decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_(
        &self,
        keyCls: Class,
        objectCls: Class,
        key: NSString,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , decodeDictionaryWithKeysOfClass : keyCls objectsOfClass : objectCls forKey : key)
        }
    }
    unsafe fn decodeObjectOfClasses_forKey_(&self, classes: NSSet, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeObjectOfClasses : classes forKey : key) }
    }
    unsafe fn decodeTopLevelObjectOfClasses_forKey_error_(
        &self,
        classes: NSSet,
        key: NSString,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , decodeTopLevelObjectOfClasses : classes forKey : key error : error)
        }
    }
    unsafe fn decodeArrayOfObjectsOfClasses_forKey_(&self, classes: NSSet, key: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeArrayOfObjectsOfClasses : classes forKey : key) }
    }
    unsafe fn decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(
        &self,
        keyClasses: NSSet,
        objectClasses: NSSet,
        key: NSString,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , decodeDictionaryWithKeysOfClasses : keyClasses objectsOfClasses : objectClasses forKey : key)
        }
    }
    unsafe fn decodePropertyListForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodePropertyListForKey : key) }
    }
    unsafe fn failWithError_(&self, error: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , failWithError : error) }
    }
    unsafe fn systemVersion(&self) -> ::std::os::raw::c_uint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, systemVersion) }
    }
    unsafe fn allowsKeyedCoding(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, allowsKeyedCoding) }
    }
    unsafe fn requiresSecureCoding(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, requiresSecureCoding) }
    }
    unsafe fn allowedClasses(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, allowedClasses) }
    }
    unsafe fn decodingFailurePolicy(&self) -> NSDecodingFailurePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodingFailurePolicy) }
    }
    unsafe fn error(&self) -> NSError
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, error) }
    }
}
unsafe extern "C" {
    pub fn NXReadNSObjectFromCoder(decoder: NSCoder) -> NSObject;
}
impl NSCoder_NSTypedstreamCompatibility for NSCoder {}
pub trait NSCoder_NSTypedstreamCompatibility: Sized + std::ops::Deref {
    unsafe fn encodeNXObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeNXObject : object) }
    }
    unsafe fn decodeNXObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodeNXObject) }
    }
}
impl NSCoder_NSDeprecated for NSCoder {}
pub trait NSCoder_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn decodeValueOfObjCType_at_(
        &self,
        type_: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeValueOfObjCType : type_ at : data) }
    }
}
unsafe extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneEntry"][::std::mem::size_of::<_RuneEntry>() - 24usize];
    ["Alignment of _RuneEntry"][::std::mem::align_of::<_RuneEntry>() - 8usize];
    ["Offset of field: _RuneEntry::__min"][::std::mem::offset_of!(_RuneEntry, __min) - 0usize];
    ["Offset of field: _RuneEntry::__max"][::std::mem::offset_of!(_RuneEntry, __max) - 4usize];
    ["Offset of field: _RuneEntry::__map"][::std::mem::offset_of!(_RuneEntry, __map) - 8usize];
    ["Offset of field: _RuneEntry::__types"][::std::mem::offset_of!(_RuneEntry, __types) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneRange"][::std::mem::size_of::<_RuneRange>() - 16usize];
    ["Alignment of _RuneRange"][::std::mem::align_of::<_RuneRange>() - 8usize];
    ["Offset of field: _RuneRange::__nranges"]
        [::std::mem::offset_of!(_RuneRange, __nranges) - 0usize];
    ["Offset of field: _RuneRange::__ranges"]
        [::std::mem::offset_of!(_RuneRange, __ranges) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneCharClass"][::std::mem::size_of::<_RuneCharClass>() - 20usize];
    ["Alignment of _RuneCharClass"][::std::mem::align_of::<_RuneCharClass>() - 4usize];
    ["Offset of field: _RuneCharClass::__name"]
        [::std::mem::offset_of!(_RuneCharClass, __name) - 0usize];
    ["Offset of field: _RuneCharClass::__mask"]
        [::std::mem::offset_of!(_RuneCharClass, __mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneLocale"][::std::mem::size_of::<_RuneLocale>() - 3208usize];
    ["Alignment of _RuneLocale"][::std::mem::align_of::<_RuneLocale>() - 8usize];
    ["Offset of field: _RuneLocale::__magic"]
        [::std::mem::offset_of!(_RuneLocale, __magic) - 0usize];
    ["Offset of field: _RuneLocale::__encoding"]
        [::std::mem::offset_of!(_RuneLocale, __encoding) - 8usize];
    ["Offset of field: _RuneLocale::__sgetrune"]
        [::std::mem::offset_of!(_RuneLocale, __sgetrune) - 40usize];
    ["Offset of field: _RuneLocale::__sputrune"]
        [::std::mem::offset_of!(_RuneLocale, __sputrune) - 48usize];
    ["Offset of field: _RuneLocale::__invalid_rune"]
        [::std::mem::offset_of!(_RuneLocale, __invalid_rune) - 56usize];
    ["Offset of field: _RuneLocale::__runetype"]
        [::std::mem::offset_of!(_RuneLocale, __runetype) - 60usize];
    ["Offset of field: _RuneLocale::__maplower"]
        [::std::mem::offset_of!(_RuneLocale, __maplower) - 1084usize];
    ["Offset of field: _RuneLocale::__mapupper"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper) - 2108usize];
    ["Offset of field: _RuneLocale::__runetype_ext"]
        [::std::mem::offset_of!(_RuneLocale, __runetype_ext) - 3136usize];
    ["Offset of field: _RuneLocale::__maplower_ext"]
        [::std::mem::offset_of!(_RuneLocale, __maplower_ext) - 3152usize];
    ["Offset of field: _RuneLocale::__mapupper_ext"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper_ext) - 3168usize];
    ["Offset of field: _RuneLocale::__variable"]
        [::std::mem::offset_of!(_RuneLocale, __variable) - 3184usize];
    ["Offset of field: _RuneLocale::__variable_len"]
        [::std::mem::offset_of!(_RuneLocale, __variable_len) - 3192usize];
    ["Offset of field: _RuneLocale::__ncharclasses"]
        [::std::mem::offset_of!(_RuneLocale, __ncharclasses) - 3196usize];
    ["Offset of field: _RuneLocale::__charclasses"]
        [::std::mem::offset_of!(_RuneLocale, __charclasses) - 3200usize];
};
unsafe extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
unsafe extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
unsafe extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
unsafe extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
unsafe extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
unsafe extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
unsafe extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lconv"][::std::mem::size_of::<lconv>() - 96usize];
    ["Alignment of lconv"][::std::mem::align_of::<lconv>() - 8usize];
    ["Offset of field: lconv::decimal_point"]
        [::std::mem::offset_of!(lconv, decimal_point) - 0usize];
    ["Offset of field: lconv::thousands_sep"]
        [::std::mem::offset_of!(lconv, thousands_sep) - 8usize];
    ["Offset of field: lconv::grouping"][::std::mem::offset_of!(lconv, grouping) - 16usize];
    ["Offset of field: lconv::int_curr_symbol"]
        [::std::mem::offset_of!(lconv, int_curr_symbol) - 24usize];
    ["Offset of field: lconv::currency_symbol"]
        [::std::mem::offset_of!(lconv, currency_symbol) - 32usize];
    ["Offset of field: lconv::mon_decimal_point"]
        [::std::mem::offset_of!(lconv, mon_decimal_point) - 40usize];
    ["Offset of field: lconv::mon_thousands_sep"]
        [::std::mem::offset_of!(lconv, mon_thousands_sep) - 48usize];
    ["Offset of field: lconv::mon_grouping"][::std::mem::offset_of!(lconv, mon_grouping) - 56usize];
    ["Offset of field: lconv::positive_sign"]
        [::std::mem::offset_of!(lconv, positive_sign) - 64usize];
    ["Offset of field: lconv::negative_sign"]
        [::std::mem::offset_of!(lconv, negative_sign) - 72usize];
    ["Offset of field: lconv::int_frac_digits"]
        [::std::mem::offset_of!(lconv, int_frac_digits) - 80usize];
    ["Offset of field: lconv::frac_digits"][::std::mem::offset_of!(lconv, frac_digits) - 81usize];
    ["Offset of field: lconv::p_cs_precedes"]
        [::std::mem::offset_of!(lconv, p_cs_precedes) - 82usize];
    ["Offset of field: lconv::p_sep_by_space"]
        [::std::mem::offset_of!(lconv, p_sep_by_space) - 83usize];
    ["Offset of field: lconv::n_cs_precedes"]
        [::std::mem::offset_of!(lconv, n_cs_precedes) - 84usize];
    ["Offset of field: lconv::n_sep_by_space"]
        [::std::mem::offset_of!(lconv, n_sep_by_space) - 85usize];
    ["Offset of field: lconv::p_sign_posn"][::std::mem::offset_of!(lconv, p_sign_posn) - 86usize];
    ["Offset of field: lconv::n_sign_posn"][::std::mem::offset_of!(lconv, n_sign_posn) - 87usize];
    ["Offset of field: lconv::int_p_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_p_cs_precedes) - 88usize];
    ["Offset of field: lconv::int_n_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_n_cs_precedes) - 89usize];
    ["Offset of field: lconv::int_p_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_p_sep_by_space) - 90usize];
    ["Offset of field: lconv::int_n_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_n_sep_by_space) - 91usize];
    ["Offset of field: lconv::int_p_sign_posn"]
        [::std::mem::offset_of!(lconv, int_p_sign_posn) - 92usize];
    ["Offset of field: lconv::int_n_sign_posn"]
        [::std::mem::offset_of!(lconv, int_n_sign_posn) - 93usize];
};
unsafe extern "C" {
    pub fn localeconv() -> *mut lconv;
}
unsafe extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
unsafe extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn round(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
unsafe extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __float2"][::std::mem::size_of::<__float2>() - 8usize];
    ["Alignment of __float2"][::std::mem::align_of::<__float2>() - 4usize];
    ["Offset of field: __float2::__sinval"][::std::mem::offset_of!(__float2, __sinval) - 0usize];
    ["Offset of field: __float2::__cosval"][::std::mem::offset_of!(__float2, __cosval) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __double2"][::std::mem::size_of::<__double2>() - 16usize];
    ["Alignment of __double2"][::std::mem::align_of::<__double2>() - 8usize];
    ["Offset of field: __double2::__sinval"][::std::mem::offset_of!(__double2, __sinval) - 0usize];
    ["Offset of field: __double2::__cosval"][::std::mem::offset_of!(__double2, __cosval) - 8usize];
};
unsafe extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
unsafe extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
unsafe extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
unsafe extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
unsafe extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of exception"][::std::mem::size_of::<exception>() - 40usize];
    ["Alignment of exception"][::std::mem::align_of::<exception>() - 8usize];
    ["Offset of field: exception::type_"][::std::mem::offset_of!(exception, type_) - 0usize];
    ["Offset of field: exception::name"][::std::mem::offset_of!(exception, name) - 8usize];
    ["Offset of field: exception::arg1"][::std::mem::offset_of!(exception, arg1) - 16usize];
    ["Offset of field: exception::arg2"][::std::mem::offset_of!(exception, arg2) - 24usize];
    ["Offset of field: exception::retval"][::std::mem::offset_of!(exception, retval) - 32usize];
};
pub type jmp_buf = [::std::os::raw::c_int; 48usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 49usize];
unsafe extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn longjmperror();
}
unsafe extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
unsafe extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
unsafe extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
unsafe extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
unsafe extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
unsafe extern "C" {
    pub static mut __stdinp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stderrp: *mut FILE;
}
unsafe extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
unsafe extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
unsafe extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
unsafe extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
unsafe extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
unsafe extern "C" {
    pub fn tzsetwall();
}
unsafe extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type CFArrayRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFArrayReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFArrayCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFArrayEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFArrayCallBacks"][::std::mem::size_of::<CFArrayCallBacks>() - 40usize];
    ["Alignment of CFArrayCallBacks"][::std::mem::align_of::<CFArrayCallBacks>() - 8usize];
    ["Offset of field: CFArrayCallBacks::version"]
        [::std::mem::offset_of!(CFArrayCallBacks, version) - 0usize];
    ["Offset of field: CFArrayCallBacks::retain"]
        [::std::mem::offset_of!(CFArrayCallBacks, retain) - 8usize];
    ["Offset of field: CFArrayCallBacks::release"]
        [::std::mem::offset_of!(CFArrayCallBacks, release) - 16usize];
    ["Offset of field: CFArrayCallBacks::copyDescription"]
        [::std::mem::offset_of!(CFArrayCallBacks, copyDescription) - 24usize];
    ["Offset of field: CFArrayCallBacks::equal"]
        [::std::mem::offset_of!(CFArrayCallBacks, equal) - 32usize];
};
unsafe extern "C" {
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}
pub type CFArrayApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
pub type CFMutableArrayRef = *mut __CFArray;
unsafe extern "C" {
    pub fn CFArrayGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}
unsafe extern "C" {
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theArray: CFArrayRef,
    ) -> CFMutableArrayRef;
}
unsafe extern "C" {
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFArrayGetCountOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFArrayContainsValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFArrayGetValueAtIndex(
        theArray: CFArrayRef,
        idx: CFIndex,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFArrayGetValues(
        theArray: CFArrayRef,
        range: CFRange,
        values: *mut *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFArrayApplyFunction(
        theArray: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFArrayGetFirstIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFArrayGetLastIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFArrayBSearchValues(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFArrayInsertValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFArraySetValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex);
}
unsafe extern "C" {
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
}
unsafe extern "C" {
    pub fn CFArrayReplaceValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        newValues: *mut *const ::std::os::raw::c_void,
        newCount: CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFArrayExchangeValuesAtIndices(
        theArray: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFArraySortValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFArrayAppendArray(
        theArray: CFMutableArrayRef,
        otherArray: CFArrayRef,
        otherRange: CFRange,
    );
}
pub type CFBagRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFBagReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFBagCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFBagEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFBagHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBagCallBacks {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFBagCallBacks"][::std::mem::size_of::<CFBagCallBacks>() - 48usize];
    ["Alignment of CFBagCallBacks"][::std::mem::align_of::<CFBagCallBacks>() - 8usize];
    ["Offset of field: CFBagCallBacks::version"]
        [::std::mem::offset_of!(CFBagCallBacks, version) - 0usize];
    ["Offset of field: CFBagCallBacks::retain"]
        [::std::mem::offset_of!(CFBagCallBacks, retain) - 8usize];
    ["Offset of field: CFBagCallBacks::release"]
        [::std::mem::offset_of!(CFBagCallBacks, release) - 16usize];
    ["Offset of field: CFBagCallBacks::copyDescription"]
        [::std::mem::offset_of!(CFBagCallBacks, copyDescription) - 24usize];
    ["Offset of field: CFBagCallBacks::equal"]
        [::std::mem::offset_of!(CFBagCallBacks, equal) - 32usize];
    ["Offset of field: CFBagCallBacks::hash"]
        [::std::mem::offset_of!(CFBagCallBacks, hash) - 40usize];
};
unsafe extern "C" {
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
}
unsafe extern "C" {
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
}
pub type CFBagApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBag {
    _unused: [u8; 0],
}
pub type CFBagRef = *const __CFBag;
pub type CFMutableBagRef = *mut __CFBag;
unsafe extern "C" {
    pub fn CFBagGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFBagRef;
}
unsafe extern "C" {
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) -> CFBagRef;
}
unsafe extern "C" {
    pub fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFMutableBagRef;
}
unsafe extern "C" {
    pub fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theBag: CFBagRef,
    ) -> CFMutableBagRef;
}
unsafe extern "C" {
    pub fn CFBagGetCount(theBag: CFBagRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBagGetCountOfValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBagContainsValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBagGetValue(
        theBag: CFBagRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFBagGetValueIfPresent(
        theBag: CFBagRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBagGetValues(theBag: CFBagRef, values: *mut *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFBagApplyFunction(
        theBag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFBagAddValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFBagReplaceValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFBagSetValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFBagRemoveValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFBagRemoveAllValues(theBag: CFMutableBagRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCompareContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFBinaryHeapCompareContext"]
        [::std::mem::size_of::<CFBinaryHeapCompareContext>() - 40usize];
    ["Alignment of CFBinaryHeapCompareContext"]
        [::std::mem::align_of::<CFBinaryHeapCompareContext>() - 8usize];
    ["Offset of field: CFBinaryHeapCompareContext::version"]
        [::std::mem::offset_of!(CFBinaryHeapCompareContext, version) - 0usize];
    ["Offset of field: CFBinaryHeapCompareContext::info"]
        [::std::mem::offset_of!(CFBinaryHeapCompareContext, info) - 8usize];
    ["Offset of field: CFBinaryHeapCompareContext::retain"]
        [::std::mem::offset_of!(CFBinaryHeapCompareContext, retain) - 16usize];
    ["Offset of field: CFBinaryHeapCompareContext::release"]
        [::std::mem::offset_of!(CFBinaryHeapCompareContext, release) - 24usize];
    ["Offset of field: CFBinaryHeapCompareContext::copyDescription"]
        [::std::mem::offset_of!(CFBinaryHeapCompareContext, copyDescription) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCallBacks {
    pub version: CFIndex,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: CFAllocatorRef,
            ptr: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(allocator: CFAllocatorRef, ptr: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            ptr1: *const ::std::os::raw::c_void,
            ptr2: *const ::std::os::raw::c_void,
            context: *mut ::std::os::raw::c_void,
        ) -> CFComparisonResult,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFBinaryHeapCallBacks"][::std::mem::size_of::<CFBinaryHeapCallBacks>() - 40usize];
    ["Alignment of CFBinaryHeapCallBacks"]
        [::std::mem::align_of::<CFBinaryHeapCallBacks>() - 8usize];
    ["Offset of field: CFBinaryHeapCallBacks::version"]
        [::std::mem::offset_of!(CFBinaryHeapCallBacks, version) - 0usize];
    ["Offset of field: CFBinaryHeapCallBacks::retain"]
        [::std::mem::offset_of!(CFBinaryHeapCallBacks, retain) - 8usize];
    ["Offset of field: CFBinaryHeapCallBacks::release"]
        [::std::mem::offset_of!(CFBinaryHeapCallBacks, release) - 16usize];
    ["Offset of field: CFBinaryHeapCallBacks::copyDescription"]
        [::std::mem::offset_of!(CFBinaryHeapCallBacks, copyDescription) - 24usize];
    ["Offset of field: CFBinaryHeapCallBacks::compare"]
        [::std::mem::offset_of!(CFBinaryHeapCallBacks, compare) - 32usize];
};
unsafe extern "C" {
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
}
pub type CFBinaryHeapApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(val: *const ::std::os::raw::c_void, context: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBinaryHeap {
    _unused: [u8; 0],
}
pub type CFBinaryHeapRef = *mut __CFBinaryHeap;
unsafe extern "C" {
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBinaryHeapCallBacks,
        compareContext: *const CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
}
unsafe extern "C" {
    pub fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
}
unsafe extern "C" {
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBinaryHeapGetCountOfValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBinaryHeapContainsValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
}
unsafe extern "C" {
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
}
pub type CFBit = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBitVector {
    _unused: [u8; 0],
}
pub type CFBitVectorRef = *const __CFBitVector;
pub type CFMutableBitVectorRef = *mut __CFBitVector;
unsafe extern "C" {
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFBitVectorCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        numBits: CFIndex,
    ) -> CFBitVectorRef;
}
unsafe extern "C" {
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) -> CFBitVectorRef;
}
unsafe extern "C" {
    pub fn CFBitVectorCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableBitVectorRef;
}
unsafe extern "C" {
    pub fn CFBitVectorCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        bv: CFBitVectorRef,
    ) -> CFMutableBitVectorRef;
}
unsafe extern "C" {
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) -> CFBit;
}
unsafe extern "C" {
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: *mut UInt8);
}
unsafe extern "C" {
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex);
}
unsafe extern "C" {
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex);
}
unsafe extern "C" {
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange);
}
unsafe extern "C" {
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit);
}
unsafe extern "C" {
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit);
}
unsafe extern "C" {
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit);
}
pub const OSUnknownByteOrder: _bindgen_ty_8 = 0;
pub const OSLittleEndian: _bindgen_ty_8 = 1;
pub const OSBigEndian: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const __CFByteOrder_CFByteOrderUnknown: __CFByteOrder = 0;
pub const __CFByteOrder_CFByteOrderLittleEndian: __CFByteOrder = 1;
pub const __CFByteOrder_CFByteOrderBigEndian: __CFByteOrder = 2;
pub type __CFByteOrder = ::std::os::raw::c_uint;
pub type CFByteOrder = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat32 {
    pub v: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFSwappedFloat32"][::std::mem::size_of::<CFSwappedFloat32>() - 4usize];
    ["Alignment of CFSwappedFloat32"][::std::mem::align_of::<CFSwappedFloat32>() - 4usize];
    ["Offset of field: CFSwappedFloat32::v"][::std::mem::offset_of!(CFSwappedFloat32, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat64 {
    pub v: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFSwappedFloat64"][::std::mem::size_of::<CFSwappedFloat64>() - 8usize];
    ["Alignment of CFSwappedFloat64"][::std::mem::align_of::<CFSwappedFloat64>() - 8usize];
    ["Offset of field: CFSwappedFloat64::v"][::std::mem::offset_of!(CFSwappedFloat64, v) - 0usize];
};
pub type CFDictionaryRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFDictionaryReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFDictionaryCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFDictionaryEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFDictionaryKeyCallBacks"]
        [::std::mem::size_of::<CFDictionaryKeyCallBacks>() - 48usize];
    ["Alignment of CFDictionaryKeyCallBacks"]
        [::std::mem::align_of::<CFDictionaryKeyCallBacks>() - 8usize];
    ["Offset of field: CFDictionaryKeyCallBacks::version"]
        [::std::mem::offset_of!(CFDictionaryKeyCallBacks, version) - 0usize];
    ["Offset of field: CFDictionaryKeyCallBacks::retain"]
        [::std::mem::offset_of!(CFDictionaryKeyCallBacks, retain) - 8usize];
    ["Offset of field: CFDictionaryKeyCallBacks::release"]
        [::std::mem::offset_of!(CFDictionaryKeyCallBacks, release) - 16usize];
    ["Offset of field: CFDictionaryKeyCallBacks::copyDescription"]
        [::std::mem::offset_of!(CFDictionaryKeyCallBacks, copyDescription) - 24usize];
    ["Offset of field: CFDictionaryKeyCallBacks::equal"]
        [::std::mem::offset_of!(CFDictionaryKeyCallBacks, equal) - 32usize];
    ["Offset of field: CFDictionaryKeyCallBacks::hash"]
        [::std::mem::offset_of!(CFDictionaryKeyCallBacks, hash) - 40usize];
};
unsafe extern "C" {
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
unsafe extern "C" {
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFDictionaryValueCallBacks"]
        [::std::mem::size_of::<CFDictionaryValueCallBacks>() - 40usize];
    ["Alignment of CFDictionaryValueCallBacks"]
        [::std::mem::align_of::<CFDictionaryValueCallBacks>() - 8usize];
    ["Offset of field: CFDictionaryValueCallBacks::version"]
        [::std::mem::offset_of!(CFDictionaryValueCallBacks, version) - 0usize];
    ["Offset of field: CFDictionaryValueCallBacks::retain"]
        [::std::mem::offset_of!(CFDictionaryValueCallBacks, retain) - 8usize];
    ["Offset of field: CFDictionaryValueCallBacks::release"]
        [::std::mem::offset_of!(CFDictionaryValueCallBacks, release) - 16usize];
    ["Offset of field: CFDictionaryValueCallBacks::copyDescription"]
        [::std::mem::offset_of!(CFDictionaryValueCallBacks, copyDescription) - 24usize];
    ["Offset of field: CFDictionaryValueCallBacks::equal"]
        [::std::mem::offset_of!(CFDictionaryValueCallBacks, equal) - 32usize];
};
unsafe extern "C" {
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}
pub type CFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFMutableDictionaryRef = *mut __CFDictionary;
unsafe extern "C" {
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        theDict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}
unsafe extern "C" {
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theDict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}
unsafe extern "C" {
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFDictionaryGetCountOfKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFDictionaryGetCountOfValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFDictionaryContainsKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFDictionaryContainsValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFDictionaryGetValue(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFDictionaryGetValueIfPresent(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFDictionaryGetKeysAndValues(
        theDict: CFDictionaryRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFDictionaryApplyFunction(
        theDict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFDictionaryAddValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFDictionarySetValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFDictionaryReplaceValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFDictionaryRemoveValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
}
pub type CFNotificationName = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNotificationCenter {
    _unused: [u8; 0],
}
pub type CFNotificationCenterRef = *mut __CFNotificationCenter;
pub type CFNotificationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        center: CFNotificationCenterRef,
        observer: *mut ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
    ),
>;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDrop:
    CFNotificationSuspensionBehavior = 1;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorCoalesce:
    CFNotificationSuspensionBehavior = 2;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorHold:
    CFNotificationSuspensionBehavior = 3;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDeliverImmediately:
    CFNotificationSuspensionBehavior = 4;
pub type CFNotificationSuspensionBehavior = CFIndex;
unsafe extern "C" {
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
}
unsafe extern "C" {
    pub fn CFNotificationCenterGetDistributedCenter() -> CFNotificationCenterRef;
}
unsafe extern "C" {
    pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
}
unsafe extern "C" {
    pub fn CFNotificationCenterAddObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        callBack: CFNotificationCallback,
        name: CFStringRef,
        object: *const ::std::os::raw::c_void,
        suspensionBehavior: CFNotificationSuspensionBehavior,
    );
}
unsafe extern "C" {
    pub fn CFNotificationCenterRemoveObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFNotificationCenterPostNotification(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        deliverImmediately: Boolean,
    );
}
pub const kCFNotificationDeliverImmediately: _bindgen_ty_9 = 1;
pub const kCFNotificationPostToAllSessions: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = CFOptionFlags;
unsafe extern "C" {
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        options: CFOptionFlags,
    );
}
pub type CFLocaleIdentifier = CFStringRef;
pub type CFLocaleKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFLocale {
    _unused: [u8; 0],
}
pub type CFLocaleRef = *const __CFLocale;
unsafe extern "C" {
    pub fn CFLocaleGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
unsafe extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
unsafe extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
}
unsafe extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
}
unsafe extern "C" {
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        localeIdentifier: CFLocaleIdentifier,
    ) -> u32;
}
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionUnknown: CFLocaleLanguageDirection =
    0;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionLeftToRight:
    CFLocaleLanguageDirection = 1;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionRightToLeft:
    CFLocaleLanguageDirection = 2;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionTopToBottom:
    CFLocaleLanguageDirection = 3;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionBottomToTop:
    CFLocaleLanguageDirection = 4;
pub type CFLocaleLanguageDirection = CFIndex;
unsafe extern "C" {
    pub fn CFLocaleGetLanguageCharacterDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
unsafe extern "C" {
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) -> CFLocaleLanguageDirection;
}
unsafe extern "C" {
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        localeID: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
}
unsafe extern "C" {
    pub fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        localeIdentifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
}
unsafe extern "C" {
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) -> CFLocaleRef;
}
unsafe extern "C" {
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
}
unsafe extern "C" {
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFLocaleCopyDisplayNameForPropertyValue(
        displayLocale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
}
unsafe extern "C" {
    pub static kCFLocaleIdentifier: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleLanguageCode: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleCountryCode: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleScriptCode: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleVariantCode: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleExemplarCharacterSet: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleCalendarIdentifier: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleCalendar: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleCollationIdentifier: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleUsesMetricSystem: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleMeasurementSystem: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleDecimalSeparator: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleGroupingSeparator: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleCurrencySymbol: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleCurrencyCode: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleCollatorIdentifier: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
}
unsafe extern "C" {
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
}
pub type CFCalendarIdentifier = CFStringRef;
unsafe extern "C" {
    pub static kCFGregorianCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFBuddhistCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFChineseCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFHebrewCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFIslamicCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFIslamicCivilCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFJapaneseCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFPersianCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFIndianCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFISO8601Calendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
unsafe extern "C" {
    pub static kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
}
pub type CFTimeInterval = f64;
pub type CFAbsoluteTime = CFTimeInterval;
unsafe extern "C" {
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
}
unsafe extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
}
unsafe extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDate {
    _unused: [u8; 0],
}
pub type CFDateRef = *const __CFDate;
unsafe extern "C" {
    pub fn CFDateGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) -> CFDateRef;
}
unsafe extern "C" {
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
}
unsafe extern "C" {
    pub fn CFDateGetTimeIntervalSinceDate(
        theDate: CFDateRef,
        otherDate: CFDateRef,
    ) -> CFTimeInterval;
}
unsafe extern "C" {
    pub fn CFDateCompare(
        theDate: CFDateRef,
        otherDate: CFDateRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianDate {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFGregorianDate"][::std::mem::size_of::<CFGregorianDate>() - 16usize];
    ["Alignment of CFGregorianDate"][::std::mem::align_of::<CFGregorianDate>() - 8usize];
    ["Offset of field: CFGregorianDate::year"]
        [::std::mem::offset_of!(CFGregorianDate, year) - 0usize];
    ["Offset of field: CFGregorianDate::month"]
        [::std::mem::offset_of!(CFGregorianDate, month) - 4usize];
    ["Offset of field: CFGregorianDate::day"]
        [::std::mem::offset_of!(CFGregorianDate, day) - 5usize];
    ["Offset of field: CFGregorianDate::hour"]
        [::std::mem::offset_of!(CFGregorianDate, hour) - 6usize];
    ["Offset of field: CFGregorianDate::minute"]
        [::std::mem::offset_of!(CFGregorianDate, minute) - 7usize];
    ["Offset of field: CFGregorianDate::second"]
        [::std::mem::offset_of!(CFGregorianDate, second) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianUnits {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFGregorianUnits"][::std::mem::size_of::<CFGregorianUnits>() - 32usize];
    ["Alignment of CFGregorianUnits"][::std::mem::align_of::<CFGregorianUnits>() - 8usize];
    ["Offset of field: CFGregorianUnits::years"]
        [::std::mem::offset_of!(CFGregorianUnits, years) - 0usize];
    ["Offset of field: CFGregorianUnits::months"]
        [::std::mem::offset_of!(CFGregorianUnits, months) - 4usize];
    ["Offset of field: CFGregorianUnits::days"]
        [::std::mem::offset_of!(CFGregorianUnits, days) - 8usize];
    ["Offset of field: CFGregorianUnits::hours"]
        [::std::mem::offset_of!(CFGregorianUnits, hours) - 12usize];
    ["Offset of field: CFGregorianUnits::minutes"]
        [::std::mem::offset_of!(CFGregorianUnits, minutes) - 16usize];
    ["Offset of field: CFGregorianUnits::seconds"]
        [::std::mem::offset_of!(CFGregorianUnits, seconds) - 24usize];
};
pub const CFGregorianUnitFlags_kCFGregorianUnitsYears: CFGregorianUnitFlags = 1;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMonths: CFGregorianUnitFlags = 2;
pub const CFGregorianUnitFlags_kCFGregorianUnitsDays: CFGregorianUnitFlags = 4;
pub const CFGregorianUnitFlags_kCFGregorianUnitsHours: CFGregorianUnitFlags = 8;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMinutes: CFGregorianUnitFlags = 16;
pub const CFGregorianUnitFlags_kCFGregorianUnitsSeconds: CFGregorianUnitFlags = 32;
pub const CFGregorianUnitFlags_kCFGregorianAllUnits: CFGregorianUnitFlags = 16777215;
pub type CFGregorianUnitFlags = CFOptionFlags;
unsafe extern "C" {
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) -> Boolean;
}
unsafe extern "C" {
    pub fn CFGregorianDateGetAbsoluteTime(
        gdate: CFGregorianDate,
        tz: CFTimeZoneRef,
    ) -> CFAbsoluteTime;
}
unsafe extern "C" {
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef)
        -> CFGregorianDate;
}
unsafe extern "C" {
    pub fn CFAbsoluteTimeAddGregorianUnits(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        units: CFGregorianUnits,
    ) -> CFAbsoluteTime;
}
unsafe extern "C" {
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(
        at1: CFAbsoluteTime,
        at2: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        unitFlags: CFOptionFlags,
    ) -> CFGregorianUnits;
}
unsafe extern "C" {
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
unsafe extern "C" {
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
unsafe extern "C" {
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFData {
    _unused: [u8; 0],
}
pub type CFDataRef = *const __CFData;
pub type CFMutableDataRef = *mut __CFData;
unsafe extern "C" {
    pub fn CFDataGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) -> CFMutableDataRef;
}
unsafe extern "C" {
    pub fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theData: CFDataRef,
    ) -> CFMutableDataRef;
}
unsafe extern "C" {
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
}
unsafe extern "C" {
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
}
unsafe extern "C" {
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: *mut UInt8);
}
unsafe extern "C" {
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
}
unsafe extern "C" {
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex);
}
unsafe extern "C" {
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8, length: CFIndex);
}
unsafe extern "C" {
    pub fn CFDataReplaceBytes(
        theData: CFMutableDataRef,
        range: CFRange,
        newBytes: *const UInt8,
        newLength: CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
}
pub const CFDataSearchFlags_kCFDataSearchBackwards: CFDataSearchFlags = 1;
pub const CFDataSearchFlags_kCFDataSearchAnchored: CFDataSearchFlags = 2;
pub type CFDataSearchFlags = CFOptionFlags;
unsafe extern "C" {
    pub fn CFDataFind(
        theData: CFDataRef,
        dataToFind: CFDataRef,
        searchRange: CFRange,
        compareOptions: CFDataSearchFlags,
    ) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCharacterSet {
    _unused: [u8; 0],
}
pub type CFCharacterSetRef = *const __CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut __CFCharacterSet;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetControl: CFCharacterSetPredefinedSet = 1;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespace: CFCharacterSetPredefinedSet = 2;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespaceAndNewline:
    CFCharacterSetPredefinedSet = 3;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecimalDigit: CFCharacterSetPredefinedSet = 4;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLetter: CFCharacterSetPredefinedSet = 5;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLowercaseLetter: CFCharacterSetPredefinedSet =
    6;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetUppercaseLetter: CFCharacterSetPredefinedSet =
    7;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNonBase: CFCharacterSetPredefinedSet = 8;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecomposable: CFCharacterSetPredefinedSet = 9;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetAlphaNumeric: CFCharacterSetPredefinedSet = 10;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetPunctuation: CFCharacterSetPredefinedSet = 11;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetCapitalizedLetter:
    CFCharacterSetPredefinedSet = 13;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetSymbol: CFCharacterSetPredefinedSet = 14;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNewline: CFCharacterSetPredefinedSet = 15;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetIllegal: CFCharacterSetPredefinedSet = 12;
pub type CFCharacterSetPredefinedSet = CFIndex;
unsafe extern "C" {
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFCharacterSetGetPredefined(
        theSetIdentifier: CFCharacterSetPredefinedSet,
    ) -> CFCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInRange(
        alloc: CFAllocatorRef,
        theRange: CFRange,
    ) -> CFCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInString(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateWithBitmapRepresentation(
        alloc: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateInvertedSet(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetIsSupersetOfSet(
        theSet: CFCharacterSetRef,
        theOtherset: CFCharacterSetRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) -> Boolean;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) -> CFMutableCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateMutableCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFMutableCharacterSetRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) -> Boolean;
}
unsafe extern "C" {
    pub fn CFCharacterSetIsLongCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UTF32Char,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFCharacterSetCreateBitmapRepresentation(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange);
}
unsafe extern "C" {
    pub fn CFCharacterSetRemoveCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
unsafe extern "C" {
    pub fn CFCharacterSetAddCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFCharacterSetRemoveCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef);
}
unsafe extern "C" {
    pub fn CFCharacterSetIntersect(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
unsafe extern "C" {
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
}
pub type CFErrorDomain = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFError {
    _unused: [u8; 0],
}
pub type CFErrorRef = *mut __CFError;
unsafe extern "C" {
    pub fn CFErrorGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub static kCFErrorDomainPOSIX: CFErrorDomain;
}
unsafe extern "C" {
    pub static kCFErrorDomainOSStatus: CFErrorDomain;
}
unsafe extern "C" {
    pub static kCFErrorDomainMach: CFErrorDomain;
}
unsafe extern "C" {
    pub static kCFErrorDomainCocoa: CFErrorDomain;
}
unsafe extern "C" {
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFErrorLocalizedFailureKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFErrorDescriptionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFErrorURLKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFErrorFilePathKey: CFStringRef;
}
unsafe extern "C" {
    pub fn CFErrorCreate(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfo: CFDictionaryRef,
    ) -> CFErrorRef;
}
unsafe extern "C" {
    pub fn CFErrorCreateWithUserInfoKeysAndValues(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfoKeys: *const *const ::std::os::raw::c_void,
        userInfoValues: *const *const ::std::os::raw::c_void,
        numUserInfoValues: CFIndex,
    ) -> CFErrorRef;
}
unsafe extern "C" {
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFErrorDomain;
}
unsafe extern "C" {
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
}
pub type CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings_kCFStringEncodingMacRoman: CFStringBuiltInEncodings = 0;
pub const CFStringBuiltInEncodings_kCFStringEncodingWindowsLatin1: CFStringBuiltInEncodings = 1280;
pub const CFStringBuiltInEncodings_kCFStringEncodingISOLatin1: CFStringBuiltInEncodings = 513;
pub const CFStringBuiltInEncodings_kCFStringEncodingNextStepLatin: CFStringBuiltInEncodings = 2817;
pub const CFStringBuiltInEncodings_kCFStringEncodingASCII: CFStringBuiltInEncodings = 1536;
pub const CFStringBuiltInEncodings_kCFStringEncodingUnicode: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF8: CFStringBuiltInEncodings = 134217984;
pub const CFStringBuiltInEncodings_kCFStringEncodingNonLossyASCII: CFStringBuiltInEncodings = 3071;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16BE: CFStringBuiltInEncodings = 268435712;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16LE: CFStringBuiltInEncodings = 335544576;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32: CFStringBuiltInEncodings = 201326848;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32BE: CFStringBuiltInEncodings = 402653440;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32LE: CFStringBuiltInEncodings = 469762304;
pub type CFStringBuiltInEncodings = CFStringEncoding;
unsafe extern "C" {
    pub fn CFStringGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFStringCreateWithPascalString(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithCString(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithBytes(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithCharacters(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithPascalStringNoCopy(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithCStringNoCopy(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateWithFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateStringWithValidatedFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        errorPtr: *mut CFErrorRef,
        ...
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateStringWithValidatedFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        arguments: va_list,
        errorPtr: *mut CFErrorRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) -> CFMutableStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        theString: CFStringRef,
    ) -> CFMutableStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *mut UniChar,
        numChars: CFIndex,
        capacity: CFIndex,
        externalCharactersAllocator: CFAllocatorRef,
    ) -> CFMutableStringRef;
}
unsafe extern "C" {
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) -> UniChar;
}
unsafe extern "C" {
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: *mut UniChar);
}
unsafe extern "C" {
    pub fn CFStringGetPascalString(
        theString: CFStringRef,
        buffer: StringPtr,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringGetCString(
        theString: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringGetPascalStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> ConstStringPtr;
}
unsafe extern "C" {
    pub fn CFStringGetCStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
}
unsafe extern "C" {
    pub fn CFStringGetBytes(
        theString: CFStringRef,
        range: CFRange,
        encoding: CFStringEncoding,
        lossByte: UInt8,
        isExternalRepresentation: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
        usedBufLen: *mut CFIndex,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFStringCreateFromExternalRepresentation(
        alloc: CFAllocatorRef,
        data: CFDataRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateExternalRepresentation(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        encoding: CFStringEncoding,
        lossByte: UInt8,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
unsafe extern "C" {
    pub fn CFStringGetFastestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
unsafe extern "C" {
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
}
unsafe extern "C" {
    pub fn CFStringGetMaximumSizeForEncoding(
        length: CFIndex,
        encoding: CFStringEncoding,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFStringGetFileSystemRepresentation(
        string: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFStringCreateWithFileSystemRepresentation(
        alloc: CFAllocatorRef,
        buffer: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub const CFStringCompareFlags_kCFCompareCaseInsensitive: CFStringCompareFlags = 1;
pub const CFStringCompareFlags_kCFCompareBackwards: CFStringCompareFlags = 4;
pub const CFStringCompareFlags_kCFCompareAnchored: CFStringCompareFlags = 8;
pub const CFStringCompareFlags_kCFCompareNonliteral: CFStringCompareFlags = 16;
pub const CFStringCompareFlags_kCFCompareLocalized: CFStringCompareFlags = 32;
pub const CFStringCompareFlags_kCFCompareNumerically: CFStringCompareFlags = 64;
pub const CFStringCompareFlags_kCFCompareDiacriticInsensitive: CFStringCompareFlags = 128;
pub const CFStringCompareFlags_kCFCompareWidthInsensitive: CFStringCompareFlags = 256;
pub const CFStringCompareFlags_kCFCompareForcedOrdering: CFStringCompareFlags = 512;
pub type CFStringCompareFlags = CFOptionFlags;
unsafe extern "C" {
    pub fn CFStringCompareWithOptionsAndLocale(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
    ) -> CFComparisonResult;
}
unsafe extern "C" {
    pub fn CFStringCompareWithOptions(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
unsafe extern "C" {
    pub fn CFStringCompare(
        theString1: CFStringRef,
        theString2: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
unsafe extern "C" {
    pub fn CFStringFindWithOptionsAndLocale(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
        result: *mut CFRange,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringFindWithOptions(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFStringFind(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFRange;
}
unsafe extern "C" {
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(
        theString: CFStringRef,
        theIndex: CFIndex,
    ) -> CFRange;
}
unsafe extern "C" {
    pub fn CFStringFindCharacterFromSet(
        theString: CFStringRef,
        theSet: CFCharacterSetRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringGetLineBounds(
        theString: CFStringRef,
        range: CFRange,
        lineBeginIndex: *mut CFIndex,
        lineEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFStringGetParagraphBounds(
        string: CFStringRef,
        range: CFRange,
        parBeginIndex: *mut CFIndex,
        parEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFStringGetHyphenationLocationBeforeIndex(
        string: CFStringRef,
        location: CFIndex,
        limitRange: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
        character: *mut UTF32Char,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringCreateByCombiningStrings(
        alloc: CFAllocatorRef,
        theArray: CFArrayRef,
        separatorString: CFStringRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringCreateArrayBySeparatingStrings(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        separatorString: CFStringRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFStringGetIntValue(str_: CFStringRef) -> SInt32;
}
unsafe extern "C" {
    pub fn CFStringGetDoubleValue(str_: CFStringRef) -> f64;
}
unsafe extern "C" {
    pub fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef);
}
unsafe extern "C" {
    pub fn CFStringAppendCharacters(
        theString: CFMutableStringRef,
        chars: *const UniChar,
        numChars: CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFStringAppendPascalString(
        theString: CFMutableStringRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    );
}
unsafe extern "C" {
    pub fn CFStringAppendCString(
        theString: CFMutableStringRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    );
}
unsafe extern "C" {
    pub fn CFStringAppendFormat(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    );
}
unsafe extern "C" {
    pub fn CFStringAppendFormatAndArguments(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    );
}
unsafe extern "C" {
    pub fn CFStringInsert(str_: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef);
}
unsafe extern "C" {
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
}
unsafe extern "C" {
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef);
}
unsafe extern "C" {
    pub fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef);
}
unsafe extern "C" {
    pub fn CFStringFindAndReplace(
        theString: CFMutableStringRef,
        stringToFind: CFStringRef,
        replacementString: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFStringSetExternalCharactersNoCopy(
        theString: CFMutableStringRef,
        chars: *mut UniChar,
        length: CFIndex,
        capacity: CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFStringPad(
        theString: CFMutableStringRef,
        padString: CFStringRef,
        length: CFIndex,
        indexIntoPad: CFIndex,
    );
}
unsafe extern "C" {
    pub fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef);
}
unsafe extern "C" {
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
}
unsafe extern "C" {
    pub fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
unsafe extern "C" {
    pub fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
unsafe extern "C" {
    pub fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef);
}
pub const CFStringNormalizationForm_kCFStringNormalizationFormD: CFStringNormalizationForm = 0;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKD: CFStringNormalizationForm = 1;
pub const CFStringNormalizationForm_kCFStringNormalizationFormC: CFStringNormalizationForm = 2;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKC: CFStringNormalizationForm = 3;
pub type CFStringNormalizationForm = CFIndex;
unsafe extern "C" {
    pub fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm);
}
unsafe extern "C" {
    pub fn CFStringFold(
        theString: CFMutableStringRef,
        theFlags: CFStringCompareFlags,
        theLocale: CFLocaleRef,
    );
}
unsafe extern "C" {
    pub fn CFStringTransform(
        string: CFMutableStringRef,
        range: *mut CFRange,
        transform: CFStringRef,
        reverse: Boolean,
    ) -> Boolean;
}
unsafe extern "C" {
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformToLatin: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinKatakana: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinHiragana: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformMandarinLatin: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinArabic: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinHebrew: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinThai: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformLatinGreek: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformToXMLHex: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformToUnicodeName: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStringTransformStripDiacritics: CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
}
unsafe extern "C" {
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringConvertEncodingToNSStringEncoding(
        encoding: CFStringEncoding,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn CFStringConvertNSStringEncodingToEncoding(
        encoding: ::std::os::raw::c_ulong,
    ) -> CFStringEncoding;
}
unsafe extern "C" {
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) -> UInt32;
}
unsafe extern "C" {
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) -> CFStringEncoding;
}
unsafe extern "C" {
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) -> CFStringEncoding;
}
unsafe extern "C" {
    pub fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFStringGetMostCompatibleMacStringEncoding(
        encoding: CFStringEncoding,
    ) -> CFStringEncoding;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStringInlineBuffer {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::std::os::raw::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFStringInlineBuffer"][::std::mem::size_of::<CFStringInlineBuffer>() - 184usize];
    ["Alignment of CFStringInlineBuffer"][::std::mem::align_of::<CFStringInlineBuffer>() - 8usize];
    ["Offset of field: CFStringInlineBuffer::buffer"]
        [::std::mem::offset_of!(CFStringInlineBuffer, buffer) - 0usize];
    ["Offset of field: CFStringInlineBuffer::theString"]
        [::std::mem::offset_of!(CFStringInlineBuffer, theString) - 128usize];
    ["Offset of field: CFStringInlineBuffer::directUniCharBuffer"]
        [::std::mem::offset_of!(CFStringInlineBuffer, directUniCharBuffer) - 136usize];
    ["Offset of field: CFStringInlineBuffer::directCStringBuffer"]
        [::std::mem::offset_of!(CFStringInlineBuffer, directCStringBuffer) - 144usize];
    ["Offset of field: CFStringInlineBuffer::rangeToBuffer"]
        [::std::mem::offset_of!(CFStringInlineBuffer, rangeToBuffer) - 152usize];
    ["Offset of field: CFStringInlineBuffer::bufferedRangeStart"]
        [::std::mem::offset_of!(CFStringInlineBuffer, bufferedRangeStart) - 168usize];
    ["Offset of field: CFStringInlineBuffer::bufferedRangeEnd"]
        [::std::mem::offset_of!(CFStringInlineBuffer, bufferedRangeEnd) - 176usize];
};
unsafe extern "C" {
    pub fn CFShow(obj: CFTypeRef);
}
unsafe extern "C" {
    pub fn CFShowStr(str_: CFStringRef);
}
unsafe extern "C" {
    pub fn __CFStringMakeConstantString(cStr: *const ::std::os::raw::c_char) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneResetSystem();
}
unsafe extern "C" {
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}
unsafe extern "C" {
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef);
}
unsafe extern "C" {
    pub fn CFTimeZoneCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        data: CFDataRef,
    ) -> CFTimeZoneRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(
        allocator: CFAllocatorRef,
        ti: CFTimeInterval,
    ) -> CFTimeZoneRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneCreateWithName(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        tryAbbrev: Boolean,
    ) -> CFTimeZoneRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFTimeInterval;
}
unsafe extern "C" {
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> Boolean;
}
unsafe extern "C" {
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}
unsafe extern "C" {
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleStandard: CFTimeZoneNameStyle = 0;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortStandard: CFTimeZoneNameStyle = 1;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleDaylightSaving: CFTimeZoneNameStyle = 2;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortDaylightSaving: CFTimeZoneNameStyle = 3;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleGeneric: CFTimeZoneNameStyle = 4;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortGeneric: CFTimeZoneNameStyle = 5;
pub type CFTimeZoneNameStyle = CFIndex;
unsafe extern "C" {
    pub fn CFTimeZoneCopyLocalizedName(
        tz: CFTimeZoneRef,
        style: CFTimeZoneNameStyle,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCalendar {
    _unused: [u8; 0],
}
pub type CFCalendarRef = *mut __CFCalendar;
unsafe extern "C" {
    pub fn CFCalendarGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFCalendarCopyCurrent() -> CFCalendarRef;
}
unsafe extern "C" {
    pub fn CFCalendarCreateWithIdentifier(
        allocator: CFAllocatorRef,
        identifier: CFCalendarIdentifier,
    ) -> CFCalendarRef;
}
unsafe extern "C" {
    pub fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFCalendarIdentifier;
}
unsafe extern "C" {
    pub fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
}
unsafe extern "C" {
    pub fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef);
}
unsafe extern "C" {
    pub fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
}
unsafe extern "C" {
    pub fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef);
}
unsafe extern "C" {
    pub fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex);
}
unsafe extern "C" {
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex);
}
pub const CFCalendarUnit_kCFCalendarUnitEra: CFCalendarUnit = 2;
pub const CFCalendarUnit_kCFCalendarUnitYear: CFCalendarUnit = 4;
pub const CFCalendarUnit_kCFCalendarUnitMonth: CFCalendarUnit = 8;
pub const CFCalendarUnit_kCFCalendarUnitDay: CFCalendarUnit = 16;
pub const CFCalendarUnit_kCFCalendarUnitHour: CFCalendarUnit = 32;
pub const CFCalendarUnit_kCFCalendarUnitMinute: CFCalendarUnit = 64;
pub const CFCalendarUnit_kCFCalendarUnitSecond: CFCalendarUnit = 128;
pub const CFCalendarUnit_kCFCalendarUnitWeek: CFCalendarUnit = 256;
pub const CFCalendarUnit_kCFCalendarUnitWeekday: CFCalendarUnit = 512;
pub const CFCalendarUnit_kCFCalendarUnitWeekdayOrdinal: CFCalendarUnit = 1024;
pub const CFCalendarUnit_kCFCalendarUnitQuarter: CFCalendarUnit = 2048;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfMonth: CFCalendarUnit = 4096;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfYear: CFCalendarUnit = 8192;
pub const CFCalendarUnit_kCFCalendarUnitYearForWeekOfYear: CFCalendarUnit = 16384;
pub type CFCalendarUnit = CFOptionFlags;
unsafe extern "C" {
    pub fn CFCalendarGetMinimumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
unsafe extern "C" {
    pub fn CFCalendarGetMaximumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
unsafe extern "C" {
    pub fn CFCalendarGetRangeOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
}
unsafe extern "C" {
    pub fn CFCalendarGetOrdinalityOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFCalendarGetTimeRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFCalendarComposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFCalendarDecomposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub const kCFCalendarComponentsWrap: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = CFOptionFlags;
unsafe extern "C" {
    pub fn CFCalendarAddComponents(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFCalendarGetComponentDifference(
        calendar: CFCalendarRef,
        startingAT: CFAbsoluteTime,
        resultAT: CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub type CGFloat = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPoint {
    pub x: CGFloat,
    pub y: CGFloat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CGPoint"][::std::mem::size_of::<CGPoint>() - 16usize];
    ["Alignment of CGPoint"][::std::mem::align_of::<CGPoint>() - 8usize];
    ["Offset of field: CGPoint::x"][::std::mem::offset_of!(CGPoint, x) - 0usize];
    ["Offset of field: CGPoint::y"][::std::mem::offset_of!(CGPoint, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGSize {
    pub width: CGFloat,
    pub height: CGFloat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CGSize"][::std::mem::size_of::<CGSize>() - 16usize];
    ["Alignment of CGSize"][::std::mem::align_of::<CGSize>() - 8usize];
    ["Offset of field: CGSize::width"][::std::mem::offset_of!(CGSize, width) - 0usize];
    ["Offset of field: CGSize::height"][::std::mem::offset_of!(CGSize, height) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGVector {
    pub dx: CGFloat,
    pub dy: CGFloat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CGVector"][::std::mem::size_of::<CGVector>() - 16usize];
    ["Alignment of CGVector"][::std::mem::align_of::<CGVector>() - 8usize];
    ["Offset of field: CGVector::dx"][::std::mem::offset_of!(CGVector, dx) - 0usize];
    ["Offset of field: CGVector::dy"][::std::mem::offset_of!(CGVector, dy) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGRect {
    pub origin: CGPoint,
    pub size: CGSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CGRect"][::std::mem::size_of::<CGRect>() - 32usize];
    ["Alignment of CGRect"][::std::mem::align_of::<CGRect>() - 8usize];
    ["Offset of field: CGRect::origin"][::std::mem::offset_of!(CGRect, origin) - 0usize];
    ["Offset of field: CGRect::size"][::std::mem::offset_of!(CGRect, size) - 16usize];
};
pub const CGRectEdge_CGRectMinXEdge: CGRectEdge = 0;
pub const CGRectEdge_CGRectMinYEdge: CGRectEdge = 1;
pub const CGRectEdge_CGRectMaxXEdge: CGRectEdge = 2;
pub const CGRectEdge_CGRectMaxYEdge: CGRectEdge = 3;
pub type CGRectEdge = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransform {
    pub a: CGFloat,
    pub b: CGFloat,
    pub c: CGFloat,
    pub d: CGFloat,
    pub tx: CGFloat,
    pub ty: CGFloat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CGAffineTransform"][::std::mem::size_of::<CGAffineTransform>() - 48usize];
    ["Alignment of CGAffineTransform"][::std::mem::align_of::<CGAffineTransform>() - 8usize];
    ["Offset of field: CGAffineTransform::a"]
        [::std::mem::offset_of!(CGAffineTransform, a) - 0usize];
    ["Offset of field: CGAffineTransform::b"]
        [::std::mem::offset_of!(CGAffineTransform, b) - 8usize];
    ["Offset of field: CGAffineTransform::c"]
        [::std::mem::offset_of!(CGAffineTransform, c) - 16usize];
    ["Offset of field: CGAffineTransform::d"]
        [::std::mem::offset_of!(CGAffineTransform, d) - 24usize];
    ["Offset of field: CGAffineTransform::tx"]
        [::std::mem::offset_of!(CGAffineTransform, tx) - 32usize];
    ["Offset of field: CGAffineTransform::ty"]
        [::std::mem::offset_of!(CGAffineTransform, ty) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransformComponents {
    pub scale: CGSize,
    pub horizontalShear: CGFloat,
    pub rotation: CGFloat,
    pub translation: CGVector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CGAffineTransformComponents"]
        [::std::mem::size_of::<CGAffineTransformComponents>() - 48usize];
    ["Alignment of CGAffineTransformComponents"]
        [::std::mem::align_of::<CGAffineTransformComponents>() - 8usize];
    ["Offset of field: CGAffineTransformComponents::scale"]
        [::std::mem::offset_of!(CGAffineTransformComponents, scale) - 0usize];
    ["Offset of field: CGAffineTransformComponents::horizontalShear"]
        [::std::mem::offset_of!(CGAffineTransformComponents, horizontalShear) - 16usize];
    ["Offset of field: CGAffineTransformComponents::rotation"]
        [::std::mem::offset_of!(CGAffineTransformComponents, rotation) - 24usize];
    ["Offset of field: CGAffineTransformComponents::translation"]
        [::std::mem::offset_of!(CGAffineTransformComponents, translation) - 32usize];
};
pub type CFDateFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDateFormatter {
    _unused: [u8; 0],
}
pub type CFDateFormatterRef = *mut __CFDateFormatter;
unsafe extern "C" {
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: CFAllocatorRef,
        tmplate: CFStringRef,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}
pub const CFDateFormatterStyle_kCFDateFormatterNoStyle: CFDateFormatterStyle = 0;
pub const CFDateFormatterStyle_kCFDateFormatterShortStyle: CFDateFormatterStyle = 1;
pub const CFDateFormatterStyle_kCFDateFormatterMediumStyle: CFDateFormatterStyle = 2;
pub const CFDateFormatterStyle_kCFDateFormatterLongStyle: CFDateFormatterStyle = 3;
pub const CFDateFormatterStyle_kCFDateFormatterFullStyle: CFDateFormatterStyle = 4;
pub type CFDateFormatterStyle = CFIndex;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithYear: CFISO8601DateFormatOptions = 1;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithMonth: CFISO8601DateFormatOptions = 2;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithWeekOfYear:
    CFISO8601DateFormatOptions = 4;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDay: CFISO8601DateFormatOptions = 16;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTime: CFISO8601DateFormatOptions = 32;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTimeZone: CFISO8601DateFormatOptions =
    64;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithSpaceBetweenDateAndTime:
    CFISO8601DateFormatOptions = 128;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDashSeparatorInDate:
    CFISO8601DateFormatOptions = 256;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTime:
    CFISO8601DateFormatOptions = 512;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTimeZone:
    CFISO8601DateFormatOptions = 1024;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFractionalSeconds:
    CFISO8601DateFormatOptions = 2048;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullDate: CFISO8601DateFormatOptions =
    275;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullTime: CFISO8601DateFormatOptions =
    1632;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithInternetDateTime:
    CFISO8601DateFormatOptions = 1907;
pub type CFISO8601DateFormatOptions = CFOptionFlags;
unsafe extern "C" {
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: CFAllocatorRef,
        formatOptions: CFISO8601DateFormatOptions,
    ) -> CFDateFormatterRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        dateStyle: CFDateFormatterStyle,
        timeStyle: CFDateFormatterStyle,
    ) -> CFDateFormatterRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) -> CFLocaleRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
unsafe extern "C" {
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
unsafe extern "C" {
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef);
}
unsafe extern "C" {
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        date: CFDateRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        at: CFAbsoluteTime,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterCreateDateFromString(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
    ) -> CFDateRef;
}
unsafe extern "C" {
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFDateFormatterSetProperty(
        formatter: CFDateFormatterRef,
        key: CFStringRef,
        value: CFTypeRef,
    );
}
unsafe extern "C" {
    pub fn CFDateFormatterCopyProperty(
        formatter: CFDateFormatterRef,
        key: CFDateFormatterKey,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub static kCFDateFormatterIsLenient: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterTimeZone: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterCalendarName: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterCalendar: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterEraSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterMonthSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterAMSymbol: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterPMSymbol: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
}
unsafe extern "C" {
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBoolean {
    _unused: [u8; 0],
}
pub type CFBooleanRef = *const __CFBoolean;
unsafe extern "C" {
    pub static kCFBooleanTrue: CFBooleanRef;
}
unsafe extern "C" {
    pub static kCFBooleanFalse: CFBooleanRef;
}
unsafe extern "C" {
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
}
pub const CFNumberType_kCFNumberSInt8Type: CFNumberType = 1;
pub const CFNumberType_kCFNumberSInt16Type: CFNumberType = 2;
pub const CFNumberType_kCFNumberSInt32Type: CFNumberType = 3;
pub const CFNumberType_kCFNumberSInt64Type: CFNumberType = 4;
pub const CFNumberType_kCFNumberFloat32Type: CFNumberType = 5;
pub const CFNumberType_kCFNumberFloat64Type: CFNumberType = 6;
pub const CFNumberType_kCFNumberCharType: CFNumberType = 7;
pub const CFNumberType_kCFNumberShortType: CFNumberType = 8;
pub const CFNumberType_kCFNumberIntType: CFNumberType = 9;
pub const CFNumberType_kCFNumberLongType: CFNumberType = 10;
pub const CFNumberType_kCFNumberLongLongType: CFNumberType = 11;
pub const CFNumberType_kCFNumberFloatType: CFNumberType = 12;
pub const CFNumberType_kCFNumberDoubleType: CFNumberType = 13;
pub const CFNumberType_kCFNumberCFIndexType: CFNumberType = 14;
pub const CFNumberType_kCFNumberNSIntegerType: CFNumberType = 15;
pub const CFNumberType_kCFNumberCGFloatType: CFNumberType = 16;
pub const CFNumberType_kCFNumberMaxType: CFNumberType = 16;
pub type CFNumberType = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumber {
    _unused: [u8; 0],
}
pub type CFNumberRef = *const __CFNumber;
unsafe extern "C" {
    pub static kCFNumberPositiveInfinity: CFNumberRef;
}
unsafe extern "C" {
    pub static kCFNumberNegativeInfinity: CFNumberRef;
}
unsafe extern "C" {
    pub static kCFNumberNaN: CFNumberRef;
}
unsafe extern "C" {
    pub fn CFNumberGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFNumberCreate(
        allocator: CFAllocatorRef,
        theType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFNumberRef;
}
unsafe extern "C" {
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
}
unsafe extern "C" {
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFNumberGetValue(
        number: CFNumberRef,
        theType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFNumberCompare(
        number: CFNumberRef,
        otherNumber: CFNumberRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
pub type CFNumberFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumberFormatter {
    _unused: [u8; 0],
}
pub type CFNumberFormatterRef = *mut __CFNumberFormatter;
unsafe extern "C" {
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
}
pub const CFNumberFormatterStyle_kCFNumberFormatterNoStyle: CFNumberFormatterStyle = 0;
pub const CFNumberFormatterStyle_kCFNumberFormatterDecimalStyle: CFNumberFormatterStyle = 1;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyStyle: CFNumberFormatterStyle = 2;
pub const CFNumberFormatterStyle_kCFNumberFormatterPercentStyle: CFNumberFormatterStyle = 3;
pub const CFNumberFormatterStyle_kCFNumberFormatterScientificStyle: CFNumberFormatterStyle = 4;
pub const CFNumberFormatterStyle_kCFNumberFormatterSpellOutStyle: CFNumberFormatterStyle = 5;
pub const CFNumberFormatterStyle_kCFNumberFormatterOrdinalStyle: CFNumberFormatterStyle = 6;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyISOCodeStyle: CFNumberFormatterStyle = 8;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyPluralStyle: CFNumberFormatterStyle = 9;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyAccountingStyle: CFNumberFormatterStyle =
    10;
pub type CFNumberFormatterStyle = CFIndex;
unsafe extern "C" {
    pub fn CFNumberFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        style: CFNumberFormatterStyle,
    ) -> CFNumberFormatterRef;
}
unsafe extern "C" {
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) -> CFLocaleRef;
}
unsafe extern "C" {
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) -> CFNumberFormatterStyle;
}
unsafe extern "C" {
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef);
}
unsafe extern "C" {
    pub fn CFNumberFormatterCreateStringWithNumber(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number: CFNumberRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFNumberFormatterCreateStringWithValue(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        numberType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub const CFNumberFormatterOptionFlags_kCFNumberFormatterParseIntegersOnly:
    CFNumberFormatterOptionFlags = 1;
pub type CFNumberFormatterOptionFlags = CFOptionFlags;
unsafe extern "C" {
    pub fn CFNumberFormatterCreateNumberFromString(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        options: CFOptionFlags,
    ) -> CFNumberRef;
}
unsafe extern "C" {
    pub fn CFNumberFormatterGetValueFromString(
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        numberType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFNumberFormatterSetProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
        value: CFTypeRef,
    );
}
unsafe extern "C" {
    pub fn CFNumberFormatterCopyProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub static kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMinusSign: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterPlusSign: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterIsLenient: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
}
unsafe extern "C" {
    pub static kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
}
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundCeiling:
    CFNumberFormatterRoundingMode = 0;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundFloor:
    CFNumberFormatterRoundingMode = 1;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundDown: CFNumberFormatterRoundingMode =
    2;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundUp: CFNumberFormatterRoundingMode =
    3;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfEven:
    CFNumberFormatterRoundingMode = 4;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfDown:
    CFNumberFormatterRoundingMode = 5;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfUp:
    CFNumberFormatterRoundingMode = 6;
pub type CFNumberFormatterRoundingMode = CFIndex;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforePrefix:
    CFNumberFormatterPadPosition = 0;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterPrefix:
    CFNumberFormatterPadPosition = 1;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforeSuffix:
    CFNumberFormatterPadPosition = 2;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterSuffix:
    CFNumberFormatterPadPosition = 3;
pub type CFNumberFormatterPadPosition = CFIndex;
unsafe extern "C" {
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(
        currencyCode: CFStringRef,
        defaultFractionDigits: *mut i32,
        roundingIncrement: *mut f64,
    ) -> Boolean;
}
unsafe extern "C" {
    pub static kCFPreferencesAnyApplication: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPreferencesCurrentApplication: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPreferencesAnyHost: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPreferencesCurrentHost: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPreferencesAnyUser: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPreferencesCurrentUser: CFStringRef;
}
unsafe extern "C" {
    pub fn CFPreferencesCopyAppValue(
        key: CFStringRef,
        applicationID: CFStringRef,
    ) -> CFPropertyListRef;
}
unsafe extern "C" {
    pub fn CFPreferencesGetAppBooleanValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPreferencesGetAppIntegerValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFPreferencesSetAppValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef);
}
unsafe extern "C" {
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(
        applicationID: CFStringRef,
        suiteID: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFPreferencesAppSynchronize(applicationID: CFStringRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPreferencesCopyValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFPropertyListRef;
}
unsafe extern "C" {
    pub fn CFPreferencesCopyMultiple(
        keysToFetch: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFPreferencesSetValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFPreferencesSetMultiple(
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFPreferencesSynchronize(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPreferencesCopyApplicationList(
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFPreferencesCopyKeyList(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) -> Boolean;
}
pub const CFURLPathStyle_kCFURLPOSIXPathStyle: CFURLPathStyle = 0;
pub const CFURLPathStyle_kCFURLHFSPathStyle: CFURLPathStyle = 1;
pub const CFURLPathStyle_kCFURLWindowsPathStyle: CFURLPathStyle = 2;
pub type CFURLPathStyle = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURL {
    _unused: [u8; 0],
}
pub type CFURLRef = *const __CFURL;
unsafe extern "C" {
    pub fn CFURLGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFURLCreateWithBytes(
        allocator: CFAllocatorRef,
        URLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        encoding: CFStringEncoding,
        escapeWhitespace: Boolean,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFURLCreateWithString(
        allocator: CFAllocatorRef,
        URLString: CFStringRef,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: CFAllocatorRef,
        relativeURLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
        useCompatibilityMode: Boolean,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateWithFileSystemPath(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLGetFileSystemRepresentation(
        url: CFURLRef,
        resolveAgainstBase: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLGetString(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLGetBaseURL(anURL: CFURLRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCanBeDecomposed(anURL: CFURLRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCopyScheme(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyNetLocation(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyPath(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: *mut Boolean) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLHasDirectoryPath(anURL: CFURLRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCopyResourceSpecifier(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyHostName(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLGetPortNumber(anURL: CFURLRef) -> SInt32;
}
unsafe extern "C" {
    pub fn CFURLCopyUserName(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyPassword(anURL: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyParameterString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyQueryString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef)
        -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        pathComponent: CFStringRef,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        extension: CFStringRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut UInt8, bufferLength: CFIndex) -> CFIndex;
}
pub const CFURLComponentType_kCFURLComponentScheme: CFURLComponentType = 1;
pub const CFURLComponentType_kCFURLComponentNetLocation: CFURLComponentType = 2;
pub const CFURLComponentType_kCFURLComponentPath: CFURLComponentType = 3;
pub const CFURLComponentType_kCFURLComponentResourceSpecifier: CFURLComponentType = 4;
pub const CFURLComponentType_kCFURLComponentUser: CFURLComponentType = 5;
pub const CFURLComponentType_kCFURLComponentPassword: CFURLComponentType = 6;
pub const CFURLComponentType_kCFURLComponentUserInfo: CFURLComponentType = 7;
pub const CFURLComponentType_kCFURLComponentHost: CFURLComponentType = 8;
pub const CFURLComponentType_kCFURLComponentPort: CFURLComponentType = 9;
pub const CFURLComponentType_kCFURLComponentParameterString: CFURLComponentType = 10;
pub const CFURLComponentType_kCFURLComponentQuery: CFURLComponentType = 11;
pub const CFURLComponentType_kCFURLComponentFragment: CFURLComponentType = 12;
pub type CFURLComponentType = CFIndex;
unsafe extern "C" {
    pub fn CFURLGetByteRangeForComponent(
        url: CFURLRef,
        component: CFURLComponentType,
        rangeIncludingSeparators: *mut CFRange,
    ) -> CFRange;
}
unsafe extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: CFAllocatorRef,
        origString: CFStringRef,
        charsToLeaveEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveUnescaped: CFStringRef,
        legalURLCharactersToBeEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCreateFileReferenceURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateFilePathURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSRef {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: *const FSRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLGetFSRef(url: CFURLRef, fsRef: *mut FSRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCopyResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValueTypeRefPtr: *mut ::std::os::raw::c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: CFURLRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFURLSetResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLSetResourcePropertiesForKeys(
        url: CFURLRef,
        keyedPropertyValues: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
}
unsafe extern "C" {
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef);
}
unsafe extern "C" {
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef);
}
unsafe extern "C" {
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
    );
}
unsafe extern "C" {
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef) -> Boolean;
}
unsafe extern "C" {
    pub static kCFURLNameKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLLocalizedNameKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsRegularFileKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsDirectoryKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsVolumeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsPackageKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsApplicationKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLApplicationIsScriptableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsUserImmutableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsHiddenKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLCreationDateKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLContentAccessDateKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLContentModificationDateKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileContentIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLMayShareFileContentKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLMayHaveExtendedAttributesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsPurgeableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsSparseKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLLinkCountKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeURLKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLTypeIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLLabelNumberKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLLabelColorKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLLocalizedLabelKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLEffectiveIconKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLCustomIconKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsReadableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsWritableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsExecutableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileSecurityKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLTagNamesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLPathKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLCanonicalPathKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsMountTriggerKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileSizeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLTotalFileSizeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsAliasFileKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileProtectionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileProtectionNone: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileProtectionComplete: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileProtectionCompleteWhenUserInactive: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLDirectoryEntryCountKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeNameKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsEncryptedKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeIsRootFileSystemKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsCompressionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsFileCloningKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeTypeNameKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeSubtypeKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLVolumeMountFromLocationKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
}
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationMinimalBookmarkMask:
    CFURLBookmarkCreationOptions = 512;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSuitableForBookmarkFile:
    CFURLBookmarkCreationOptions = 1024;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithSecurityScope:
    CFURLBookmarkCreationOptions = 2048;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
    CFURLBookmarkCreationOptions = 4096;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithoutImplicitSecurityScope:
    CFURLBookmarkCreationOptions = 536870912;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationPreferFileIDResolutionMask:
    CFURLBookmarkCreationOptions = 256;
pub type CFURLBookmarkCreationOptions = CFOptionFlags;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithSecurityScope:
    CFURLBookmarkResolutionOptions = 1024;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutImplicitStartAccessing:
    CFURLBookmarkResolutionOptions = 32768;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub type CFURLBookmarkResolutionOptions = CFOptionFlags;
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;
unsafe extern "C" {
    pub fn CFURLCreateBookmarkData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        options: CFURLBookmarkCreationOptions,
        resourcePropertiesToInclude: CFArrayRef,
        relativeToURL: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: CFAllocatorRef,
        bookmark: CFDataRef,
        options: CFURLBookmarkResolutionOptions,
        relativeToURL: CFURLRef,
        resourcePropertiesToInclude: CFArrayRef,
        isStale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertiesToReturn: CFArrayRef,
        bookmark: CFDataRef,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertyKey: CFStringRef,
        bookmark: CFDataRef,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: CFAllocatorRef,
        fileURL: CFURLRef,
        errorRef: *mut CFErrorRef,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFURLWriteBookmarkDataToFile(
        bookmarkRef: CFDataRef,
        fileURL: CFURLRef,
        options: CFURLBookmarkFileCreationOptions,
        errorRef: *mut CFErrorRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocatorRef: CFAllocatorRef,
        aliasRecordDataRef: CFDataRef,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef);
}
pub type boolean_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type vm32_offset_t = u32;
pub type vm32_address_t = u32;
pub type vm32_size_t = u32;
pub type mach_port_context_t = vm_offset_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_status"][::std::mem::size_of::<mach_port_status>() - 40usize];
    ["Alignment of mach_port_status"][::std::mem::align_of::<mach_port_status>() - 4usize];
    ["Offset of field: mach_port_status::mps_pset"]
        [::std::mem::offset_of!(mach_port_status, mps_pset) - 0usize];
    ["Offset of field: mach_port_status::mps_seqno"]
        [::std::mem::offset_of!(mach_port_status, mps_seqno) - 4usize];
    ["Offset of field: mach_port_status::mps_mscount"]
        [::std::mem::offset_of!(mach_port_status, mps_mscount) - 8usize];
    ["Offset of field: mach_port_status::mps_qlimit"]
        [::std::mem::offset_of!(mach_port_status, mps_qlimit) - 12usize];
    ["Offset of field: mach_port_status::mps_msgcount"]
        [::std::mem::offset_of!(mach_port_status, mps_msgcount) - 16usize];
    ["Offset of field: mach_port_status::mps_sorights"]
        [::std::mem::offset_of!(mach_port_status, mps_sorights) - 20usize];
    ["Offset of field: mach_port_status::mps_srights"]
        [::std::mem::offset_of!(mach_port_status, mps_srights) - 24usize];
    ["Offset of field: mach_port_status::mps_pdrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_pdrequest) - 28usize];
    ["Offset of field: mach_port_status::mps_nsrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_nsrequest) - 32usize];
    ["Offset of field: mach_port_status::mps_flags"]
        [::std::mem::offset_of!(mach_port_status, mps_flags) - 36usize];
};
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_limits"][::std::mem::size_of::<mach_port_limits>() - 4usize];
    ["Alignment of mach_port_limits"][::std::mem::align_of::<mach_port_limits>() - 4usize];
    ["Offset of field: mach_port_limits::mpl_qlimit"]
        [::std::mem::offset_of!(mach_port_limits, mpl_qlimit) - 0usize];
};
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_info_ext"][::std::mem::size_of::<mach_port_info_ext>() - 68usize];
    ["Alignment of mach_port_info_ext"][::std::mem::align_of::<mach_port_info_ext>() - 4usize];
    ["Offset of field: mach_port_info_ext::mpie_status"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_status) - 0usize];
    ["Offset of field: mach_port_info_ext::mpie_boost_cnt"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_boost_cnt) - 40usize];
    ["Offset of field: mach_port_info_ext::reserved"]
        [::std::mem::offset_of!(mach_port_info_ext, reserved) - 44usize];
};
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_guard_info"][::std::mem::size_of::<mach_port_guard_info>() - 8usize];
    ["Alignment of mach_port_guard_info"][::std::mem::align_of::<mach_port_guard_info>() - 8usize];
    ["Offset of field: mach_port_guard_info::mpgi_guard"]
        [::std::mem::offset_of!(mach_port_guard_info, mpgi_guard) - 0usize];
};
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_qos"][::std::mem::size_of::<mach_port_qos>() - 8usize];
    ["Alignment of mach_port_qos"][::std::mem::align_of::<mach_port_qos>() - 4usize];
    ["Offset of field: mach_port_qos::len"][::std::mem::offset_of!(mach_port_qos, len) - 4usize];
};
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn name_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_name_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn prealloc_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_prealloc_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_service_port_info"][::std::mem::size_of::<mach_service_port_info>() - 256usize];
    ["Alignment of mach_service_port_info"]
        [::std::mem::align_of::<mach_service_port_info>() - 1usize];
    ["Offset of field: mach_service_port_info::mspi_string_name"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_string_name) - 0usize];
    ["Offset of field: mach_service_port_info::mspi_domain_type"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_domain_type) - 255usize];
};
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options__bindgen_ty_1"]
        [::std::mem::size_of::<mach_port_options__bindgen_ty_1>() - 16usize];
    ["Alignment of mach_port_options__bindgen_ty_1"]
        [::std::mem::align_of::<mach_port_options__bindgen_ty_1>() - 8usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, reserved) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::work_interval_port"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, work_interval_port) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_info"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_info) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_name"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_name) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options"][::std::mem::size_of::<mach_port_options>() - 24usize];
    ["Alignment of mach_port_options"][::std::mem::align_of::<mach_port_options>() - 8usize];
    ["Offset of field: mach_port_options::flags"]
        [::std::mem::offset_of!(mach_port_options, flags) - 0usize];
    ["Offset of field: mach_port_options::mpl"]
        [::std::mem::offset_of!(mach_port_options, mpl) - 4usize];
};
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE:
    mach_port_guard_exception_codes = 6;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopSource {
    _unused: [u8; 0],
}
pub type CFRunLoopSourceRef = *mut __CFRunLoopSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopObserver {
    _unused: [u8; 0],
}
pub type CFRunLoopObserverRef = *mut __CFRunLoopObserver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopTimer {
    _unused: [u8; 0],
}
pub type CFRunLoopTimerRef = *mut __CFRunLoopTimer;
pub const CFRunLoopRunResult_kCFRunLoopRunFinished: CFRunLoopRunResult = 1;
pub const CFRunLoopRunResult_kCFRunLoopRunStopped: CFRunLoopRunResult = 2;
pub const CFRunLoopRunResult_kCFRunLoopRunTimedOut: CFRunLoopRunResult = 3;
pub const CFRunLoopRunResult_kCFRunLoopRunHandledSource: CFRunLoopRunResult = 4;
pub type CFRunLoopRunResult = SInt32;
pub const CFRunLoopActivity_kCFRunLoopEntry: CFRunLoopActivity = 1;
pub const CFRunLoopActivity_kCFRunLoopBeforeTimers: CFRunLoopActivity = 2;
pub const CFRunLoopActivity_kCFRunLoopBeforeSources: CFRunLoopActivity = 4;
pub const CFRunLoopActivity_kCFRunLoopBeforeWaiting: CFRunLoopActivity = 32;
pub const CFRunLoopActivity_kCFRunLoopAfterWaiting: CFRunLoopActivity = 64;
pub const CFRunLoopActivity_kCFRunLoopExit: CFRunLoopActivity = 128;
pub const CFRunLoopActivity_kCFRunLoopAllActivities: CFRunLoopActivity = 268435455;
pub type CFRunLoopActivity = CFOptionFlags;
unsafe extern "C" {
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
unsafe extern "C" {
    pub static kCFRunLoopCommonModes: CFRunLoopMode;
}
unsafe extern "C" {
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
}
unsafe extern "C" {
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
}
unsafe extern "C" {
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFRunLoopMode;
}
unsafe extern "C" {
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode);
}
unsafe extern "C" {
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) -> CFAbsoluteTime;
}
unsafe extern "C" {
    pub fn CFRunLoopRun();
}
unsafe extern "C" {
    pub fn CFRunLoopRunInMode(
        mode: CFRunLoopMode,
        seconds: CFTimeInterval,
        returnAfterSourceHandled: Boolean,
    ) -> CFRunLoopRunResult;
}
unsafe extern "C" {
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
}
unsafe extern "C" {
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
}
unsafe extern "C" {
    pub fn CFRunLoopPerformBlock(
        rl: CFRunLoopRef,
        mode: CFTypeRef,
        block: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFRunLoopContainsSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
unsafe extern "C" {
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
unsafe extern "C" {
    pub fn CFRunLoopContainsObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopAddObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
unsafe extern "C" {
    pub fn CFRunLoopRemoveObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
unsafe extern "C" {
    pub fn CFRunLoopContainsTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
unsafe extern "C" {
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub schedule: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub perform: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFRunLoopSourceContext"][::std::mem::size_of::<CFRunLoopSourceContext>() - 80usize];
    ["Alignment of CFRunLoopSourceContext"]
        [::std::mem::align_of::<CFRunLoopSourceContext>() - 8usize];
    ["Offset of field: CFRunLoopSourceContext::version"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, version) - 0usize];
    ["Offset of field: CFRunLoopSourceContext::info"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, info) - 8usize];
    ["Offset of field: CFRunLoopSourceContext::retain"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, retain) - 16usize];
    ["Offset of field: CFRunLoopSourceContext::release"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, release) - 24usize];
    ["Offset of field: CFRunLoopSourceContext::copyDescription"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, copyDescription) - 32usize];
    ["Offset of field: CFRunLoopSourceContext::equal"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, equal) - 40usize];
    ["Offset of field: CFRunLoopSourceContext::hash"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, hash) - 48usize];
    ["Offset of field: CFRunLoopSourceContext::schedule"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, schedule) - 56usize];
    ["Offset of field: CFRunLoopSourceContext::cancel"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, cancel) - 64usize];
    ["Offset of field: CFRunLoopSourceContext::perform"]
        [::std::mem::offset_of!(CFRunLoopSourceContext, perform) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub getPort: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *mut ::std::os::raw::c_void,
            size: CFIndex,
            allocator: CFAllocatorRef,
            info: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFRunLoopSourceContext1"][::std::mem::size_of::<CFRunLoopSourceContext1>() - 72usize];
    ["Alignment of CFRunLoopSourceContext1"]
        [::std::mem::align_of::<CFRunLoopSourceContext1>() - 8usize];
    ["Offset of field: CFRunLoopSourceContext1::version"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, version) - 0usize];
    ["Offset of field: CFRunLoopSourceContext1::info"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, info) - 8usize];
    ["Offset of field: CFRunLoopSourceContext1::retain"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, retain) - 16usize];
    ["Offset of field: CFRunLoopSourceContext1::release"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, release) - 24usize];
    ["Offset of field: CFRunLoopSourceContext1::copyDescription"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, copyDescription) - 32usize];
    ["Offset of field: CFRunLoopSourceContext1::equal"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, equal) - 40usize];
    ["Offset of field: CFRunLoopSourceContext1::hash"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, hash) - 48usize];
    ["Offset of field: CFRunLoopSourceContext1::getPort"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, getPort) - 56usize];
    ["Offset of field: CFRunLoopSourceContext1::perform"]
        [::std::mem::offset_of!(CFRunLoopSourceContext1, perform) - 64usize];
};
unsafe extern "C" {
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFRunLoopSourceCreate(
        allocator: CFAllocatorRef,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> CFRunLoopSourceRef;
}
unsafe extern "C" {
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
}
unsafe extern "C" {
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopSourceGetContext(
        source: CFRunLoopSourceRef,
        context: *mut CFRunLoopSourceContext,
    );
}
unsafe extern "C" {
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFRunLoopObserverContext"]
        [::std::mem::size_of::<CFRunLoopObserverContext>() - 40usize];
    ["Alignment of CFRunLoopObserverContext"]
        [::std::mem::align_of::<CFRunLoopObserverContext>() - 8usize];
    ["Offset of field: CFRunLoopObserverContext::version"]
        [::std::mem::offset_of!(CFRunLoopObserverContext, version) - 0usize];
    ["Offset of field: CFRunLoopObserverContext::info"]
        [::std::mem::offset_of!(CFRunLoopObserverContext, info) - 8usize];
    ["Offset of field: CFRunLoopObserverContext::retain"]
        [::std::mem::offset_of!(CFRunLoopObserverContext, retain) - 16usize];
    ["Offset of field: CFRunLoopObserverContext::release"]
        [::std::mem::offset_of!(CFRunLoopObserverContext, release) - 24usize];
    ["Offset of field: CFRunLoopObserverContext::copyDescription"]
        [::std::mem::offset_of!(CFRunLoopObserverContext, copyDescription) - 32usize];
};
pub type CFRunLoopObserverCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        observer: CFRunLoopObserverRef,
        activity: CFRunLoopActivity,
        info: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFRunLoopObserverCreate(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> CFRunLoopObserverRef;
}
unsafe extern "C" {
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopObserverRef;
}
unsafe extern "C" {
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) -> CFOptionFlags;
}
unsafe extern "C" {
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
}
unsafe extern "C" {
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopObserverGetContext(
        observer: CFRunLoopObserverRef,
        context: *mut CFRunLoopObserverContext,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFRunLoopTimerContext"][::std::mem::size_of::<CFRunLoopTimerContext>() - 40usize];
    ["Alignment of CFRunLoopTimerContext"]
        [::std::mem::align_of::<CFRunLoopTimerContext>() - 8usize];
    ["Offset of field: CFRunLoopTimerContext::version"]
        [::std::mem::offset_of!(CFRunLoopTimerContext, version) - 0usize];
    ["Offset of field: CFRunLoopTimerContext::info"]
        [::std::mem::offset_of!(CFRunLoopTimerContext, info) - 8usize];
    ["Offset of field: CFRunLoopTimerContext::retain"]
        [::std::mem::offset_of!(CFRunLoopTimerContext, retain) - 16usize];
    ["Offset of field: CFRunLoopTimerContext::release"]
        [::std::mem::offset_of!(CFRunLoopTimerContext, release) - 24usize];
    ["Offset of field: CFRunLoopTimerContext::copyDescription"]
        [::std::mem::offset_of!(CFRunLoopTimerContext, copyDescription) - 32usize];
};
pub type CFRunLoopTimerCallBack = ::std::option::Option<
    unsafe extern "C" fn(timer: CFRunLoopTimerRef, info: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerCreate(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> CFRunLoopTimerRef;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopTimerRef;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) -> CFAbsoluteTime;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime);
}
unsafe extern "C" {
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
}
unsafe extern "C" {
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: *mut CFRunLoopTimerContext);
}
unsafe extern "C" {
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
unsafe extern "C" {
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSocket {
    _unused: [u8; 0],
}
pub type CFSocketRef = *mut __CFSocket;
pub const CFSocketError_kCFSocketSuccess: CFSocketError = 0;
pub const CFSocketError_kCFSocketError: CFSocketError = -1;
pub const CFSocketError_kCFSocketTimeout: CFSocketError = -2;
pub type CFSocketError = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketSignature {
    pub protocolFamily: SInt32,
    pub socketType: SInt32,
    pub protocol: SInt32,
    pub address: CFDataRef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFSocketSignature"][::std::mem::size_of::<CFSocketSignature>() - 24usize];
    ["Alignment of CFSocketSignature"][::std::mem::align_of::<CFSocketSignature>() - 8usize];
    ["Offset of field: CFSocketSignature::protocolFamily"]
        [::std::mem::offset_of!(CFSocketSignature, protocolFamily) - 0usize];
    ["Offset of field: CFSocketSignature::socketType"]
        [::std::mem::offset_of!(CFSocketSignature, socketType) - 4usize];
    ["Offset of field: CFSocketSignature::protocol"]
        [::std::mem::offset_of!(CFSocketSignature, protocol) - 8usize];
    ["Offset of field: CFSocketSignature::address"]
        [::std::mem::offset_of!(CFSocketSignature, address) - 16usize];
};
pub const CFSocketCallBackType_kCFSocketNoCallBack: CFSocketCallBackType = 0;
pub const CFSocketCallBackType_kCFSocketReadCallBack: CFSocketCallBackType = 1;
pub const CFSocketCallBackType_kCFSocketAcceptCallBack: CFSocketCallBackType = 2;
pub const CFSocketCallBackType_kCFSocketDataCallBack: CFSocketCallBackType = 3;
pub const CFSocketCallBackType_kCFSocketConnectCallBack: CFSocketCallBackType = 4;
pub const CFSocketCallBackType_kCFSocketWriteCallBack: CFSocketCallBackType = 8;
pub type CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketAutomaticallyReenableReadCallBack: _bindgen_ty_11 = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: _bindgen_ty_11 = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: _bindgen_ty_11 = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: _bindgen_ty_11 = 8;
pub const kCFSocketLeaveErrors: _bindgen_ty_11 = 64;
pub const kCFSocketCloseOnInvalidate: _bindgen_ty_11 = 128;
pub type _bindgen_ty_11 = CFOptionFlags;
pub type CFSocketCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        s: CFSocketRef,
        type_: CFSocketCallBackType,
        address: CFDataRef,
        data: *const ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFSocketContext"][::std::mem::size_of::<CFSocketContext>() - 40usize];
    ["Alignment of CFSocketContext"][::std::mem::align_of::<CFSocketContext>() - 8usize];
    ["Offset of field: CFSocketContext::version"]
        [::std::mem::offset_of!(CFSocketContext, version) - 0usize];
    ["Offset of field: CFSocketContext::info"]
        [::std::mem::offset_of!(CFSocketContext, info) - 8usize];
    ["Offset of field: CFSocketContext::retain"]
        [::std::mem::offset_of!(CFSocketContext, retain) - 16usize];
    ["Offset of field: CFSocketContext::release"]
        [::std::mem::offset_of!(CFSocketContext, release) - 24usize];
    ["Offset of field: CFSocketContext::copyDescription"]
        [::std::mem::offset_of!(CFSocketContext, copyDescription) - 32usize];
};
pub type CFSocketNativeHandle = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn CFSocketGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFSocketCreate(
        allocator: CFAllocatorRef,
        protocolFamily: SInt32,
        socketType: SInt32,
        protocol: SInt32,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
unsafe extern "C" {
    pub fn CFSocketCreateWithNative(
        allocator: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
unsafe extern "C" {
    pub fn CFSocketCreateWithSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
unsafe extern "C" {
    pub fn CFSocketCreateConnectedToSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
        timeout: CFTimeInterval,
    ) -> CFSocketRef;
}
unsafe extern "C" {
    pub fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketConnectToAddress(
        s: CFSocketRef,
        address: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketInvalidate(s: CFSocketRef);
}
unsafe extern "C" {
    pub fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext);
}
unsafe extern "C" {
    pub fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
}
unsafe extern "C" {
    pub fn CFSocketCreateRunLoopSource(
        allocator: CFAllocatorRef,
        s: CFSocketRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
unsafe extern "C" {
    pub fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
}
unsafe extern "C" {
    pub fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags);
}
unsafe extern "C" {
    pub fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
unsafe extern "C" {
    pub fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
unsafe extern "C" {
    pub fn CFSocketSendData(
        s: CFSocketRef,
        address: CFDataRef,
        data: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketRegisterValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: CFPropertyListRef,
    ) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketCopyRegisteredValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: *mut CFPropertyListRef,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketRegisterSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *const CFSocketSignature,
    ) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketCopyRegisteredSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketUnregister(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
    ) -> CFSocketError;
}
unsafe extern "C" {
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16);
}
unsafe extern "C" {
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
}
unsafe extern "C" {
    pub static kCFSocketCommandKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFSocketNameKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFSocketValueKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFSocketResultKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFSocketErrorKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFSocketRegisterCommand: CFStringRef;
}
unsafe extern "C" {
    pub static kCFSocketRetrieveCommand: CFStringRef;
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of accessx_descriptor"][::std::mem::size_of::<accessx_descriptor>() - 16usize];
    ["Alignment of accessx_descriptor"][::std::mem::align_of::<accessx_descriptor>() - 4usize];
    ["Offset of field: accessx_descriptor::ad_name_offset"]
        [::std::mem::offset_of!(accessx_descriptor, ad_name_offset) - 0usize];
    ["Offset of field: accessx_descriptor::ad_flags"]
        [::std::mem::offset_of!(accessx_descriptor, ad_flags) - 4usize];
    ["Offset of field: accessx_descriptor::ad_pad"]
        [::std::mem::offset_of!(accessx_descriptor, ad_pad) - 8usize];
};
unsafe extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fork() -> pid_t;
}
unsafe extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getegid() -> gid_t;
}
unsafe extern "C" {
    pub fn geteuid() -> uid_t;
}
unsafe extern "C" {
    pub fn getgid() -> gid_t;
}
unsafe extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getpgrp() -> pid_t;
}
unsafe extern "C" {
    pub fn getpid() -> pid_t;
}
unsafe extern "C" {
    pub fn getppid() -> pid_t;
}
unsafe extern "C" {
    pub fn getuid() -> uid_t;
}
unsafe extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
unsafe extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsid() -> pid_t;
}
unsafe extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
unsafe extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
unsafe extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
unsafe extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn setpgrp() -> pid_t;
}
unsafe extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sync();
}
unsafe extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
unsafe extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type uuid_t = __darwin_uuid_t;
unsafe extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn endusershell();
}
unsafe extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
unsafe extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setusershell();
}
unsafe extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flock"][::std::mem::size_of::<flock>() - 24usize];
    ["Alignment of flock"][::std::mem::align_of::<flock>() - 8usize];
    ["Offset of field: flock::l_start"][::std::mem::offset_of!(flock, l_start) - 0usize];
    ["Offset of field: flock::l_len"][::std::mem::offset_of!(flock, l_len) - 8usize];
    ["Offset of field: flock::l_pid"][::std::mem::offset_of!(flock, l_pid) - 16usize];
    ["Offset of field: flock::l_type"][::std::mem::offset_of!(flock, l_type) - 20usize];
    ["Offset of field: flock::l_whence"][::std::mem::offset_of!(flock, l_whence) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flocktimeout"][::std::mem::size_of::<flocktimeout>() - 40usize];
    ["Alignment of flocktimeout"][::std::mem::align_of::<flocktimeout>() - 8usize];
    ["Offset of field: flocktimeout::fl"][::std::mem::offset_of!(flocktimeout, fl) - 0usize];
    ["Offset of field: flocktimeout::timeout"]
        [::std::mem::offset_of!(flocktimeout, timeout) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of radvisory"][::std::mem::size_of::<radvisory>() - 16usize];
    ["Alignment of radvisory"][::std::mem::align_of::<radvisory>() - 8usize];
    ["Offset of field: radvisory::ra_offset"]
        [::std::mem::offset_of!(radvisory, ra_offset) - 0usize];
    ["Offset of field: radvisory::ra_count"][::std::mem::offset_of!(radvisory, ra_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsignatures"][::std::mem::size_of::<fsignatures>() - 56usize];
    ["Alignment of fsignatures"][::std::mem::align_of::<fsignatures>() - 8usize];
    ["Offset of field: fsignatures::fs_file_start"]
        [::std::mem::offset_of!(fsignatures, fs_file_start) - 0usize];
    ["Offset of field: fsignatures::fs_blob_start"]
        [::std::mem::offset_of!(fsignatures, fs_blob_start) - 8usize];
    ["Offset of field: fsignatures::fs_blob_size"]
        [::std::mem::offset_of!(fsignatures, fs_blob_size) - 16usize];
    ["Offset of field: fsignatures::fs_fsignatures_size"]
        [::std::mem::offset_of!(fsignatures, fs_fsignatures_size) - 24usize];
    ["Offset of field: fsignatures::fs_cdhash"]
        [::std::mem::offset_of!(fsignatures, fs_cdhash) - 32usize];
    ["Offset of field: fsignatures::fs_hash_type"]
        [::std::mem::offset_of!(fsignatures, fs_hash_type) - 52usize];
};
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsupplement"][::std::mem::size_of::<fsupplement>() - 32usize];
    ["Alignment of fsupplement"][::std::mem::align_of::<fsupplement>() - 8usize];
    ["Offset of field: fsupplement::fs_file_start"]
        [::std::mem::offset_of!(fsupplement, fs_file_start) - 0usize];
    ["Offset of field: fsupplement::fs_blob_start"]
        [::std::mem::offset_of!(fsupplement, fs_blob_start) - 8usize];
    ["Offset of field: fsupplement::fs_blob_size"]
        [::std::mem::offset_of!(fsupplement, fs_blob_size) - 16usize];
    ["Offset of field: fsupplement::fs_orig_fd"]
        [::std::mem::offset_of!(fsupplement, fs_orig_fd) - 24usize];
};
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fchecklv"][::std::mem::size_of::<fchecklv>() - 24usize];
    ["Alignment of fchecklv"][::std::mem::align_of::<fchecklv>() - 8usize];
    ["Offset of field: fchecklv::lv_file_start"]
        [::std::mem::offset_of!(fchecklv, lv_file_start) - 0usize];
    ["Offset of field: fchecklv::lv_error_message_size"]
        [::std::mem::offset_of!(fchecklv, lv_error_message_size) - 8usize];
    ["Offset of field: fchecklv::lv_error_message"]
        [::std::mem::offset_of!(fchecklv, lv_error_message) - 16usize];
};
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fgetsigsinfo"][::std::mem::size_of::<fgetsigsinfo>() - 16usize];
    ["Alignment of fgetsigsinfo"][::std::mem::align_of::<fgetsigsinfo>() - 8usize];
    ["Offset of field: fgetsigsinfo::fg_file_start"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_file_start) - 0usize];
    ["Offset of field: fgetsigsinfo::fg_info_request"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_info_request) - 8usize];
    ["Offset of field: fgetsigsinfo::fg_sig_is_platform"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_sig_is_platform) - 12usize];
};
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fstore"][::std::mem::size_of::<fstore>() - 32usize];
    ["Alignment of fstore"][::std::mem::align_of::<fstore>() - 8usize];
    ["Offset of field: fstore::fst_flags"][::std::mem::offset_of!(fstore, fst_flags) - 0usize];
    ["Offset of field: fstore::fst_posmode"][::std::mem::offset_of!(fstore, fst_posmode) - 4usize];
    ["Offset of field: fstore::fst_offset"][::std::mem::offset_of!(fstore, fst_offset) - 8usize];
    ["Offset of field: fstore::fst_length"][::std::mem::offset_of!(fstore, fst_length) - 16usize];
    ["Offset of field: fstore::fst_bytesalloc"]
        [::std::mem::offset_of!(fstore, fst_bytesalloc) - 24usize];
};
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpunchhole"][::std::mem::size_of::<fpunchhole>() - 24usize];
    ["Alignment of fpunchhole"][::std::mem::align_of::<fpunchhole>() - 8usize];
    ["Offset of field: fpunchhole::fp_flags"]
        [::std::mem::offset_of!(fpunchhole, fp_flags) - 0usize];
    ["Offset of field: fpunchhole::reserved"]
        [::std::mem::offset_of!(fpunchhole, reserved) - 4usize];
    ["Offset of field: fpunchhole::fp_offset"]
        [::std::mem::offset_of!(fpunchhole, fp_offset) - 8usize];
    ["Offset of field: fpunchhole::fp_length"]
        [::std::mem::offset_of!(fpunchhole, fp_length) - 16usize];
};
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrimactivefile"][::std::mem::size_of::<ftrimactivefile>() - 16usize];
    ["Alignment of ftrimactivefile"][::std::mem::align_of::<ftrimactivefile>() - 8usize];
    ["Offset of field: ftrimactivefile::fta_offset"]
        [::std::mem::offset_of!(ftrimactivefile, fta_offset) - 0usize];
    ["Offset of field: ftrimactivefile::fta_length"]
        [::std::mem::offset_of!(ftrimactivefile, fta_length) - 8usize];
};
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fspecread"][::std::mem::size_of::<fspecread>() - 24usize];
    ["Alignment of fspecread"][::std::mem::align_of::<fspecread>() - 8usize];
    ["Offset of field: fspecread::fsr_flags"]
        [::std::mem::offset_of!(fspecread, fsr_flags) - 0usize];
    ["Offset of field: fspecread::reserved"][::std::mem::offset_of!(fspecread, reserved) - 4usize];
    ["Offset of field: fspecread::fsr_offset"]
        [::std::mem::offset_of!(fspecread, fsr_offset) - 8usize];
    ["Offset of field: fspecread::fsr_length"]
        [::std::mem::offset_of!(fspecread, fsr_length) - 16usize];
};
pub type fspecread_t = fspecread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fattributiontag {
    pub ft_flags: ::std::os::raw::c_uint,
    pub ft_hash: ::std::os::raw::c_ulonglong,
    pub ft_attribution_name: [::std::os::raw::c_char; 255usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fattributiontag"][::std::mem::size_of::<fattributiontag>() - 272usize];
    ["Alignment of fattributiontag"][::std::mem::align_of::<fattributiontag>() - 8usize];
    ["Offset of field: fattributiontag::ft_flags"]
        [::std::mem::offset_of!(fattributiontag, ft_flags) - 0usize];
    ["Offset of field: fattributiontag::ft_hash"]
        [::std::mem::offset_of!(fattributiontag, ft_hash) - 8usize];
    ["Offset of field: fattributiontag::ft_attribution_name"]
        [::std::mem::offset_of!(fattributiontag, ft_attribution_name) - 16usize];
};
pub type fattributiontag_t = fattributiontag;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of log2phys"][::std::mem::size_of::<log2phys>() - 20usize];
    ["Alignment of log2phys"][::std::mem::align_of::<log2phys>() - 4usize];
    ["Offset of field: log2phys::l2p_flags"][::std::mem::offset_of!(log2phys, l2p_flags) - 0usize];
    ["Offset of field: log2phys::l2p_contigbytes"]
        [::std::mem::offset_of!(log2phys, l2p_contigbytes) - 4usize];
    ["Offset of field: log2phys::l2p_devoffset"]
        [::std::mem::offset_of!(log2phys, l2p_devoffset) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_init() -> filesec_t;
}
unsafe extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
unsafe extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
unsafe extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_object(pub id);
impl std::ops::Deref for OS_object {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_object {}
impl OS_object {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_object), alloc) })
    }
}
impl INSObject for OS_object {}
impl PNSObject for OS_object {}
impl From<OS_object> for NSObject {
    fn from(child: OS_object) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_object {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_object, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_object)) };
        if is_kind_of {
            Ok(OS_object(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_object")
        }
    }
}
impl IOS_object for OS_object {}
pub trait IOS_object: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
}
unsafe extern "C" {
    pub fn os_retain(object: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn os_release(object: *mut ::std::os::raw::c_void);
}
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_attr_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 60usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of os_workgroup_attr_opaque_s"]
        [::std::mem::size_of::<os_workgroup_attr_opaque_s>() - 64usize];
    ["Alignment of os_workgroup_attr_opaque_s"]
        [::std::mem::align_of::<os_workgroup_attr_opaque_s>() - 4usize];
    ["Offset of field: os_workgroup_attr_opaque_s::sig"]
        [::std::mem::offset_of!(os_workgroup_attr_opaque_s, sig) - 0usize];
    ["Offset of field: os_workgroup_attr_opaque_s::opaque"]
        [::std::mem::offset_of!(os_workgroup_attr_opaque_s, opaque) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_interval_data_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of os_workgroup_interval_data_opaque_s"]
        [::std::mem::size_of::<os_workgroup_interval_data_opaque_s>() - 60usize];
    ["Alignment of os_workgroup_interval_data_opaque_s"]
        [::std::mem::align_of::<os_workgroup_interval_data_opaque_s>() - 4usize];
    ["Offset of field: os_workgroup_interval_data_opaque_s::sig"]
        [::std::mem::offset_of!(os_workgroup_interval_data_opaque_s, sig) - 0usize];
    ["Offset of field: os_workgroup_interval_data_opaque_s::opaque"]
        [::std::mem::offset_of!(os_workgroup_interval_data_opaque_s, opaque) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_join_token_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 36usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of os_workgroup_join_token_opaque_s"]
        [::std::mem::size_of::<os_workgroup_join_token_opaque_s>() - 40usize];
    ["Alignment of os_workgroup_join_token_opaque_s"]
        [::std::mem::align_of::<os_workgroup_join_token_opaque_s>() - 4usize];
    ["Offset of field: os_workgroup_join_token_opaque_s::sig"]
        [::std::mem::offset_of!(os_workgroup_join_token_opaque_s, sig) - 0usize];
    ["Offset of field: os_workgroup_join_token_opaque_s::opaque"]
        [::std::mem::offset_of!(os_workgroup_join_token_opaque_s, opaque) - 4usize];
};
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup(pub id);
impl std::ops::Deref for OS_os_workgroup {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup {}
impl OS_os_workgroup {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup), alloc) })
    }
}
impl IOS_object for OS_os_workgroup {}
impl From<OS_os_workgroup> for OS_object {
    fn from(child: OS_os_workgroup) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl INSObject for OS_os_workgroup {}
impl PNSObject for OS_os_workgroup {}
impl From<OS_os_workgroup> for NSObject {
    fn from(child: OS_os_workgroup) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl IOS_os_workgroup for OS_os_workgroup {}
pub trait IOS_os_workgroup: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
}
pub type os_workgroup_t = OS_os_workgroup;
pub type os_workgroup_attr_s = os_workgroup_attr_opaque_s;
pub type os_workgroup_attr_t = *mut os_workgroup_attr_opaque_s;
unsafe extern "C" {
    pub fn os_workgroup_copy_port(
        wg: OS_os_workgroup,
        mach_port_out: *mut mach_port_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn os_workgroup_create_with_port(
        name: *const ::std::os::raw::c_char,
        mach_port: mach_port_t,
    ) -> os_workgroup_t;
}
unsafe extern "C" {
    pub fn os_workgroup_create_with_workgroup(
        name: *const ::std::os::raw::c_char,
        wg: OS_os_workgroup,
    ) -> os_workgroup_t;
}
pub type os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
pub type os_workgroup_join_token_t = *mut os_workgroup_join_token_opaque_s;
unsafe extern "C" {
    pub fn os_workgroup_join(
        wg: OS_os_workgroup,
        token_out: os_workgroup_join_token_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn os_workgroup_leave(wg: OS_os_workgroup, token: os_workgroup_join_token_t);
}
pub type os_workgroup_index = u32;
pub type os_workgroup_working_arena_destructor_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn os_workgroup_set_working_arena(
        wg: OS_os_workgroup,
        arena: *mut ::std::os::raw::c_void,
        max_workers: u32,
        destructor: os_workgroup_working_arena_destructor_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn os_workgroup_get_working_arena(
        wg: OS_os_workgroup,
        index_out: *mut os_workgroup_index,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn os_workgroup_cancel(wg: OS_os_workgroup);
}
unsafe extern "C" {
    pub fn os_workgroup_testcancel(wg: OS_os_workgroup) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_max_parallel_threads_attr_s {
    _unused: [u8; 0],
}
pub type os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
pub type os_workgroup_mpt_attr_t = *mut os_workgroup_max_parallel_threads_attr_s;
unsafe extern "C" {
    pub fn os_workgroup_max_parallel_threads(
        wg: OS_os_workgroup,
        attr: os_workgroup_mpt_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_interval: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_interval(pub id);
impl std::ops::Deref for OS_os_workgroup_interval {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_interval {}
impl OS_os_workgroup_interval {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_interval), alloc) })
    }
}
impl POS_os_workgroup_interval for OS_os_workgroup_interval {}
impl IOS_os_workgroup for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_interval) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_object for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_object {
    fn from(child: OS_os_workgroup_interval) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl INSObject for OS_os_workgroup_interval {}
impl PNSObject for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for NSObject {
    fn from(child: OS_os_workgroup_interval) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_os_workgroup_interval for OS_os_workgroup_interval {}
pub trait IOS_os_workgroup_interval: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
}
pub type os_workgroup_interval_t = OS_os_workgroup;
pub type os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
pub type os_workgroup_interval_data_t = *mut os_workgroup_interval_data_opaque_s;
unsafe extern "C" {
    pub fn os_workgroup_interval_start(
        wg: OS_os_workgroup,
        start: u64,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn os_workgroup_interval_update(
        wg: OS_os_workgroup,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn os_workgroup_interval_finish(
        wg: OS_os_workgroup,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_parallel: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_parallel(pub id);
impl std::ops::Deref for OS_os_workgroup_parallel {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_parallel {}
impl OS_os_workgroup_parallel {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_parallel), alloc) })
    }
}
impl POS_os_workgroup_parallel for OS_os_workgroup_parallel {}
impl IOS_os_workgroup for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_parallel) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_object for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_object {
    fn from(child: OS_os_workgroup_parallel) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl INSObject for OS_os_workgroup_parallel {}
impl PNSObject for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for NSObject {
    fn from(child: OS_os_workgroup_parallel) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_os_workgroup_parallel for OS_os_workgroup_parallel {}
pub trait IOS_os_workgroup_parallel: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
}
pub type os_workgroup_parallel_t = OS_os_workgroup;
unsafe extern "C" {
    pub fn os_workgroup_parallel_create(
        name: *const ::std::os::raw::c_char,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_parallel_t;
}
pub type dispatch_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of time_value"][::std::mem::size_of::<time_value>() - 8usize];
    ["Alignment of time_value"][::std::mem::align_of::<time_value>() - 4usize];
    ["Offset of field: time_value::seconds"][::std::mem::offset_of!(time_value, seconds) - 0usize];
    ["Offset of field: time_value::microseconds"]
        [::std::mem::offset_of!(time_value, microseconds) - 4usize];
};
pub type time_value_t = time_value;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_timespec"][::std::mem::size_of::<mach_timespec>() - 8usize];
    ["Alignment of mach_timespec"][::std::mem::align_of::<mach_timespec>() - 4usize];
    ["Offset of field: mach_timespec::tv_sec"]
        [::std::mem::offset_of!(mach_timespec, tv_sec) - 0usize];
    ["Offset of field: mach_timespec::tv_nsec"]
        [::std::mem::offset_of!(mach_timespec, tv_nsec) - 4usize];
};
pub type mach_timespec_t = mach_timespec;
pub type dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: _bindgen_ty_12 = 18446744073709551614;
pub type _bindgen_ty_12 = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}
unsafe extern "C" {
    pub fn dispatch_walltime(when: *const timespec, delta: i64) -> dispatch_time_t;
}
pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: qos_class_t = 33;
pub const qos_class_t_QOS_CLASS_USER_INITIATED: qos_class_t = 25;
pub const qos_class_t_QOS_CLASS_DEFAULT: qos_class_t = 21;
pub const qos_class_t_QOS_CLASS_UTILITY: qos_class_t = 17;
pub const qos_class_t_QOS_CLASS_BACKGROUND: qos_class_t = 9;
pub const qos_class_t_QOS_CLASS_UNSPECIFIED: qos_class_t = 0;
pub type qos_class_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
unsafe extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
pub trait POS_dispatch_object: Sized + std::ops::Deref {}
pub type dispatch_object_t = NSObject;
pub type dispatch_block_t = *mut ::std::os::raw::c_void;
pub use self::qos_class_t as dispatch_qos_class_t;
unsafe extern "C" {
    pub fn dispatch_retain(object: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_release(object: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_get_context(object: NSObject) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn dispatch_set_context(object: NSObject, context: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn dispatch_set_finalizer_f(object: NSObject, finalizer: dispatch_function_t);
}
unsafe extern "C" {
    pub fn dispatch_activate(object: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_suspend(object: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_resume(object: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn dispatch_wait(object: *mut ::std::os::raw::c_void, timeout: dispatch_time_t) -> isize;
}
unsafe extern "C" {
    pub fn dispatch_notify(
        object: *mut ::std::os::raw::c_void,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_cancel(object: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn dispatch_testcancel(object: *mut ::std::os::raw::c_void) -> isize;
}
unsafe extern "C" {
    pub fn dispatch_debug(object: NSObject, message: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn dispatch_debugv(object: NSObject, message: *const ::std::os::raw::c_char, ap: va_list);
}
pub trait POS_dispatch_queue: Sized + std::ops::Deref {}
pub type dispatch_queue_t = NSObject;
pub trait POS_dispatch_queue_global: Sized + std::ops::Deref {}
pub type dispatch_queue_global_t = NSObject;
pub trait POS_dispatch_queue_serial_executor: Sized + std::ops::Deref {}
pub type dispatch_queue_serial_executor_t = NSObject;
pub trait POS_dispatch_queue_serial: Sized + std::ops::Deref {}
pub type dispatch_queue_serial_t = NSObject;
pub trait POS_dispatch_queue_main: Sized + std::ops::Deref {}
pub type dispatch_queue_main_t = NSObject;
pub trait POS_dispatch_queue_concurrent: Sized + std::ops::Deref {}
pub type dispatch_queue_concurrent_t = NSObject;
unsafe extern "C" {
    pub fn dispatch_async(queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_sync(queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_apply(iterations: usize, queue: NSObject, block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: ::std::option::Option<
            unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, iteration: usize),
        >,
    );
}
unsafe extern "C" {
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_s {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub static mut _dispatch_main_q: dispatch_queue_s;
}
pub type dispatch_queue_priority_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub fn dispatch_get_global_queue(identifier: isize, flags: usize) -> dispatch_queue_global_t;
}
pub trait POS_dispatch_queue_attr: Sized + std::ops::Deref {}
pub type dispatch_queue_attr_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_attr_s {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub static mut _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}
unsafe extern "C" {
    pub fn dispatch_queue_attr_make_initially_inactive(attr: NSObject) -> dispatch_queue_attr_t;
}
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_INHERIT:
    dispatch_autorelease_frequency_t = 0;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM:
    dispatch_autorelease_frequency_t = 1;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_NEVER:
    dispatch_autorelease_frequency_t = 2;
pub type dispatch_autorelease_frequency_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}
unsafe extern "C" {
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    ) -> dispatch_queue_attr_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_dispatch_queue_create_with_target$V2"]
    pub fn dispatch_queue_create_with_target(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
        target: NSObject,
    ) -> dispatch_queue_t;
}
unsafe extern "C" {
    pub fn dispatch_queue_create(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
    ) -> dispatch_queue_t;
}
unsafe extern "C" {
    pub fn dispatch_queue_get_label(queue: NSObject) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dispatch_queue_get_qos_class(
        queue: NSObject,
        relative_priority_ptr: *mut ::std::os::raw::c_int,
    ) -> dispatch_qos_class_t;
}
unsafe extern "C" {
    pub fn dispatch_set_target_queue(object: NSObject, queue: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_main() -> !;
}
unsafe extern "C" {
    pub fn dispatch_after(when: dispatch_time_t, queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_barrier_async(queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_barrier_sync(queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_barrier_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        destructor: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_queue_get_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn dispatch_get_specific(key: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue$V2"]
    pub fn dispatch_assert_queue(queue: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_assert_queue_barrier(queue: NSObject);
}
unsafe extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue_not$V2"]
    pub fn dispatch_assert_queue_not(queue: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_allow_send_signals(
        preserve_signum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const dispatch_block_flags_t_DISPATCH_BLOCK_BARRIER: dispatch_block_flags_t = 1;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_DETACHED: dispatch_block_flags_t = 2;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ASSIGN_CURRENT: dispatch_block_flags_t = 4;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_NO_QOS_CLASS: dispatch_block_flags_t = 8;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_INHERIT_QOS_CLASS: dispatch_block_flags_t = 16;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ENFORCE_QOS_CLASS: dispatch_block_flags_t = 32;
pub type dispatch_block_flags_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
unsafe extern "C" {
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
unsafe extern "C" {
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) -> isize;
}
unsafe extern "C" {
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_type_descriptor_t"]
        [::std::mem::size_of::<mach_msg_type_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_type_descriptor_t"]
        [::std::mem::align_of::<mach_msg_type_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad1) - 0usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad2"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad2) - 4usize];
};
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad3_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad3_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_port_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, name) - 0usize];
    ["Offset of field: mach_msg_port_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, pad1) - 4usize];
};
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad2_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad2_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, size) - 4usize];
};
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, size) - 12usize];
};
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, size) - 12usize];
};
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, count) - 4usize];
};
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, name) - 4usize];
};
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_descriptor_t"][::std::mem::size_of::<mach_msg_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_descriptor_t"]
        [::std::mem::align_of::<mach_msg_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_descriptor_t::port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, port) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::out_of_line"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, out_of_line) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::ool_ports"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, ool_ports) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::type_"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, type_) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::guarded_port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, guarded_port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_body_t"][::std::mem::size_of::<mach_msg_body_t>() - 4usize];
    ["Alignment of mach_msg_body_t"][::std::mem::align_of::<mach_msg_body_t>() - 4usize];
    ["Offset of field: mach_msg_body_t::msgh_descriptor_count"]
        [::std::mem::offset_of!(mach_msg_body_t, msgh_descriptor_count) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_header_t"][::std::mem::size_of::<mach_msg_header_t>() - 24usize];
    ["Alignment of mach_msg_header_t"][::std::mem::align_of::<mach_msg_header_t>() - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_bits"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_bits) - 0usize];
    ["Offset of field: mach_msg_header_t::msgh_size"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_size) - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_remote_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_remote_port) - 8usize];
    ["Offset of field: mach_msg_header_t::msgh_local_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_local_port) - 12usize];
    ["Offset of field: mach_msg_header_t::msgh_voucher_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_voucher_port) - 16usize];
    ["Offset of field: mach_msg_header_t::msgh_id"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_id) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_base_t"][::std::mem::size_of::<mach_msg_base_t>() - 28usize];
    ["Alignment of mach_msg_base_t"][::std::mem::align_of::<mach_msg_base_t>() - 4usize];
    ["Offset of field: mach_msg_base_t::header"]
        [::std::mem::offset_of!(mach_msg_base_t, header) - 0usize];
    ["Offset of field: mach_msg_base_t::body"]
        [::std::mem::offset_of!(mach_msg_base_t, body) - 24usize];
};
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_trailer_t"][::std::mem::size_of::<mach_msg_trailer_t>() - 8usize];
    ["Alignment of mach_msg_trailer_t"][::std::mem::align_of::<mach_msg_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_seqno_trailer_t"]
        [::std::mem::size_of::<mach_msg_seqno_trailer_t>() - 12usize];
    ["Alignment of mach_msg_seqno_trailer_t"]
        [::std::mem::align_of::<mach_msg_seqno_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_seqno) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of security_token_t"][::std::mem::size_of::<security_token_t>() - 8usize];
    ["Alignment of security_token_t"][::std::mem::align_of::<security_token_t>() - 4usize];
    ["Offset of field: security_token_t::val"]
        [::std::mem::offset_of!(security_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_security_trailer_t"]
        [::std::mem::size_of::<mach_msg_security_trailer_t>() - 20usize];
    ["Alignment of mach_msg_security_trailer_t"]
        [::std::mem::align_of::<mach_msg_security_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_sender) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of audit_token_t"][::std::mem::size_of::<audit_token_t>() - 32usize];
    ["Alignment of audit_token_t"][::std::mem::align_of::<audit_token_t>() - 4usize];
    ["Offset of field: audit_token_t::val"][::std::mem::offset_of!(audit_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_audit_trailer_t"]
        [::std::mem::size_of::<mach_msg_audit_trailer_t>() - 52usize];
    ["Alignment of mach_msg_audit_trailer_t"]
        [::std::mem::align_of::<mach_msg_audit_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_audit) - 20usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_context_trailer_t"]
        [::std::mem::size_of::<mach_msg_context_trailer_t>() - 60usize];
    ["Alignment of mach_msg_context_trailer_t"]
        [::std::mem::align_of::<mach_msg_context_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_context) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msg_labels_t"][::std::mem::size_of::<msg_labels_t>() - 4usize];
    ["Alignment of msg_labels_t"][::std::mem::align_of::<msg_labels_t>() - 4usize];
    ["Offset of field: msg_labels_t::sender"]
        [::std::mem::offset_of!(msg_labels_t, sender) - 0usize];
};
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_mac_trailer_t"][::std::mem::size_of::<mach_msg_mac_trailer_t>() - 68usize];
    ["Alignment of mach_msg_mac_trailer_t"]
        [::std::mem::align_of::<mach_msg_mac_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_context) - 52usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_ad"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_ad) - 60usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_labels"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_labels) - 64usize];
};
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
unsafe extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
unsafe extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_send_t"][::std::mem::size_of::<mach_msg_empty_send_t>() - 24usize];
    ["Alignment of mach_msg_empty_send_t"]
        [::std::mem::align_of::<mach_msg_empty_send_t>() - 4usize];
    ["Offset of field: mach_msg_empty_send_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_send_t, header) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_rcv_t"][::std::mem::size_of::<mach_msg_empty_rcv_t>() - 32usize];
    ["Alignment of mach_msg_empty_rcv_t"][::std::mem::align_of::<mach_msg_empty_rcv_t>() - 4usize];
    ["Offset of field: mach_msg_empty_rcv_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, header) - 0usize];
    ["Offset of field: mach_msg_empty_rcv_t::trailer"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, trailer) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_t"][::std::mem::size_of::<mach_msg_empty_t>() - 32usize];
    ["Alignment of mach_msg_empty_t"][::std::mem::align_of::<mach_msg_empty_t>() - 4usize];
    ["Offset of field: mach_msg_empty_t::send"]
        [::std::mem::offset_of!(mach_msg_empty_t, send) - 0usize];
    ["Offset of field: mach_msg_empty_t::rcv"]
        [::std::mem::offset_of!(mach_msg_empty_t, rcv) - 0usize];
};
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
unsafe extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub trait POS_dispatch_source: Sized + std::ops::Deref {}
pub type dispatch_source_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_source_type_s {
    _unused: [u8; 0],
}
pub type dispatch_source_type_t = *const dispatch_source_type_s;
unsafe extern "C" {
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}
unsafe extern "C" {
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}
pub type dispatch_source_mach_send_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_mach_recv_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_proc_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_vnode_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_timer_flags_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn dispatch_source_create(
        type_: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: NSObject,
    ) -> dispatch_source_t;
}
unsafe extern "C" {
    pub fn dispatch_source_set_event_handler(source: NSObject, handler: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_source_set_event_handler_f(source: NSObject, handler: dispatch_function_t);
}
unsafe extern "C" {
    pub fn dispatch_source_set_cancel_handler(source: NSObject, handler: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(source: NSObject, handler: dispatch_function_t);
}
unsafe extern "C" {
    pub fn dispatch_source_cancel(source: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_source_testcancel(source: NSObject) -> isize;
}
unsafe extern "C" {
    pub fn dispatch_source_get_handle(source: NSObject) -> usize;
}
unsafe extern "C" {
    pub fn dispatch_source_get_mask(source: NSObject) -> usize;
}
unsafe extern "C" {
    pub fn dispatch_source_get_data(source: NSObject) -> usize;
}
unsafe extern "C" {
    pub fn dispatch_source_merge_data(source: NSObject, value: usize);
}
unsafe extern "C" {
    pub fn dispatch_source_set_timer(
        source: NSObject,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}
unsafe extern "C" {
    pub fn dispatch_source_set_registration_handler(source: NSObject, handler: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: NSObject,
        handler: dispatch_function_t,
    );
}
pub trait POS_dispatch_group: Sized + std::ops::Deref {}
pub type dispatch_group_t = NSObject;
unsafe extern "C" {
    pub fn dispatch_group_create() -> dispatch_group_t;
}
unsafe extern "C" {
    pub fn dispatch_group_async(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_group_async_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_group_wait(group: NSObject, timeout: dispatch_time_t) -> isize;
}
unsafe extern "C" {
    pub fn dispatch_group_notify(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_group_notify_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_group_enter(group: NSObject);
}
unsafe extern "C" {
    pub fn dispatch_group_leave(group: NSObject);
}
pub trait POS_dispatch_semaphore: Sized + std::ops::Deref {}
pub type dispatch_semaphore_t = NSObject;
unsafe extern "C" {
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}
unsafe extern "C" {
    pub fn dispatch_semaphore_wait(dsema: NSObject, timeout: dispatch_time_t) -> isize;
}
unsafe extern "C" {
    pub fn dispatch_semaphore_signal(dsema: NSObject) -> isize;
}
pub type dispatch_once_t = isize;
unsafe extern "C" {
    pub fn dispatch_once(predicate: *mut dispatch_once_t, block: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_once_f(
        predicate: *mut dispatch_once_t,
        context: *mut ::std::os::raw::c_void,
        function: dispatch_function_t,
    );
}
pub trait POS_dispatch_data: Sized + std::ops::Deref {}
pub type dispatch_data_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_data_s {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub static mut _dispatch_data_empty: dispatch_data_s;
}
unsafe extern "C" {
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}
unsafe extern "C" {
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
unsafe extern "C" {
    pub fn dispatch_data_create(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        queue: NSObject,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}
unsafe extern "C" {
    pub fn dispatch_data_get_size(data: NSObject) -> usize;
}
unsafe extern "C" {
    pub fn dispatch_data_create_map(
        data: NSObject,
        buffer_ptr: *mut *const ::std::os::raw::c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}
unsafe extern "C" {
    pub fn dispatch_data_create_concat(data1: NSObject, data2: NSObject) -> dispatch_data_t;
}
unsafe extern "C" {
    pub fn dispatch_data_create_subrange(
        data: NSObject,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}
pub type dispatch_data_applier_t = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn dispatch_data_apply(data: NSObject, applier: dispatch_data_applier_t) -> bool;
}
unsafe extern "C" {
    pub fn dispatch_data_copy_region(
        data: NSObject,
        location: usize,
        offset_ptr: *mut usize,
    ) -> dispatch_data_t;
}
pub type dispatch_fd_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: NSObject,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
pub trait POS_dispatch_io: Sized + std::ops::Deref {}
pub type dispatch_io_t = NSObject;
pub type dispatch_io_type_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn dispatch_io_create(
        type_: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
unsafe extern "C" {
    pub fn dispatch_io_create_with_path(
        type_: dispatch_io_type_t,
        path: *const ::std::os::raw::c_char,
        oflag: ::std::os::raw::c_int,
        mode: mode_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
unsafe extern "C" {
    pub fn dispatch_io_create_with_io(
        type_: dispatch_io_type_t,
        io: NSObject,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
pub type dispatch_io_handler_t = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn dispatch_io_read(
        channel: NSObject,
        offset: off_t,
        length: usize,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_io_write(
        channel: NSObject,
        offset: off_t,
        data: NSObject,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
pub type dispatch_io_close_flags_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn dispatch_io_close(channel: NSObject, flags: dispatch_io_close_flags_t);
}
unsafe extern "C" {
    pub fn dispatch_io_barrier(channel: NSObject, barrier: dispatch_block_t);
}
unsafe extern "C" {
    pub fn dispatch_io_get_descriptor(channel: NSObject) -> dispatch_fd_t;
}
unsafe extern "C" {
    pub fn dispatch_io_set_high_water(channel: NSObject, high_water: usize);
}
unsafe extern "C" {
    pub fn dispatch_io_set_low_water(channel: NSObject, low_water: usize);
}
pub type dispatch_io_interval_flags_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub fn dispatch_io_set_interval(
        channel: NSObject,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}
pub trait POS_dispatch_workloop: Sized + std::ops::Deref {}
pub type dispatch_workloop_t = NSObject;
unsafe extern "C" {
    pub fn dispatch_workloop_create(label: *const ::std::os::raw::c_char) -> dispatch_workloop_t;
}
unsafe extern "C" {
    pub fn dispatch_workloop_create_inactive(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
unsafe extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    );
}
unsafe extern "C" {
    pub fn dispatch_workloop_set_os_workgroup(workloop: NSObject, workgroup: OS_os_workgroup);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamError {
    pub domain: CFIndex,
    pub error: SInt32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFStreamError"][::std::mem::size_of::<CFStreamError>() - 16usize];
    ["Alignment of CFStreamError"][::std::mem::align_of::<CFStreamError>() - 8usize];
    ["Offset of field: CFStreamError::domain"]
        [::std::mem::offset_of!(CFStreamError, domain) - 0usize];
    ["Offset of field: CFStreamError::error"]
        [::std::mem::offset_of!(CFStreamError, error) - 8usize];
};
pub type CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus_kCFStreamStatusNotOpen: CFStreamStatus = 0;
pub const CFStreamStatus_kCFStreamStatusOpening: CFStreamStatus = 1;
pub const CFStreamStatus_kCFStreamStatusOpen: CFStreamStatus = 2;
pub const CFStreamStatus_kCFStreamStatusReading: CFStreamStatus = 3;
pub const CFStreamStatus_kCFStreamStatusWriting: CFStreamStatus = 4;
pub const CFStreamStatus_kCFStreamStatusAtEnd: CFStreamStatus = 5;
pub const CFStreamStatus_kCFStreamStatusClosed: CFStreamStatus = 6;
pub const CFStreamStatus_kCFStreamStatusError: CFStreamStatus = 7;
pub type CFStreamStatus = CFIndex;
pub const CFStreamEventType_kCFStreamEventNone: CFStreamEventType = 0;
pub const CFStreamEventType_kCFStreamEventOpenCompleted: CFStreamEventType = 1;
pub const CFStreamEventType_kCFStreamEventHasBytesAvailable: CFStreamEventType = 2;
pub const CFStreamEventType_kCFStreamEventCanAcceptBytes: CFStreamEventType = 4;
pub const CFStreamEventType_kCFStreamEventErrorOccurred: CFStreamEventType = 8;
pub const CFStreamEventType_kCFStreamEventEndEncountered: CFStreamEventType = 16;
pub type CFStreamEventType = CFOptionFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFStreamClientContext"][::std::mem::size_of::<CFStreamClientContext>() - 40usize];
    ["Alignment of CFStreamClientContext"]
        [::std::mem::align_of::<CFStreamClientContext>() - 8usize];
    ["Offset of field: CFStreamClientContext::version"]
        [::std::mem::offset_of!(CFStreamClientContext, version) - 0usize];
    ["Offset of field: CFStreamClientContext::info"]
        [::std::mem::offset_of!(CFStreamClientContext, info) - 8usize];
    ["Offset of field: CFStreamClientContext::retain"]
        [::std::mem::offset_of!(CFStreamClientContext, retain) - 16usize];
    ["Offset of field: CFStreamClientContext::release"]
        [::std::mem::offset_of!(CFStreamClientContext, release) - 24usize];
    ["Offset of field: CFStreamClientContext::copyDescription"]
        [::std::mem::offset_of!(CFStreamClientContext, copyDescription) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFReadStream {
    _unused: [u8; 0],
}
pub type CFReadStreamRef = *mut __CFReadStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFWriteStream {
    _unused: [u8; 0],
}
pub type CFWriteStreamRef = *mut __CFWriteStream;
pub type CFReadStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFReadStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFWriteStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFWriteStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn CFReadStreamGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFWriteStreamGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertyDataWritten: CFStreamPropertyKey;
}
unsafe extern "C" {
    pub fn CFReadStreamCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFReadStreamRef;
}
unsafe extern "C" {
    pub fn CFWriteStreamCreateWithBuffer(
        alloc: CFAllocatorRef,
        buffer: *mut UInt8,
        bufferCapacity: CFIndex,
    ) -> CFWriteStreamRef;
}
unsafe extern "C" {
    pub fn CFWriteStreamCreateWithAllocatedBuffers(
        alloc: CFAllocatorRef,
        bufferAllocator: CFAllocatorRef,
    ) -> CFWriteStreamRef;
}
unsafe extern "C" {
    pub fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) -> CFReadStreamRef;
}
unsafe extern "C" {
    pub fn CFWriteStreamCreateWithFile(
        alloc: CFAllocatorRef,
        fileURL: CFURLRef,
    ) -> CFWriteStreamRef;
}
unsafe extern "C" {
    pub fn CFStreamCreateBoundPair(
        alloc: CFAllocatorRef,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
        transferBufferSize: CFIndex,
    );
}
unsafe extern "C" {
    pub static mut kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
}
unsafe extern "C" {
    pub static kCFStreamErrorDomainSOCKS: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySOCKSProxy: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyHost: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyPort: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySOCKSVersion: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion4: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion5: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySOCKSUser: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySOCKSPassword: CFStringRef;
}
unsafe extern "C" {
    pub static kCFStreamErrorDomainSSL: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertySocketSecurityLevel: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNone: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
}
unsafe extern "C" {
    pub static mut kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
}
unsafe extern "C" {
    pub fn CFStreamCreatePairWithSocket(
        alloc: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
unsafe extern "C" {
    pub fn CFStreamCreatePairWithSocketToHost(
        alloc: CFAllocatorRef,
        host: CFStringRef,
        port: UInt32,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
unsafe extern "C" {
    pub fn CFStreamCreatePairWithPeerSocketSignature(
        alloc: CFAllocatorRef,
        signature: *const CFSocketSignature,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
unsafe extern "C" {
    pub fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
}
unsafe extern "C" {
    pub fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
}
unsafe extern "C" {
    pub fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
}
unsafe extern "C" {
    pub fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
}
unsafe extern "C" {
    pub fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFReadStreamClose(stream: CFReadStreamRef);
}
unsafe extern "C" {
    pub fn CFWriteStreamClose(stream: CFWriteStreamRef);
}
unsafe extern "C" {
    pub fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFReadStreamRead(
        stream: CFReadStreamRef,
        buffer: *mut UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFReadStreamGetBuffer(
        stream: CFReadStreamRef,
        maxBytesToRead: CFIndex,
        numBytesRead: *mut CFIndex,
    ) -> *const UInt8;
}
unsafe extern "C" {
    pub fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFWriteStreamWrite(
        stream: CFWriteStreamRef,
        buffer: *const UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFReadStreamCopyProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFWriteStreamCopyProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFReadStreamSetProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFWriteStreamSetProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFReadStreamSetClient(
        stream: CFReadStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFReadStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFWriteStreamSetClient(
        stream: CFWriteStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFWriteStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
unsafe extern "C" {
    pub fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
unsafe extern "C" {
    pub fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
unsafe extern "C" {
    pub fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
unsafe extern "C" {
    pub fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: NSObject);
}
unsafe extern "C" {
    pub fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: NSObject);
}
unsafe extern "C" {
    pub fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) -> dispatch_queue_t;
}
unsafe extern "C" {
    pub fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) -> dispatch_queue_t;
}
pub const CFStreamErrorDomain_kCFStreamErrorDomainCustom: CFStreamErrorDomain = -1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainPOSIX: CFStreamErrorDomain = 1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainMacOSStatus: CFStreamErrorDomain = 2;
pub type CFStreamErrorDomain = CFIndex;
unsafe extern "C" {
    pub fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
}
unsafe extern "C" {
    pub fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
}
pub const CFPropertyListMutabilityOptions_kCFPropertyListImmutable:
    CFPropertyListMutabilityOptions = 0;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainers:
    CFPropertyListMutabilityOptions = 1;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainersAndLeaves:
    CFPropertyListMutabilityOptions = 2;
pub type CFPropertyListMutabilityOptions = CFOptionFlags;
unsafe extern "C" {
    pub fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        mutabilityOption: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
unsafe extern "C" {
    pub fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
    ) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        mutabilityOption: CFOptionFlags,
    ) -> CFPropertyListRef;
}
pub const CFPropertyListFormat_kCFPropertyListOpenStepFormat: CFPropertyListFormat = 1;
pub const CFPropertyListFormat_kCFPropertyListXMLFormat_v1_0: CFPropertyListFormat = 100;
pub const CFPropertyListFormat_kCFPropertyListBinaryFormat_v1_0: CFPropertyListFormat = 200;
pub type CFPropertyListFormat = CFIndex;
unsafe extern "C" {
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat)
        -> Boolean;
}
unsafe extern "C" {
    pub fn CFPropertyListWriteToStream(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        mutabilityOption: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
pub const kCFPropertyListReadCorruptError: _bindgen_ty_13 = 3840;
pub const kCFPropertyListReadUnknownVersionError: _bindgen_ty_13 = 3841;
pub const kCFPropertyListReadStreamError: _bindgen_ty_13 = 3842;
pub const kCFPropertyListWriteStreamError: _bindgen_ty_13 = 3851;
pub type _bindgen_ty_13 = CFIndex;
unsafe extern "C" {
    pub fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
unsafe extern "C" {
    pub fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
unsafe extern "C" {
    pub fn CFPropertyListWrite(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type CFSetRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFSetReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFSetCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFSetEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFSetHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSetCallBacks {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFSetCallBacks"][::std::mem::size_of::<CFSetCallBacks>() - 48usize];
    ["Alignment of CFSetCallBacks"][::std::mem::align_of::<CFSetCallBacks>() - 8usize];
    ["Offset of field: CFSetCallBacks::version"]
        [::std::mem::offset_of!(CFSetCallBacks, version) - 0usize];
    ["Offset of field: CFSetCallBacks::retain"]
        [::std::mem::offset_of!(CFSetCallBacks, retain) - 8usize];
    ["Offset of field: CFSetCallBacks::release"]
        [::std::mem::offset_of!(CFSetCallBacks, release) - 16usize];
    ["Offset of field: CFSetCallBacks::copyDescription"]
        [::std::mem::offset_of!(CFSetCallBacks, copyDescription) - 24usize];
    ["Offset of field: CFSetCallBacks::equal"]
        [::std::mem::offset_of!(CFSetCallBacks, equal) - 32usize];
    ["Offset of field: CFSetCallBacks::hash"]
        [::std::mem::offset_of!(CFSetCallBacks, hash) - 40usize];
};
unsafe extern "C" {
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
}
unsafe extern "C" {
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
}
pub type CFSetApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSet {
    _unused: [u8; 0],
}
pub type CFSetRef = *const __CFSet;
pub type CFMutableSetRef = *mut __CFSet;
unsafe extern "C" {
    pub fn CFSetGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFSetRef;
}
unsafe extern "C" {
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) -> CFSetRef;
}
unsafe extern "C" {
    pub fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFMutableSetRef;
}
unsafe extern "C" {
    pub fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theSet: CFSetRef,
    ) -> CFMutableSetRef;
}
unsafe extern "C" {
    pub fn CFSetGetCount(theSet: CFSetRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFSetGetCountOfValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFSetContainsValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
unsafe extern "C" {
    pub fn CFSetGetValue(
        theSet: CFSetRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFSetGetValueIfPresent(
        theSet: CFSetRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFSetGetValues(theSet: CFSetRef, values: *mut *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFSetApplyFunction(
        theSet: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFSetAddValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFSetReplaceValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFSetSetValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFSetRemoveValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CFSetRemoveAllValues(theSet: CFMutableSetRef);
}
pub const CFStringEncodings_kCFStringEncodingMacJapanese: CFStringEncodings = 1;
pub const CFStringEncodings_kCFStringEncodingMacChineseTrad: CFStringEncodings = 2;
pub const CFStringEncodings_kCFStringEncodingMacKorean: CFStringEncodings = 3;
pub const CFStringEncodings_kCFStringEncodingMacArabic: CFStringEncodings = 4;
pub const CFStringEncodings_kCFStringEncodingMacHebrew: CFStringEncodings = 5;
pub const CFStringEncodings_kCFStringEncodingMacGreek: CFStringEncodings = 6;
pub const CFStringEncodings_kCFStringEncodingMacCyrillic: CFStringEncodings = 7;
pub const CFStringEncodings_kCFStringEncodingMacDevanagari: CFStringEncodings = 9;
pub const CFStringEncodings_kCFStringEncodingMacGurmukhi: CFStringEncodings = 10;
pub const CFStringEncodings_kCFStringEncodingMacGujarati: CFStringEncodings = 11;
pub const CFStringEncodings_kCFStringEncodingMacOriya: CFStringEncodings = 12;
pub const CFStringEncodings_kCFStringEncodingMacBengali: CFStringEncodings = 13;
pub const CFStringEncodings_kCFStringEncodingMacTamil: CFStringEncodings = 14;
pub const CFStringEncodings_kCFStringEncodingMacTelugu: CFStringEncodings = 15;
pub const CFStringEncodings_kCFStringEncodingMacKannada: CFStringEncodings = 16;
pub const CFStringEncodings_kCFStringEncodingMacMalayalam: CFStringEncodings = 17;
pub const CFStringEncodings_kCFStringEncodingMacSinhalese: CFStringEncodings = 18;
pub const CFStringEncodings_kCFStringEncodingMacBurmese: CFStringEncodings = 19;
pub const CFStringEncodings_kCFStringEncodingMacKhmer: CFStringEncodings = 20;
pub const CFStringEncodings_kCFStringEncodingMacThai: CFStringEncodings = 21;
pub const CFStringEncodings_kCFStringEncodingMacLaotian: CFStringEncodings = 22;
pub const CFStringEncodings_kCFStringEncodingMacGeorgian: CFStringEncodings = 23;
pub const CFStringEncodings_kCFStringEncodingMacArmenian: CFStringEncodings = 24;
pub const CFStringEncodings_kCFStringEncodingMacChineseSimp: CFStringEncodings = 25;
pub const CFStringEncodings_kCFStringEncodingMacTibetan: CFStringEncodings = 26;
pub const CFStringEncodings_kCFStringEncodingMacMongolian: CFStringEncodings = 27;
pub const CFStringEncodings_kCFStringEncodingMacEthiopic: CFStringEncodings = 28;
pub const CFStringEncodings_kCFStringEncodingMacCentralEurRoman: CFStringEncodings = 29;
pub const CFStringEncodings_kCFStringEncodingMacVietnamese: CFStringEncodings = 30;
pub const CFStringEncodings_kCFStringEncodingMacExtArabic: CFStringEncodings = 31;
pub const CFStringEncodings_kCFStringEncodingMacSymbol: CFStringEncodings = 33;
pub const CFStringEncodings_kCFStringEncodingMacDingbats: CFStringEncodings = 34;
pub const CFStringEncodings_kCFStringEncodingMacTurkish: CFStringEncodings = 35;
pub const CFStringEncodings_kCFStringEncodingMacCroatian: CFStringEncodings = 36;
pub const CFStringEncodings_kCFStringEncodingMacIcelandic: CFStringEncodings = 37;
pub const CFStringEncodings_kCFStringEncodingMacRomanian: CFStringEncodings = 38;
pub const CFStringEncodings_kCFStringEncodingMacCeltic: CFStringEncodings = 39;
pub const CFStringEncodings_kCFStringEncodingMacGaelic: CFStringEncodings = 40;
pub const CFStringEncodings_kCFStringEncodingMacFarsi: CFStringEncodings = 140;
pub const CFStringEncodings_kCFStringEncodingMacUkrainian: CFStringEncodings = 152;
pub const CFStringEncodings_kCFStringEncodingMacInuit: CFStringEncodings = 236;
pub const CFStringEncodings_kCFStringEncodingMacVT100: CFStringEncodings = 252;
pub const CFStringEncodings_kCFStringEncodingMacHFS: CFStringEncodings = 255;
pub const CFStringEncodings_kCFStringEncodingISOLatin2: CFStringEncodings = 514;
pub const CFStringEncodings_kCFStringEncodingISOLatin3: CFStringEncodings = 515;
pub const CFStringEncodings_kCFStringEncodingISOLatin4: CFStringEncodings = 516;
pub const CFStringEncodings_kCFStringEncodingISOLatinCyrillic: CFStringEncodings = 517;
pub const CFStringEncodings_kCFStringEncodingISOLatinArabic: CFStringEncodings = 518;
pub const CFStringEncodings_kCFStringEncodingISOLatinGreek: CFStringEncodings = 519;
pub const CFStringEncodings_kCFStringEncodingISOLatinHebrew: CFStringEncodings = 520;
pub const CFStringEncodings_kCFStringEncodingISOLatin5: CFStringEncodings = 521;
pub const CFStringEncodings_kCFStringEncodingISOLatin6: CFStringEncodings = 522;
pub const CFStringEncodings_kCFStringEncodingISOLatinThai: CFStringEncodings = 523;
pub const CFStringEncodings_kCFStringEncodingISOLatin7: CFStringEncodings = 525;
pub const CFStringEncodings_kCFStringEncodingISOLatin8: CFStringEncodings = 526;
pub const CFStringEncodings_kCFStringEncodingISOLatin9: CFStringEncodings = 527;
pub const CFStringEncodings_kCFStringEncodingISOLatin10: CFStringEncodings = 528;
pub const CFStringEncodings_kCFStringEncodingDOSLatinUS: CFStringEncodings = 1024;
pub const CFStringEncodings_kCFStringEncodingDOSGreek: CFStringEncodings = 1029;
pub const CFStringEncodings_kCFStringEncodingDOSBalticRim: CFStringEncodings = 1030;
pub const CFStringEncodings_kCFStringEncodingDOSLatin1: CFStringEncodings = 1040;
pub const CFStringEncodings_kCFStringEncodingDOSGreek1: CFStringEncodings = 1041;
pub const CFStringEncodings_kCFStringEncodingDOSLatin2: CFStringEncodings = 1042;
pub const CFStringEncodings_kCFStringEncodingDOSCyrillic: CFStringEncodings = 1043;
pub const CFStringEncodings_kCFStringEncodingDOSTurkish: CFStringEncodings = 1044;
pub const CFStringEncodings_kCFStringEncodingDOSPortuguese: CFStringEncodings = 1045;
pub const CFStringEncodings_kCFStringEncodingDOSIcelandic: CFStringEncodings = 1046;
pub const CFStringEncodings_kCFStringEncodingDOSHebrew: CFStringEncodings = 1047;
pub const CFStringEncodings_kCFStringEncodingDOSCanadianFrench: CFStringEncodings = 1048;
pub const CFStringEncodings_kCFStringEncodingDOSArabic: CFStringEncodings = 1049;
pub const CFStringEncodings_kCFStringEncodingDOSNordic: CFStringEncodings = 1050;
pub const CFStringEncodings_kCFStringEncodingDOSRussian: CFStringEncodings = 1051;
pub const CFStringEncodings_kCFStringEncodingDOSGreek2: CFStringEncodings = 1052;
pub const CFStringEncodings_kCFStringEncodingDOSThai: CFStringEncodings = 1053;
pub const CFStringEncodings_kCFStringEncodingDOSJapanese: CFStringEncodings = 1056;
pub const CFStringEncodings_kCFStringEncodingDOSChineseSimplif: CFStringEncodings = 1057;
pub const CFStringEncodings_kCFStringEncodingDOSKorean: CFStringEncodings = 1058;
pub const CFStringEncodings_kCFStringEncodingDOSChineseTrad: CFStringEncodings = 1059;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin2: CFStringEncodings = 1281;
pub const CFStringEncodings_kCFStringEncodingWindowsCyrillic: CFStringEncodings = 1282;
pub const CFStringEncodings_kCFStringEncodingWindowsGreek: CFStringEncodings = 1283;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin5: CFStringEncodings = 1284;
pub const CFStringEncodings_kCFStringEncodingWindowsHebrew: CFStringEncodings = 1285;
pub const CFStringEncodings_kCFStringEncodingWindowsArabic: CFStringEncodings = 1286;
pub const CFStringEncodings_kCFStringEncodingWindowsBalticRim: CFStringEncodings = 1287;
pub const CFStringEncodings_kCFStringEncodingWindowsVietnamese: CFStringEncodings = 1288;
pub const CFStringEncodings_kCFStringEncodingWindowsKoreanJohab: CFStringEncodings = 1296;
pub const CFStringEncodings_kCFStringEncodingANSEL: CFStringEncodings = 1537;
pub const CFStringEncodings_kCFStringEncodingJIS_X0201_76: CFStringEncodings = 1568;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_83: CFStringEncodings = 1569;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_90: CFStringEncodings = 1570;
pub const CFStringEncodings_kCFStringEncodingJIS_X0212_90: CFStringEncodings = 1571;
pub const CFStringEncodings_kCFStringEncodingJIS_C6226_78: CFStringEncodings = 1572;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213: CFStringEncodings = 1576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_MenKuTen: CFStringEncodings = 1577;
pub const CFStringEncodings_kCFStringEncodingGB_2312_80: CFStringEncodings = 1584;
pub const CFStringEncodings_kCFStringEncodingGBK_95: CFStringEncodings = 1585;
pub const CFStringEncodings_kCFStringEncodingGB_18030_2000: CFStringEncodings = 1586;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_87: CFStringEncodings = 1600;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_92_Johab: CFStringEncodings = 1601;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P1: CFStringEncodings = 1617;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P2: CFStringEncodings = 1618;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P3: CFStringEncodings = 1619;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP: CFStringEncodings = 2080;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_2: CFStringEncodings = 2081;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_1: CFStringEncodings = 2082;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_3: CFStringEncodings = 2083;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN: CFStringEncodings = 2096;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN_EXT: CFStringEncodings = 2097;
pub const CFStringEncodings_kCFStringEncodingISO_2022_KR: CFStringEncodings = 2112;
pub const CFStringEncodings_kCFStringEncodingEUC_JP: CFStringEncodings = 2336;
pub const CFStringEncodings_kCFStringEncodingEUC_CN: CFStringEncodings = 2352;
pub const CFStringEncodings_kCFStringEncodingEUC_TW: CFStringEncodings = 2353;
pub const CFStringEncodings_kCFStringEncodingEUC_KR: CFStringEncodings = 2368;
pub const CFStringEncodings_kCFStringEncodingShiftJIS: CFStringEncodings = 2561;
pub const CFStringEncodings_kCFStringEncodingKOI8_R: CFStringEncodings = 2562;
pub const CFStringEncodings_kCFStringEncodingBig5: CFStringEncodings = 2563;
pub const CFStringEncodings_kCFStringEncodingMacRomanLatin1: CFStringEncodings = 2564;
pub const CFStringEncodings_kCFStringEncodingHZ_GB_2312: CFStringEncodings = 2565;
pub const CFStringEncodings_kCFStringEncodingBig5_HKSCS_1999: CFStringEncodings = 2566;
pub const CFStringEncodings_kCFStringEncodingVISCII: CFStringEncodings = 2567;
pub const CFStringEncodings_kCFStringEncodingKOI8_U: CFStringEncodings = 2568;
pub const CFStringEncodings_kCFStringEncodingBig5_E: CFStringEncodings = 2569;
pub const CFStringEncodings_kCFStringEncodingNextStepJapanese: CFStringEncodings = 2818;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_US: CFStringEncodings = 3073;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_CP037: CFStringEncodings = 3074;
pub const CFStringEncodings_kCFStringEncodingUTF7: CFStringEncodings = 67109120;
pub const CFStringEncodings_kCFStringEncodingUTF7_IMAP: CFStringEncodings = 2576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_00: CFStringEncodings = 1576;
pub type CFStringEncodings = CFIndex;
pub type CFTreeRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFTreeReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFTreeCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFTreeContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFTreeContext"][::std::mem::size_of::<CFTreeContext>() - 40usize];
    ["Alignment of CFTreeContext"][::std::mem::align_of::<CFTreeContext>() - 8usize];
    ["Offset of field: CFTreeContext::version"]
        [::std::mem::offset_of!(CFTreeContext, version) - 0usize];
    ["Offset of field: CFTreeContext::info"][::std::mem::offset_of!(CFTreeContext, info) - 8usize];
    ["Offset of field: CFTreeContext::retain"]
        [::std::mem::offset_of!(CFTreeContext, retain) - 16usize];
    ["Offset of field: CFTreeContext::release"]
        [::std::mem::offset_of!(CFTreeContext, release) - 24usize];
    ["Offset of field: CFTreeContext::copyDescription"]
        [::std::mem::offset_of!(CFTreeContext, copyDescription) - 32usize];
};
pub type CFTreeApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTree {
    _unused: [u8; 0],
}
pub type CFTreeRef = *mut __CFTree;
unsafe extern "C" {
    pub fn CFTreeGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFTreeCreate(allocator: CFAllocatorRef, context: *const CFTreeContext) -> CFTreeRef;
}
unsafe extern "C" {
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
}
unsafe extern "C" {
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
}
unsafe extern "C" {
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
}
unsafe extern "C" {
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}
unsafe extern "C" {
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
}
unsafe extern "C" {
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
}
unsafe extern "C" {
    pub fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
}
unsafe extern "C" {
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *const CFTreeContext);
}
unsafe extern "C" {
    pub fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef);
}
unsafe extern "C" {
    pub fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef);
}
unsafe extern "C" {
    pub fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef);
}
unsafe extern "C" {
    pub fn CFTreeRemove(tree: CFTreeRef);
}
unsafe extern "C" {
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef);
}
unsafe extern "C" {
    pub fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFURLCreateDataAndPropertiesFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        resourceData: *mut CFDataRef,
        properties: *mut CFDictionaryRef,
        desiredProperties: CFArrayRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLWriteDataAndPropertiesToResource(
        url: CFURLRef,
        dataToWrite: CFDataRef,
        propertiesToWrite: CFDictionaryRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLDestroyResource(url: CFURLRef, errorCode: *mut SInt32) -> Boolean;
}
unsafe extern "C" {
    pub fn CFURLCreatePropertyFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        property: CFStringRef,
        errorCode: *mut SInt32,
    ) -> CFTypeRef;
}
pub const CFURLError_kCFURLUnknownError: CFURLError = -10;
pub const CFURLError_kCFURLUnknownSchemeError: CFURLError = -11;
pub const CFURLError_kCFURLResourceNotFoundError: CFURLError = -12;
pub const CFURLError_kCFURLResourceAccessViolationError: CFURLError = -13;
pub const CFURLError_kCFURLRemoteHostUnavailableError: CFURLError = -14;
pub const CFURLError_kCFURLImproperArgumentsError: CFURLError = -15;
pub const CFURLError_kCFURLUnknownPropertyKeyError: CFURLError = -16;
pub const CFURLError_kCFURLPropertyKeyUnavailableError: CFURLError = -17;
pub const CFURLError_kCFURLTimeoutError: CFURLError = -18;
pub type CFURLError = CFIndex;
unsafe extern "C" {
    pub static kCFURLFileExists: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileDirectoryContents: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileLength: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileLastModificationTime: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFilePOSIXMode: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLFileOwnerID: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLHTTPStatusCode: CFStringRef;
}
unsafe extern "C" {
    pub static kCFURLHTTPStatusLine: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUUID {
    _unused: [u8; 0],
}
pub type CFUUIDRef = *const __CFUUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFUUIDBytes {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFUUIDBytes"][::std::mem::size_of::<CFUUIDBytes>() - 16usize];
    ["Alignment of CFUUIDBytes"][::std::mem::align_of::<CFUUIDBytes>() - 1usize];
    ["Offset of field: CFUUIDBytes::byte0"][::std::mem::offset_of!(CFUUIDBytes, byte0) - 0usize];
    ["Offset of field: CFUUIDBytes::byte1"][::std::mem::offset_of!(CFUUIDBytes, byte1) - 1usize];
    ["Offset of field: CFUUIDBytes::byte2"][::std::mem::offset_of!(CFUUIDBytes, byte2) - 2usize];
    ["Offset of field: CFUUIDBytes::byte3"][::std::mem::offset_of!(CFUUIDBytes, byte3) - 3usize];
    ["Offset of field: CFUUIDBytes::byte4"][::std::mem::offset_of!(CFUUIDBytes, byte4) - 4usize];
    ["Offset of field: CFUUIDBytes::byte5"][::std::mem::offset_of!(CFUUIDBytes, byte5) - 5usize];
    ["Offset of field: CFUUIDBytes::byte6"][::std::mem::offset_of!(CFUUIDBytes, byte6) - 6usize];
    ["Offset of field: CFUUIDBytes::byte7"][::std::mem::offset_of!(CFUUIDBytes, byte7) - 7usize];
    ["Offset of field: CFUUIDBytes::byte8"][::std::mem::offset_of!(CFUUIDBytes, byte8) - 8usize];
    ["Offset of field: CFUUIDBytes::byte9"][::std::mem::offset_of!(CFUUIDBytes, byte9) - 9usize];
    ["Offset of field: CFUUIDBytes::byte10"][::std::mem::offset_of!(CFUUIDBytes, byte10) - 10usize];
    ["Offset of field: CFUUIDBytes::byte11"][::std::mem::offset_of!(CFUUIDBytes, byte11) - 11usize];
    ["Offset of field: CFUUIDBytes::byte12"][::std::mem::offset_of!(CFUUIDBytes, byte12) - 12usize];
    ["Offset of field: CFUUIDBytes::byte13"][::std::mem::offset_of!(CFUUIDBytes, byte13) - 13usize];
    ["Offset of field: CFUUIDBytes::byte14"][::std::mem::offset_of!(CFUUIDBytes, byte14) - 14usize];
    ["Offset of field: CFUUIDBytes::byte15"][::std::mem::offset_of!(CFUUIDBytes, byte15) - 15usize];
};
unsafe extern "C" {
    pub fn CFUUIDGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
}
unsafe extern "C" {
    pub fn CFUUIDCreateWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
unsafe extern "C" {
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) -> CFUUIDRef;
}
unsafe extern "C" {
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFUUIDGetConstantUUIDWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
unsafe extern "C" {
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
}
unsafe extern "C" {
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) -> CFUUIDRef;
}
unsafe extern "C" {
    pub fn CFCopyHomeDirectoryURL() -> CFURLRef;
}
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBundle {
    _unused: [u8; 0],
}
pub type CFBundleRef = *mut __CFBundle;
pub type CFPlugInRef = *mut __CFBundle;
unsafe extern "C" {
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFBundleExecutableKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFBundleIdentifierKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFBundleVersionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFBundleNameKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFBundleLocalizationsKey: CFStringRef;
}
unsafe extern "C" {
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
}
unsafe extern "C" {
    pub fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) -> CFBundleRef;
}
unsafe extern "C" {
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) -> CFBundleRef;
}
unsafe extern "C" {
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directoryURL: CFURLRef,
        bundleType: CFStringRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef)
        -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    );
}
unsafe extern "C" {
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> UInt32;
}
unsafe extern "C" {
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        tableName: CFStringRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyResourceURLInDirectory(
        bundleURL: CFURLRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundleURL: CFURLRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyLocalizationsForPreferences(
        locArray: CFArrayRef,
        prefArray: CFArrayRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
}
pub const kCFBundleExecutableArchitectureI386: _bindgen_ty_14 = 7;
pub const kCFBundleExecutableArchitecturePPC: _bindgen_ty_14 = 18;
pub const kCFBundleExecutableArchitectureX86_64: _bindgen_ty_14 = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: _bindgen_ty_14 = 16777234;
pub const kCFBundleExecutableArchitectureARM64: _bindgen_ty_14 = 16777228;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef, error: *mut CFErrorRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef);
}
unsafe extern "C" {
    pub fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        functionName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        functionNames: CFArrayRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbolName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbolNames: CFArrayRef,
        stbl: *mut *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executableName: CFStringRef,
    ) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) -> Boolean;
}
unsafe extern "C" {
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
}
pub type CFBundleRefNum = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
}
unsafe extern "C" {
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        refNum: *mut CFBundleRefNum,
        localizedRefNum: *mut CFBundleRefNum,
    ) -> SInt32;
}
unsafe extern "C" {
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMessagePort {
    _unused: [u8; 0],
}
pub type CFMessagePortRef = *mut __CFMessagePort;
pub const kCFMessagePortSuccess: _bindgen_ty_15 = 0;
pub const kCFMessagePortSendTimeout: _bindgen_ty_15 = -1;
pub const kCFMessagePortReceiveTimeout: _bindgen_ty_15 = -2;
pub const kCFMessagePortIsInvalid: _bindgen_ty_15 = -3;
pub const kCFMessagePortTransportError: _bindgen_ty_15 = -4;
pub const kCFMessagePortBecameInvalidError: _bindgen_ty_15 = -5;
pub type _bindgen_ty_15 = SInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMessagePortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFMessagePortContext"][::std::mem::size_of::<CFMessagePortContext>() - 40usize];
    ["Alignment of CFMessagePortContext"][::std::mem::align_of::<CFMessagePortContext>() - 8usize];
    ["Offset of field: CFMessagePortContext::version"]
        [::std::mem::offset_of!(CFMessagePortContext, version) - 0usize];
    ["Offset of field: CFMessagePortContext::info"]
        [::std::mem::offset_of!(CFMessagePortContext, info) - 8usize];
    ["Offset of field: CFMessagePortContext::retain"]
        [::std::mem::offset_of!(CFMessagePortContext, retain) - 16usize];
    ["Offset of field: CFMessagePortContext::release"]
        [::std::mem::offset_of!(CFMessagePortContext, release) - 24usize];
    ["Offset of field: CFMessagePortContext::copyDescription"]
        [::std::mem::offset_of!(CFMessagePortContext, copyDescription) - 32usize];
};
pub type CFMessagePortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        local: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFMessagePortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(ms: CFMessagePortRef, info: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFMessagePortCreateLocal(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: CFMessagePortCallBack,
        context: *mut CFMessagePortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMessagePortRef;
}
unsafe extern "C" {
    pub fn CFMessagePortCreateRemote(
        allocator: CFAllocatorRef,
        name: CFStringRef,
    ) -> CFMessagePortRef;
}
unsafe extern "C" {
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef, context: *mut CFMessagePortContext);
}
unsafe extern "C" {
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef);
}
unsafe extern "C" {
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFMessagePortGetInvalidationCallBack(
        ms: CFMessagePortRef,
    ) -> CFMessagePortInvalidationCallBack;
}
unsafe extern "C" {
    pub fn CFMessagePortSetInvalidationCallBack(
        ms: CFMessagePortRef,
        callout: CFMessagePortInvalidationCallBack,
    );
}
unsafe extern "C" {
    pub fn CFMessagePortSendRequest(
        remote: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        sendTimeout: CFTimeInterval,
        rcvTimeout: CFTimeInterval,
        replyMode: CFStringRef,
        returnData: *mut CFDataRef,
    ) -> SInt32;
}
unsafe extern "C" {
    pub fn CFMessagePortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        local: CFMessagePortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
unsafe extern "C" {
    pub fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: NSObject);
}
unsafe extern "C" {
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPlugInFactoriesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFPlugInTypesKey: CFStringRef;
}
pub type CFPlugInDynamicRegisterFunction =
    ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInUnloadFunction = ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void,
>;
unsafe extern "C" {
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) -> CFPlugInRef;
}
unsafe extern "C" {
    pub fn CFPlugInGetBundle(plugIn: CFPlugInRef) -> CFBundleRef;
}
unsafe extern "C" {
    pub fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean);
}
unsafe extern "C" {
    pub fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        typeUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
    ) -> CFArrayRef;
}
unsafe extern "C" {
    pub fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factoryUUID: CFUUIDRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFPlugInRegisterFactoryFunction(
        factoryUUID: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factoryUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
        functionName: CFStringRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef);
}
unsafe extern "C" {
    pub fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFPlugInInstance {
    _unused: [u8; 0],
}
pub type CFPlugInInstanceRef = *mut __CFPlugInInstance;
pub type CFPlugInInstanceGetInterfaceFunction = ::std::option::Option<
    unsafe extern "C" fn(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    ::std::option::Option<unsafe extern "C" fn(instanceData: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFPlugInInstanceGetInstanceData(
        instance: CFPlugInInstanceRef,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instanceDataSize: CFIndex,
        deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction,
        factoryName: CFStringRef,
        getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMachPort {
    _unused: [u8; 0],
}
pub type CFMachPortRef = *mut __CFMachPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMachPortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFMachPortContext"][::std::mem::size_of::<CFMachPortContext>() - 40usize];
    ["Alignment of CFMachPortContext"][::std::mem::align_of::<CFMachPortContext>() - 8usize];
    ["Offset of field: CFMachPortContext::version"]
        [::std::mem::offset_of!(CFMachPortContext, version) - 0usize];
    ["Offset of field: CFMachPortContext::info"]
        [::std::mem::offset_of!(CFMachPortContext, info) - 8usize];
    ["Offset of field: CFMachPortContext::retain"]
        [::std::mem::offset_of!(CFMachPortContext, retain) - 16usize];
    ["Offset of field: CFMachPortContext::release"]
        [::std::mem::offset_of!(CFMachPortContext, release) - 24usize];
    ["Offset of field: CFMachPortContext::copyDescription"]
        [::std::mem::offset_of!(CFMachPortContext, copyDescription) - 32usize];
};
pub type CFMachPortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        port: CFMachPortRef,
        msg: *mut ::std::os::raw::c_void,
        size: CFIndex,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFMachPortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(port: CFMachPortRef, info: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    pub fn CFMachPortGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFMachPortCreate(
        allocator: CFAllocatorRef,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
unsafe extern "C" {
    pub fn CFMachPortCreateWithPort(
        allocator: CFAllocatorRef,
        portNum: mach_port_t,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
unsafe extern "C" {
    pub fn CFMachPortGetPort(port: CFMachPortRef) -> mach_port_t;
}
unsafe extern "C" {
    pub fn CFMachPortGetContext(port: CFMachPortRef, context: *mut CFMachPortContext);
}
unsafe extern "C" {
    pub fn CFMachPortInvalidate(port: CFMachPortRef);
}
unsafe extern "C" {
    pub fn CFMachPortIsValid(port: CFMachPortRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef)
        -> CFMachPortInvalidationCallBack;
}
unsafe extern "C" {
    pub fn CFMachPortSetInvalidationCallBack(
        port: CFMachPortRef,
        callout: CFMachPortInvalidationCallBack,
    );
}
unsafe extern "C" {
    pub fn CFMachPortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        port: CFMachPortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAttributedString {
    _unused: [u8; 0],
}
pub type CFAttributedStringRef = *const __CFAttributedString;
pub type CFMutableAttributedStringRef = *mut __CFAttributedString;
unsafe extern "C" {
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFAttributedStringCreate(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        attributes: CFDictionaryRef,
    ) -> CFAttributedStringRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
        range: CFRange,
    ) -> CFAttributedStringRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringCreateCopy(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
    ) -> CFAttributedStringRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringGetString(aStr: CFAttributedStringRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFAttributedStringGetAttributes(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        effectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringGetAttribute(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        effectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        aStr: CFAttributedStringRef,
    ) -> CFMutableAttributedStringRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringCreateMutable(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
    ) -> CFMutableAttributedStringRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringReplaceString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFAttributedStringGetMutableString(
        aStr: CFMutableAttributedStringRef,
    ) -> CFMutableStringRef;
}
unsafe extern "C" {
    pub fn CFAttributedStringSetAttributes(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFDictionaryRef,
        clearOtherAttributes: Boolean,
    );
}
unsafe extern "C" {
    pub fn CFAttributedStringSetAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
        value: CFTypeRef,
    );
}
unsafe extern "C" {
    pub fn CFAttributedStringRemoveAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFAttributedStringReplaceAttributedString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFAttributedStringRef,
    );
}
unsafe extern "C" {
    pub fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef);
}
unsafe extern "C" {
    pub fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURLEnumerator {
    _unused: [u8; 0],
}
pub type CFURLEnumeratorRef = *const __CFURLEnumerator;
unsafe extern "C" {
    pub fn CFURLEnumeratorGetTypeID() -> CFTypeID;
}
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDefaultBehavior: CFURLEnumeratorOptions = 0;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDescendRecursively: CFURLEnumeratorOptions = 1;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipInvisibles: CFURLEnumeratorOptions = 2;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateFileReferenceURLs: CFURLEnumeratorOptions =
    4;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipPackageContents: CFURLEnumeratorOptions = 8;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPreOrder:
    CFURLEnumeratorOptions = 16;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPostOrder:
    CFURLEnumeratorOptions = 32;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateRelativePathURLs: CFURLEnumeratorOptions =
    64;
pub type CFURLEnumeratorOptions = CFOptionFlags;
unsafe extern "C" {
    pub fn CFURLEnumeratorCreateForDirectoryURL(
        alloc: CFAllocatorRef,
        directoryURL: CFURLRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
unsafe extern "C" {
    pub fn CFURLEnumeratorCreateForMountedVolumes(
        alloc: CFAllocatorRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
pub const CFURLEnumeratorResult_kCFURLEnumeratorSuccess: CFURLEnumeratorResult = 1;
pub const CFURLEnumeratorResult_kCFURLEnumeratorEnd: CFURLEnumeratorResult = 2;
pub const CFURLEnumeratorResult_kCFURLEnumeratorError: CFURLEnumeratorResult = 3;
pub const CFURLEnumeratorResult_kCFURLEnumeratorDirectoryPostOrderSuccess: CFURLEnumeratorResult =
    4;
pub type CFURLEnumeratorResult = CFIndex;
unsafe extern "C" {
    pub fn CFURLEnumeratorGetNextURL(
        enumerator: CFURLEnumeratorRef,
        url: *mut CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLEnumeratorResult;
}
unsafe extern "C" {
    pub fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef);
}
unsafe extern "C" {
    pub fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) -> Boolean;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union guid_t {
    pub g_guid: [::std::os::raw::c_uchar; 16usize],
    pub g_guid_asint: [::std::os::raw::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of guid_t"][::std::mem::size_of::<guid_t>() - 16usize];
    ["Alignment of guid_t"][::std::mem::align_of::<guid_t>() - 4usize];
    ["Offset of field: guid_t::g_guid"][::std::mem::offset_of!(guid_t, g_guid) - 0usize];
    ["Offset of field: guid_t::g_guid_asint"]
        [::std::mem::offset_of!(guid_t, g_guid_asint) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ntsid_t {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ntsid_t"][::std::mem::size_of::<ntsid_t>() - 72usize];
    ["Alignment of ntsid_t"][::std::mem::align_of::<ntsid_t>() - 1usize];
    ["Offset of field: ntsid_t::sid_kind"][::std::mem::offset_of!(ntsid_t, sid_kind) - 0usize];
    ["Offset of field: ntsid_t::sid_authcount"]
        [::std::mem::offset_of!(ntsid_t, sid_authcount) - 1usize];
    ["Offset of field: ntsid_t::sid_authority"]
        [::std::mem::offset_of!(ntsid_t, sid_authority) - 2usize];
    ["Offset of field: ntsid_t::sid_authorities"]
        [::std::mem::offset_of!(ntsid_t, sid_authorities) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kauth_identity_extlookup"]
        [::std::mem::size_of::<kauth_identity_extlookup>() - 304usize];
    ["Alignment of kauth_identity_extlookup"]
        [::std::mem::align_of::<kauth_identity_extlookup>() - 8usize];
    ["Offset of field: kauth_identity_extlookup::el_seqno"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_seqno) - 0usize];
    ["Offset of field: kauth_identity_extlookup::el_result"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_result) - 4usize];
    ["Offset of field: kauth_identity_extlookup::el_flags"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_flags) - 8usize];
    ["Offset of field: kauth_identity_extlookup::el_info_pid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_info_pid) - 12usize];
    ["Offset of field: kauth_identity_extlookup::el_extend"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_extend) - 16usize];
    ["Offset of field: kauth_identity_extlookup::el_info_reserved_1"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_info_reserved_1) - 24usize];
    ["Offset of field: kauth_identity_extlookup::el_uid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_uid) - 28usize];
    ["Offset of field: kauth_identity_extlookup::el_uguid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_uguid) - 32usize];
    ["Offset of field: kauth_identity_extlookup::el_uguid_valid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_uguid_valid) - 48usize];
    ["Offset of field: kauth_identity_extlookup::el_usid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_usid) - 52usize];
    ["Offset of field: kauth_identity_extlookup::el_usid_valid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_usid_valid) - 124usize];
    ["Offset of field: kauth_identity_extlookup::el_gid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_gid) - 128usize];
    ["Offset of field: kauth_identity_extlookup::el_gguid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_gguid) - 132usize];
    ["Offset of field: kauth_identity_extlookup::el_gguid_valid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_gguid_valid) - 148usize];
    ["Offset of field: kauth_identity_extlookup::el_gsid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_gsid) - 152usize];
    ["Offset of field: kauth_identity_extlookup::el_gsid_valid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_gsid_valid) - 224usize];
    ["Offset of field: kauth_identity_extlookup::el_member_valid"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_member_valid) - 228usize];
    ["Offset of field: kauth_identity_extlookup::el_sup_grp_cnt"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_sup_grp_cnt) - 232usize];
    ["Offset of field: kauth_identity_extlookup::el_sup_groups"]
        [::std::mem::offset_of!(kauth_identity_extlookup, el_sup_groups) - 236usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kauth_cache_sizes"][::std::mem::size_of::<kauth_cache_sizes>() - 8usize];
    ["Alignment of kauth_cache_sizes"][::std::mem::align_of::<kauth_cache_sizes>() - 4usize];
    ["Offset of field: kauth_cache_sizes::kcs_group_size"]
        [::std::mem::offset_of!(kauth_cache_sizes, kcs_group_size) - 0usize];
    ["Offset of field: kauth_cache_sizes::kcs_id_size"]
        [::std::mem::offset_of!(kauth_cache_sizes, kcs_id_size) - 4usize];
};
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kauth_ace"][::std::mem::size_of::<kauth_ace>() - 24usize];
    ["Alignment of kauth_ace"][::std::mem::align_of::<kauth_ace>() - 4usize];
    ["Offset of field: kauth_ace::ace_applicable"]
        [::std::mem::offset_of!(kauth_ace, ace_applicable) - 0usize];
    ["Offset of field: kauth_ace::ace_flags"]
        [::std::mem::offset_of!(kauth_ace, ace_flags) - 16usize];
    ["Offset of field: kauth_ace::ace_rights"]
        [::std::mem::offset_of!(kauth_ace, ace_rights) - 20usize];
};
pub type kauth_ace_t = *mut kauth_ace;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [kauth_ace; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kauth_acl"][::std::mem::size_of::<kauth_acl>() - 32usize];
    ["Alignment of kauth_acl"][::std::mem::align_of::<kauth_acl>() - 4usize];
    ["Offset of field: kauth_acl::acl_entrycount"]
        [::std::mem::offset_of!(kauth_acl, acl_entrycount) - 0usize];
    ["Offset of field: kauth_acl::acl_flags"]
        [::std::mem::offset_of!(kauth_acl, acl_flags) - 4usize];
    ["Offset of field: kauth_acl::acl_ace"][::std::mem::offset_of!(kauth_acl, acl_ace) - 8usize];
};
pub type kauth_acl_t = *mut kauth_acl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: kauth_acl,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kauth_filesec"][::std::mem::size_of::<kauth_filesec>() - 68usize];
    ["Alignment of kauth_filesec"][::std::mem::align_of::<kauth_filesec>() - 4usize];
    ["Offset of field: kauth_filesec::fsec_magic"]
        [::std::mem::offset_of!(kauth_filesec, fsec_magic) - 0usize];
    ["Offset of field: kauth_filesec::fsec_owner"]
        [::std::mem::offset_of!(kauth_filesec, fsec_owner) - 4usize];
    ["Offset of field: kauth_filesec::fsec_group"]
        [::std::mem::offset_of!(kauth_filesec, fsec_group) - 20usize];
    ["Offset of field: kauth_filesec::fsec_acl"]
        [::std::mem::offset_of!(kauth_filesec, fsec_acl) - 36usize];
};
pub type kauth_filesec_t = *mut kauth_filesec;
pub const acl_perm_t_ACL_READ_DATA: acl_perm_t = 2;
pub const acl_perm_t_ACL_LIST_DIRECTORY: acl_perm_t = 2;
pub const acl_perm_t_ACL_WRITE_DATA: acl_perm_t = 4;
pub const acl_perm_t_ACL_ADD_FILE: acl_perm_t = 4;
pub const acl_perm_t_ACL_EXECUTE: acl_perm_t = 8;
pub const acl_perm_t_ACL_SEARCH: acl_perm_t = 8;
pub const acl_perm_t_ACL_DELETE: acl_perm_t = 16;
pub const acl_perm_t_ACL_APPEND_DATA: acl_perm_t = 32;
pub const acl_perm_t_ACL_ADD_SUBDIRECTORY: acl_perm_t = 32;
pub const acl_perm_t_ACL_DELETE_CHILD: acl_perm_t = 64;
pub const acl_perm_t_ACL_READ_ATTRIBUTES: acl_perm_t = 128;
pub const acl_perm_t_ACL_WRITE_ATTRIBUTES: acl_perm_t = 256;
pub const acl_perm_t_ACL_READ_EXTATTRIBUTES: acl_perm_t = 512;
pub const acl_perm_t_ACL_WRITE_EXTATTRIBUTES: acl_perm_t = 1024;
pub const acl_perm_t_ACL_READ_SECURITY: acl_perm_t = 2048;
pub const acl_perm_t_ACL_WRITE_SECURITY: acl_perm_t = 4096;
pub const acl_perm_t_ACL_CHANGE_OWNER: acl_perm_t = 8192;
pub const acl_perm_t_ACL_SYNCHRONIZE: acl_perm_t = 1048576;
pub type acl_perm_t = ::std::os::raw::c_uint;
pub const acl_tag_t_ACL_UNDEFINED_TAG: acl_tag_t = 0;
pub const acl_tag_t_ACL_EXTENDED_ALLOW: acl_tag_t = 1;
pub const acl_tag_t_ACL_EXTENDED_DENY: acl_tag_t = 2;
pub type acl_tag_t = ::std::os::raw::c_uint;
pub const acl_type_t_ACL_TYPE_EXTENDED: acl_type_t = 256;
pub const acl_type_t_ACL_TYPE_ACCESS: acl_type_t = 0;
pub const acl_type_t_ACL_TYPE_DEFAULT: acl_type_t = 1;
pub const acl_type_t_ACL_TYPE_AFS: acl_type_t = 2;
pub const acl_type_t_ACL_TYPE_CODA: acl_type_t = 3;
pub const acl_type_t_ACL_TYPE_NTFS: acl_type_t = 4;
pub const acl_type_t_ACL_TYPE_NWFS: acl_type_t = 5;
pub type acl_type_t = ::std::os::raw::c_uint;
pub const acl_entry_id_t_ACL_FIRST_ENTRY: acl_entry_id_t = 0;
pub const acl_entry_id_t_ACL_NEXT_ENTRY: acl_entry_id_t = -1;
pub const acl_entry_id_t_ACL_LAST_ENTRY: acl_entry_id_t = -2;
pub type acl_entry_id_t = ::std::os::raw::c_int;
pub const acl_flag_t_ACL_FLAG_DEFER_INHERIT: acl_flag_t = 1;
pub const acl_flag_t_ACL_FLAG_NO_INHERIT: acl_flag_t = 131072;
pub const acl_flag_t_ACL_ENTRY_INHERITED: acl_flag_t = 16;
pub const acl_flag_t_ACL_ENTRY_FILE_INHERIT: acl_flag_t = 32;
pub const acl_flag_t_ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t = 64;
pub const acl_flag_t_ACL_ENTRY_LIMIT_INHERIT: acl_flag_t = 128;
pub const acl_flag_t_ACL_ENTRY_ONLY_INHERIT: acl_flag_t = 256;
pub type acl_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_permset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_flagset {
    _unused: [u8; 0],
}
pub type acl_t = *mut _acl;
pub type acl_entry_t = *mut _acl_entry;
pub type acl_permset_t = *mut _acl_permset;
pub type acl_flagset_t = *mut _acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
unsafe extern "C" {
    pub fn acl_dup(acl: acl_t) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_free(obj_p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_init(count: ::std::os::raw::c_int) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_create_entry_np(
        acl_p: *mut acl_t,
        entry_p: *mut acl_entry_t,
        entry_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_entry(
        acl: acl_t,
        entry_id: ::std::os::raw::c_int,
        entry_p: *mut acl_entry_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_valid(acl: acl_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_valid_fd_np(
        fd: ::std::os::raw::c_int,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_valid_file_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_valid_link_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_permset(
        entry_d: acl_entry_t,
        permset_p: *mut acl_permset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_permset_mask_np(
        entry_d: acl_entry_t,
        mask_p: *mut acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_permset_mask_np(
        entry_d: acl_entry_t,
        mask: acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_p: *mut acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_d: acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn acl_get_tag_type(
        entry_d: acl_entry_t,
        tag_type_p: *mut acl_tag_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_qualifier(
        entry_d: acl_entry_t,
        tag_qualifier_p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_delete_def_file(path_p: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_get_fd(fd: ::std::os::raw::c_int) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_get_fd_np(fd: ::std::os::raw::c_int, type_: acl_type_t) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_get_file(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_get_link_np(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_set_fd(fd: ::std::os::raw::c_int, acl: acl_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_fd_np(
        fd: ::std::os::raw::c_int,
        acl: acl_t,
        acl_type: acl_type_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_file(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_set_link_np(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acl_copy_ext(buf_p: *mut ::std::os::raw::c_void, acl: acl_t, size: isize) -> isize;
}
unsafe extern "C" {
    pub fn acl_copy_ext_native(
        buf_p: *mut ::std::os::raw::c_void,
        acl: acl_t,
        size: isize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn acl_copy_int(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_copy_int_native(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_from_text(buf_p: *const ::std::os::raw::c_char) -> acl_t;
}
unsafe extern "C" {
    pub fn acl_size(acl: acl_t) -> isize;
}
unsafe extern "C" {
    pub fn acl_to_text(acl: acl_t, len_p: *mut isize) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileSecurity {
    _unused: [u8; 0],
}
pub type CFFileSecurityRef = *mut __CFFileSecurity;
unsafe extern "C" {
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
}
unsafe extern "C" {
    pub fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        fileSec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
}
unsafe extern "C" {
    pub fn CFFileSecurityCopyOwnerUUID(
        fileSec: CFFileSecurityRef,
        ownerUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecurityCopyGroupUUID(
        fileSec: CFFileSecurityRef,
        groupUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecurityCopyAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: *mut acl_t,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecuritySetAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: acl_t,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: *mut uid_t) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: *mut gid_t) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: *mut mode_t) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) -> Boolean;
}
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwner: CFFileSecurityClearOptions = 1;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroup: CFFileSecurityClearOptions = 2;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearMode: CFFileSecurityClearOptions = 4;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwnerUUID: CFFileSecurityClearOptions = 8;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroupUUID: CFFileSecurityClearOptions = 16;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearAccessControlList:
    CFFileSecurityClearOptions = 32;
pub type CFFileSecurityClearOptions = CFOptionFlags;
unsafe extern "C" {
    pub fn CFFileSecurityClearProperties(
        fileSec: CFFileSecurityRef,
        clearPropertyMask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
unsafe extern "C" {
    pub fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFStringTokenizer {
    _unused: [u8; 0],
}
pub type CFStringTokenizerRef = *mut __CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: _bindgen_ty_16 = 0;
pub const kCFStringTokenizerUnitSentence: _bindgen_ty_16 = 1;
pub const kCFStringTokenizerUnitParagraph: _bindgen_ty_16 = 2;
pub const kCFStringTokenizerUnitLineBreak: _bindgen_ty_16 = 3;
pub const kCFStringTokenizerUnitWordBoundary: _bindgen_ty_16 = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: _bindgen_ty_16 = 65536;
pub const kCFStringTokenizerAttributeLanguage: _bindgen_ty_16 = 131072;
pub type _bindgen_ty_16 = CFOptionFlags;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNone: CFStringTokenizerTokenType = 0;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNormal: CFStringTokenizerTokenType = 1;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasSubTokensMask:
    CFStringTokenizerTokenType = 2;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasDerivedSubTokensMask:
    CFStringTokenizerTokenType = 4;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasHasNumbersMask:
    CFStringTokenizerTokenType = 8;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasNonLettersMask:
    CFStringTokenizerTokenType = 16;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenIsCJWordMask:
    CFStringTokenizerTokenType = 32;
pub type CFStringTokenizerTokenType = CFOptionFlags;
unsafe extern "C" {
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
}
unsafe extern "C" {
    pub fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
}
unsafe extern "C" {
    pub fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
}
unsafe extern "C" {
    pub fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
}
unsafe extern "C" {
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) -> CFRange;
}
unsafe extern "C" {
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
}
unsafe extern "C" {
    pub fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        maxRangeLength: CFIndex,
        derivedSubTokens: CFMutableArrayRef,
    ) -> CFIndex;
}
pub type CFFileDescriptorNativeDescriptor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileDescriptor {
    _unused: [u8; 0],
}
pub type CFFileDescriptorRef = *mut __CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: _bindgen_ty_17 = 1;
pub const kCFFileDescriptorWriteCallBack: _bindgen_ty_17 = 2;
pub type _bindgen_ty_17 = CFOptionFlags;
pub type CFFileDescriptorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        f: CFFileDescriptorRef,
        callBackTypes: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFFileDescriptorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFFileDescriptorContext"][::std::mem::size_of::<CFFileDescriptorContext>() - 40usize];
    ["Alignment of CFFileDescriptorContext"]
        [::std::mem::align_of::<CFFileDescriptorContext>() - 8usize];
    ["Offset of field: CFFileDescriptorContext::version"]
        [::std::mem::offset_of!(CFFileDescriptorContext, version) - 0usize];
    ["Offset of field: CFFileDescriptorContext::info"]
        [::std::mem::offset_of!(CFFileDescriptorContext, info) - 8usize];
    ["Offset of field: CFFileDescriptorContext::retain"]
        [::std::mem::offset_of!(CFFileDescriptorContext, retain) - 16usize];
    ["Offset of field: CFFileDescriptorContext::release"]
        [::std::mem::offset_of!(CFFileDescriptorContext, release) - 24usize];
    ["Offset of field: CFFileDescriptorContext::copyDescription"]
        [::std::mem::offset_of!(CFFileDescriptorContext, copyDescription) - 32usize];
};
unsafe extern "C" {
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFFileDescriptorCreate(
        allocator: CFAllocatorRef,
        fd: CFFileDescriptorNativeDescriptor,
        closeOnInvalidate: Boolean,
        callout: CFFileDescriptorCallBack,
        context: *const CFFileDescriptorContext,
    ) -> CFFileDescriptorRef;
}
unsafe extern "C" {
    pub fn CFFileDescriptorGetNativeDescriptor(
        f: CFFileDescriptorRef,
    ) -> CFFileDescriptorNativeDescriptor;
}
unsafe extern "C" {
    pub fn CFFileDescriptorGetContext(
        f: CFFileDescriptorRef,
        context: *mut CFFileDescriptorContext,
    );
}
unsafe extern "C" {
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
unsafe extern "C" {
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
unsafe extern "C" {
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef);
}
unsafe extern "C" {
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFFileDescriptorCreateRunLoopSource(
        allocator: CFAllocatorRef,
        f: CFFileDescriptorRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUserNotification {
    _unused: [u8; 0],
}
pub type CFUserNotificationRef = *mut __CFUserNotification;
pub type CFUserNotificationCallBack = ::std::option::Option<
    unsafe extern "C" fn(userNotification: CFUserNotificationRef, responseFlags: CFOptionFlags),
>;
unsafe extern "C" {
    pub fn CFUserNotificationGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFUserNotificationCreate(
        allocator: CFAllocatorRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        error: *mut SInt32,
        dictionary: CFDictionaryRef,
    ) -> CFUserNotificationRef;
}
unsafe extern "C" {
    pub fn CFUserNotificationReceiveResponse(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
unsafe extern "C" {
    pub fn CFUserNotificationGetResponseValue(
        userNotification: CFUserNotificationRef,
        key: CFStringRef,
        idx: CFIndex,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFUserNotificationGetResponseDictionary(
        userNotification: CFUserNotificationRef,
    ) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CFUserNotificationUpdate(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        dictionary: CFDictionaryRef,
    ) -> SInt32;
}
unsafe extern "C" {
    pub fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) -> SInt32;
}
unsafe extern "C" {
    pub fn CFUserNotificationCreateRunLoopSource(
        allocator: CFAllocatorRef,
        userNotification: CFUserNotificationRef,
        callout: CFUserNotificationCallBack,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
unsafe extern "C" {
    pub fn CFUserNotificationDisplayNotice(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
    ) -> SInt32;
}
unsafe extern "C" {
    pub fn CFUserNotificationDisplayAlert(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
        alternateButtonTitle: CFStringRef,
        otherButtonTitle: CFStringRef,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
pub const kCFUserNotificationStopAlertLevel: _bindgen_ty_18 = 0;
pub const kCFUserNotificationNoteAlertLevel: _bindgen_ty_18 = 1;
pub const kCFUserNotificationCautionAlertLevel: _bindgen_ty_18 = 2;
pub const kCFUserNotificationPlainAlertLevel: _bindgen_ty_18 = 3;
pub type _bindgen_ty_18 = CFOptionFlags;
pub const kCFUserNotificationDefaultResponse: _bindgen_ty_19 = 0;
pub const kCFUserNotificationAlternateResponse: _bindgen_ty_19 = 1;
pub const kCFUserNotificationOtherResponse: _bindgen_ty_19 = 2;
pub const kCFUserNotificationCancelResponse: _bindgen_ty_19 = 3;
pub type _bindgen_ty_19 = CFOptionFlags;
pub const kCFUserNotificationNoDefaultButtonFlag: _bindgen_ty_20 = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: _bindgen_ty_20 = 64;
pub type _bindgen_ty_20 = CFOptionFlags;
unsafe extern "C" {
    pub static kCFUserNotificationIconURLKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationSoundURLKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationLocalizationURLKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationAlertHeaderKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationAlertMessageKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationOtherButtonTitleKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationPopUpTitlesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationTextFieldTitlesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationTextFieldValuesKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationPopUpSelectionKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationAlertTopMostKey: CFStringRef;
}
unsafe extern "C" {
    pub static kCFUserNotificationKeyboardTypesKey: CFStringRef;
}
pub const kCFXMLNodeCurrentVersion: _bindgen_ty_21 = 1;
pub type _bindgen_ty_21 = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLNode {
    _unused: [u8; 0],
}
pub type CFXMLNodeRef = *const __CFXMLNode;
pub type CFXMLTreeRef = CFTreeRef;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocument: CFXMLNodeTypeCode = 1;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeElement: CFXMLNodeTypeCode = 2;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeAttribute: CFXMLNodeTypeCode = 3;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeProcessingInstruction: CFXMLNodeTypeCode = 4;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeComment: CFXMLNodeTypeCode = 5;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeText: CFXMLNodeTypeCode = 6;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeCDATASection: CFXMLNodeTypeCode = 7;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocumentFragment: CFXMLNodeTypeCode = 8;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeEntity: CFXMLNodeTypeCode = 9;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeEntityReference: CFXMLNodeTypeCode = 10;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocumentType: CFXMLNodeTypeCode = 11;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeWhitespace: CFXMLNodeTypeCode = 12;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeNotation: CFXMLNodeTypeCode = 13;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeElementTypeDeclaration: CFXMLNodeTypeCode = 14;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeAttributeListDeclaration: CFXMLNodeTypeCode = 15;
pub type CFXMLNodeTypeCode = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementInfo {
    pub attributes: CFDictionaryRef,
    pub attributeOrder: CFArrayRef,
    pub isEmpty: Boolean,
    pub _reserved: [::std::os::raw::c_char; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLElementInfo"][::std::mem::size_of::<CFXMLElementInfo>() - 24usize];
    ["Alignment of CFXMLElementInfo"][::std::mem::align_of::<CFXMLElementInfo>() - 8usize];
    ["Offset of field: CFXMLElementInfo::attributes"]
        [::std::mem::offset_of!(CFXMLElementInfo, attributes) - 0usize];
    ["Offset of field: CFXMLElementInfo::attributeOrder"]
        [::std::mem::offset_of!(CFXMLElementInfo, attributeOrder) - 8usize];
    ["Offset of field: CFXMLElementInfo::isEmpty"]
        [::std::mem::offset_of!(CFXMLElementInfo, isEmpty) - 16usize];
    ["Offset of field: CFXMLElementInfo::_reserved"]
        [::std::mem::offset_of!(CFXMLElementInfo, _reserved) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLProcessingInstructionInfo {
    pub dataString: CFStringRef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLProcessingInstructionInfo"]
        [::std::mem::size_of::<CFXMLProcessingInstructionInfo>() - 8usize];
    ["Alignment of CFXMLProcessingInstructionInfo"]
        [::std::mem::align_of::<CFXMLProcessingInstructionInfo>() - 8usize];
    ["Offset of field: CFXMLProcessingInstructionInfo::dataString"]
        [::std::mem::offset_of!(CFXMLProcessingInstructionInfo, dataString) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentInfo {
    pub sourceURL: CFURLRef,
    pub encoding: CFStringEncoding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLDocumentInfo"][::std::mem::size_of::<CFXMLDocumentInfo>() - 16usize];
    ["Alignment of CFXMLDocumentInfo"][::std::mem::align_of::<CFXMLDocumentInfo>() - 8usize];
    ["Offset of field: CFXMLDocumentInfo::sourceURL"]
        [::std::mem::offset_of!(CFXMLDocumentInfo, sourceURL) - 0usize];
    ["Offset of field: CFXMLDocumentInfo::encoding"]
        [::std::mem::offset_of!(CFXMLDocumentInfo, encoding) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLExternalID {
    pub systemID: CFURLRef,
    pub publicID: CFStringRef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLExternalID"][::std::mem::size_of::<CFXMLExternalID>() - 16usize];
    ["Alignment of CFXMLExternalID"][::std::mem::align_of::<CFXMLExternalID>() - 8usize];
    ["Offset of field: CFXMLExternalID::systemID"]
        [::std::mem::offset_of!(CFXMLExternalID, systemID) - 0usize];
    ["Offset of field: CFXMLExternalID::publicID"]
        [::std::mem::offset_of!(CFXMLExternalID, publicID) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentTypeInfo {
    pub externalID: CFXMLExternalID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLDocumentTypeInfo"][::std::mem::size_of::<CFXMLDocumentTypeInfo>() - 16usize];
    ["Alignment of CFXMLDocumentTypeInfo"]
        [::std::mem::align_of::<CFXMLDocumentTypeInfo>() - 8usize];
    ["Offset of field: CFXMLDocumentTypeInfo::externalID"]
        [::std::mem::offset_of!(CFXMLDocumentTypeInfo, externalID) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLNotationInfo {
    pub externalID: CFXMLExternalID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLNotationInfo"][::std::mem::size_of::<CFXMLNotationInfo>() - 16usize];
    ["Alignment of CFXMLNotationInfo"][::std::mem::align_of::<CFXMLNotationInfo>() - 8usize];
    ["Offset of field: CFXMLNotationInfo::externalID"]
        [::std::mem::offset_of!(CFXMLNotationInfo, externalID) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementTypeDeclarationInfo {
    pub contentDescription: CFStringRef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLElementTypeDeclarationInfo"]
        [::std::mem::size_of::<CFXMLElementTypeDeclarationInfo>() - 8usize];
    ["Alignment of CFXMLElementTypeDeclarationInfo"]
        [::std::mem::align_of::<CFXMLElementTypeDeclarationInfo>() - 8usize];
    ["Offset of field: CFXMLElementTypeDeclarationInfo::contentDescription"]
        [::std::mem::offset_of!(CFXMLElementTypeDeclarationInfo, contentDescription) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeDeclarationInfo {
    pub attributeName: CFStringRef,
    pub typeString: CFStringRef,
    pub defaultString: CFStringRef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLAttributeDeclarationInfo"]
        [::std::mem::size_of::<CFXMLAttributeDeclarationInfo>() - 24usize];
    ["Alignment of CFXMLAttributeDeclarationInfo"]
        [::std::mem::align_of::<CFXMLAttributeDeclarationInfo>() - 8usize];
    ["Offset of field: CFXMLAttributeDeclarationInfo::attributeName"]
        [::std::mem::offset_of!(CFXMLAttributeDeclarationInfo, attributeName) - 0usize];
    ["Offset of field: CFXMLAttributeDeclarationInfo::typeString"]
        [::std::mem::offset_of!(CFXMLAttributeDeclarationInfo, typeString) - 8usize];
    ["Offset of field: CFXMLAttributeDeclarationInfo::defaultString"]
        [::std::mem::offset_of!(CFXMLAttributeDeclarationInfo, defaultString) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeListDeclarationInfo {
    pub numberOfAttributes: CFIndex,
    pub attributes: *mut CFXMLAttributeDeclarationInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLAttributeListDeclarationInfo"]
        [::std::mem::size_of::<CFXMLAttributeListDeclarationInfo>() - 16usize];
    ["Alignment of CFXMLAttributeListDeclarationInfo"]
        [::std::mem::align_of::<CFXMLAttributeListDeclarationInfo>() - 8usize];
    ["Offset of field: CFXMLAttributeListDeclarationInfo::numberOfAttributes"]
        [::std::mem::offset_of!(CFXMLAttributeListDeclarationInfo, numberOfAttributes) - 0usize];
    ["Offset of field: CFXMLAttributeListDeclarationInfo::attributes"]
        [::std::mem::offset_of!(CFXMLAttributeListDeclarationInfo, attributes) - 8usize];
};
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParameter: CFXMLEntityTypeCode = 0;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParsedInternal: CFXMLEntityTypeCode = 1;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParsedExternal: CFXMLEntityTypeCode = 2;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeUnparsed: CFXMLEntityTypeCode = 3;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeCharacter: CFXMLEntityTypeCode = 4;
pub type CFXMLEntityTypeCode = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityInfo {
    pub entityType: CFXMLEntityTypeCode,
    pub replacementText: CFStringRef,
    pub entityID: CFXMLExternalID,
    pub notationName: CFStringRef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLEntityInfo"][::std::mem::size_of::<CFXMLEntityInfo>() - 40usize];
    ["Alignment of CFXMLEntityInfo"][::std::mem::align_of::<CFXMLEntityInfo>() - 8usize];
    ["Offset of field: CFXMLEntityInfo::entityType"]
        [::std::mem::offset_of!(CFXMLEntityInfo, entityType) - 0usize];
    ["Offset of field: CFXMLEntityInfo::replacementText"]
        [::std::mem::offset_of!(CFXMLEntityInfo, replacementText) - 8usize];
    ["Offset of field: CFXMLEntityInfo::entityID"]
        [::std::mem::offset_of!(CFXMLEntityInfo, entityID) - 16usize];
    ["Offset of field: CFXMLEntityInfo::notationName"]
        [::std::mem::offset_of!(CFXMLEntityInfo, notationName) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityReferenceInfo {
    pub entityType: CFXMLEntityTypeCode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLEntityReferenceInfo"]
        [::std::mem::size_of::<CFXMLEntityReferenceInfo>() - 8usize];
    ["Alignment of CFXMLEntityReferenceInfo"]
        [::std::mem::align_of::<CFXMLEntityReferenceInfo>() - 8usize];
    ["Offset of field: CFXMLEntityReferenceInfo::entityType"]
        [::std::mem::offset_of!(CFXMLEntityReferenceInfo, entityType) - 0usize];
};
unsafe extern "C" {
    pub fn CFXMLNodeGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFXMLNodeCreate(
        alloc: CFAllocatorRef,
        xmlType: CFXMLNodeTypeCode,
        dataString: CFStringRef,
        additionalInfoPtr: *const ::std::os::raw::c_void,
        version: CFIndex,
    ) -> CFXMLNodeRef;
}
unsafe extern "C" {
    pub fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) -> CFXMLNodeRef;
}
unsafe extern "C" {
    pub fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) -> CFXMLNodeTypeCode;
}
unsafe extern "C" {
    pub fn CFXMLNodeGetString(node: CFXMLNodeRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFXMLNodeGetVersion(node: CFXMLNodeRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) -> CFXMLTreeRef;
}
unsafe extern "C" {
    pub fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) -> CFXMLNodeRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLParser {
    _unused: [u8; 0],
}
pub type CFXMLParserRef = *mut __CFXMLParser;
pub const CFXMLParserOptions_kCFXMLParserValidateDocument: CFXMLParserOptions = 1;
pub const CFXMLParserOptions_kCFXMLParserSkipMetaData: CFXMLParserOptions = 2;
pub const CFXMLParserOptions_kCFXMLParserReplacePhysicalEntities: CFXMLParserOptions = 4;
pub const CFXMLParserOptions_kCFXMLParserSkipWhitespace: CFXMLParserOptions = 8;
pub const CFXMLParserOptions_kCFXMLParserResolveExternalEntities: CFXMLParserOptions = 16;
pub const CFXMLParserOptions_kCFXMLParserAddImpliedAttributes: CFXMLParserOptions = 32;
pub const CFXMLParserOptions_kCFXMLParserAllOptions: CFXMLParserOptions = 16777215;
pub const CFXMLParserOptions_kCFXMLParserNoOptions: CFXMLParserOptions = 0;
pub type CFXMLParserOptions = CFOptionFlags;
pub const CFXMLParserStatusCode_kCFXMLStatusParseNotBegun: CFXMLParserStatusCode = -2;
pub const CFXMLParserStatusCode_kCFXMLStatusParseInProgress: CFXMLParserStatusCode = -1;
pub const CFXMLParserStatusCode_kCFXMLStatusParseSuccessful: CFXMLParserStatusCode = 0;
pub const CFXMLParserStatusCode_kCFXMLErrorUnexpectedEOF: CFXMLParserStatusCode = 1;
pub const CFXMLParserStatusCode_kCFXMLErrorUnknownEncoding: CFXMLParserStatusCode = 2;
pub const CFXMLParserStatusCode_kCFXMLErrorEncodingConversionFailure: CFXMLParserStatusCode = 3;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedProcessingInstruction: CFXMLParserStatusCode =
    4;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedDTD: CFXMLParserStatusCode = 5;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedName: CFXMLParserStatusCode = 6;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCDSect: CFXMLParserStatusCode = 7;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCloseTag: CFXMLParserStatusCode = 8;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedStartTag: CFXMLParserStatusCode = 9;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedDocument: CFXMLParserStatusCode = 10;
pub const CFXMLParserStatusCode_kCFXMLErrorElementlessDocument: CFXMLParserStatusCode = 11;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedComment: CFXMLParserStatusCode = 12;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCharacterReference: CFXMLParserStatusCode = 13;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedParsedCharacterData: CFXMLParserStatusCode = 14;
pub const CFXMLParserStatusCode_kCFXMLErrorNoData: CFXMLParserStatusCode = 15;
pub type CFXMLParserStatusCode = CFIndex;
pub type CFXMLParserCreateXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        nodeDesc: CFXMLNodeRef,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFXMLParserAddChildCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        parent: *mut ::std::os::raw::c_void,
        child: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserEndXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        xmlType: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserResolveExternalEntityCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        extID: *mut CFXMLExternalID,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFXMLParserHandleErrorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        error: CFXMLParserStatusCode,
        info: *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserCallBacks {
    pub version: CFIndex,
    pub createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    pub addChild: CFXMLParserAddChildCallBack,
    pub endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    pub resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    pub handleError: CFXMLParserHandleErrorCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLParserCallBacks"][::std::mem::size_of::<CFXMLParserCallBacks>() - 48usize];
    ["Alignment of CFXMLParserCallBacks"][::std::mem::align_of::<CFXMLParserCallBacks>() - 8usize];
    ["Offset of field: CFXMLParserCallBacks::version"]
        [::std::mem::offset_of!(CFXMLParserCallBacks, version) - 0usize];
    ["Offset of field: CFXMLParserCallBacks::createXMLStructure"]
        [::std::mem::offset_of!(CFXMLParserCallBacks, createXMLStructure) - 8usize];
    ["Offset of field: CFXMLParserCallBacks::addChild"]
        [::std::mem::offset_of!(CFXMLParserCallBacks, addChild) - 16usize];
    ["Offset of field: CFXMLParserCallBacks::endXMLStructure"]
        [::std::mem::offset_of!(CFXMLParserCallBacks, endXMLStructure) - 24usize];
    ["Offset of field: CFXMLParserCallBacks::resolveExternalEntity"]
        [::std::mem::offset_of!(CFXMLParserCallBacks, resolveExternalEntity) - 32usize];
    ["Offset of field: CFXMLParserCallBacks::handleError"]
        [::std::mem::offset_of!(CFXMLParserCallBacks, handleError) - 40usize];
};
pub type CFXMLParserRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFXMLParserReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFXMLParserCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFXMLParserRetainCallBack,
    pub release: CFXMLParserReleaseCallBack,
    pub copyDescription: CFXMLParserCopyDescriptionCallBack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CFXMLParserContext"][::std::mem::size_of::<CFXMLParserContext>() - 40usize];
    ["Alignment of CFXMLParserContext"][::std::mem::align_of::<CFXMLParserContext>() - 8usize];
    ["Offset of field: CFXMLParserContext::version"]
        [::std::mem::offset_of!(CFXMLParserContext, version) - 0usize];
    ["Offset of field: CFXMLParserContext::info"]
        [::std::mem::offset_of!(CFXMLParserContext, info) - 8usize];
    ["Offset of field: CFXMLParserContext::retain"]
        [::std::mem::offset_of!(CFXMLParserContext, retain) - 16usize];
    ["Offset of field: CFXMLParserContext::release"]
        [::std::mem::offset_of!(CFXMLParserContext, release) - 24usize];
    ["Offset of field: CFXMLParserContext::copyDescription"]
        [::std::mem::offset_of!(CFXMLParserContext, copyDescription) - 32usize];
};
unsafe extern "C" {
    pub fn CFXMLParserGetTypeID() -> CFTypeID;
}
unsafe extern "C" {
    pub fn CFXMLParserCreate(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
unsafe extern "C" {
    pub fn CFXMLParserCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
unsafe extern "C" {
    pub fn CFXMLParserGetContext(parser: CFXMLParserRef, context: *mut CFXMLParserContext);
}
unsafe extern "C" {
    pub fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: *mut CFXMLParserCallBacks);
}
unsafe extern "C" {
    pub fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) -> CFURLRef;
}
unsafe extern "C" {
    pub fn CFXMLParserGetLocation(parser: CFXMLParserRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) -> CFIndex;
}
unsafe extern "C" {
    pub fn CFXMLParserGetDocument(parser: CFXMLParserRef) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) -> CFXMLParserStatusCode;
}
unsafe extern "C" {
    pub fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFXMLParserAbort(
        parser: CFXMLParserRef,
        errorCode: CFXMLParserStatusCode,
        errorDescription: CFStringRef,
    );
}
unsafe extern "C" {
    pub fn CFXMLParserParse(parser: CFXMLParserRef) -> Boolean;
}
unsafe extern "C" {
    pub fn CFXMLTreeCreateFromData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
unsafe extern "C" {
    pub fn CFXMLTreeCreateFromDataWithError(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        errorDict: *mut CFDictionaryRef,
    ) -> CFXMLTreeRef;
}
unsafe extern "C" {
    pub fn CFXMLTreeCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
unsafe extern "C" {
    pub fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) -> CFDataRef;
}
unsafe extern "C" {
    pub fn CFXMLCreateStringByEscapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub fn CFXMLCreateStringByUnescapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
unsafe extern "C" {
    pub static kCFXMLTreeErrorDescription: CFStringRef;
}
unsafe extern "C" {
    pub static kCFXMLTreeErrorLineNumber: CFStringRef;
}
unsafe extern "C" {
    pub static kCFXMLTreeErrorLocation: CFStringRef;
}
unsafe extern "C" {
    pub static kCFXMLTreeErrorStatusCode: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOSurface {
    _unused: [u8; 0],
}
pub type IOSurfaceRef = *mut __IOSurface;
unsafe extern "C" {
    pub static CGPointZero: CGPoint;
}
unsafe extern "C" {
    pub static CGSizeZero: CGSize;
}
unsafe extern "C" {
    pub static CGRectZero: CGRect;
}
unsafe extern "C" {
    pub static CGRectNull: CGRect;
}
unsafe extern "C" {
    pub static CGRectInfinite: CGRect;
}
unsafe extern "C" {
    pub fn CGRectGetMinX(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGRectGetMidX(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGRectGetMaxX(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGRectGetMinY(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGRectGetMidY(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGRectGetMaxY(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGRectGetWidth(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGRectGetHeight(rect: CGRect) -> CGFloat;
}
unsafe extern "C" {
    pub fn CGPointEqualToPoint(point1: CGPoint, point2: CGPoint) -> bool;
}
unsafe extern "C" {
    pub fn CGSizeEqualToSize(size1: CGSize, size2: CGSize) -> bool;
}
unsafe extern "C" {
    pub fn CGRectEqualToRect(rect1: CGRect, rect2: CGRect) -> bool;
}
unsafe extern "C" {
    pub fn CGRectStandardize(rect: CGRect) -> CGRect;
}
unsafe extern "C" {
    pub fn CGRectIsEmpty(rect: CGRect) -> bool;
}
unsafe extern "C" {
    pub fn CGRectIsNull(rect: CGRect) -> bool;
}
unsafe extern "C" {
    pub fn CGRectIsInfinite(rect: CGRect) -> bool;
}
unsafe extern "C" {
    pub fn CGRectInset(rect: CGRect, dx: CGFloat, dy: CGFloat) -> CGRect;
}
unsafe extern "C" {
    pub fn CGRectIntegral(rect: CGRect) -> CGRect;
}
unsafe extern "C" {
    pub fn CGRectUnion(r1: CGRect, r2: CGRect) -> CGRect;
}
unsafe extern "C" {
    pub fn CGRectIntersection(r1: CGRect, r2: CGRect) -> CGRect;
}
unsafe extern "C" {
    pub fn CGRectOffset(rect: CGRect, dx: CGFloat, dy: CGFloat) -> CGRect;
}
unsafe extern "C" {
    pub fn CGRectDivide(
        rect: CGRect,
        slice: *mut CGRect,
        remainder: *mut CGRect,
        amount: CGFloat,
        edge: CGRectEdge,
    );
}
unsafe extern "C" {
    pub fn CGRectContainsPoint(rect: CGRect, point: CGPoint) -> bool;
}
unsafe extern "C" {
    pub fn CGRectContainsRect(rect1: CGRect, rect2: CGRect) -> bool;
}
unsafe extern "C" {
    pub fn CGRectIntersectsRect(rect1: CGRect, rect2: CGRect) -> bool;
}
unsafe extern "C" {
    pub fn CGPointCreateDictionaryRepresentation(point: CGPoint) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CGPointMakeWithDictionaryRepresentation(
        dict: CFDictionaryRef,
        point: *mut CGPoint,
    ) -> bool;
}
unsafe extern "C" {
    pub fn CGSizeCreateDictionaryRepresentation(size: CGSize) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CGSizeMakeWithDictionaryRepresentation(dict: CFDictionaryRef, size: *mut CGSize)
        -> bool;
}
unsafe extern "C" {
    pub fn CGRectCreateDictionaryRepresentation(arg1: CGRect) -> CFDictionaryRef;
}
unsafe extern "C" {
    pub fn CGRectMakeWithDictionaryRepresentation(dict: CFDictionaryRef, rect: *mut CGRect)
        -> bool;
}
pub type NSPoint = CGPoint;
pub type NSPointPointer = *mut NSPoint;
pub type NSPointArray = *mut NSPoint;
pub type NSSize = CGSize;
pub type NSSizePointer = *mut NSSize;
pub type NSSizeArray = *mut NSSize;
pub type NSRect = CGRect;
pub type NSRectPointer = *mut NSRect;
pub type NSRectArray = *mut NSRect;
pub const NSRectEdge_NSRectEdgeMinX: NSRectEdge = 0;
pub const NSRectEdge_NSRectEdgeMinY: NSRectEdge = 1;
pub const NSRectEdge_NSRectEdgeMaxX: NSRectEdge = 2;
pub const NSRectEdge_NSRectEdgeMaxY: NSRectEdge = 3;
pub const NSRectEdge_NSMinXEdge: NSRectEdge = 0;
pub const NSRectEdge_NSMinYEdge: NSRectEdge = 1;
pub const NSRectEdge_NSMaxXEdge: NSRectEdge = 2;
pub const NSRectEdge_NSMaxYEdge: NSRectEdge = 3;
pub type NSRectEdge = NSUInteger;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSEdgeInsets {
    pub top: CGFloat,
    pub left: CGFloat,
    pub bottom: CGFloat,
    pub right: CGFloat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NSEdgeInsets"][::std::mem::size_of::<NSEdgeInsets>() - 32usize];
    ["Alignment of NSEdgeInsets"][::std::mem::align_of::<NSEdgeInsets>() - 8usize];
    ["Offset of field: NSEdgeInsets::top"][::std::mem::offset_of!(NSEdgeInsets, top) - 0usize];
    ["Offset of field: NSEdgeInsets::left"][::std::mem::offset_of!(NSEdgeInsets, left) - 8usize];
    ["Offset of field: NSEdgeInsets::bottom"]
        [::std::mem::offset_of!(NSEdgeInsets, bottom) - 16usize];
    ["Offset of field: NSEdgeInsets::right"][::std::mem::offset_of!(NSEdgeInsets, right) - 24usize];
};
pub const NSAlignmentOptions_NSAlignMinXInward: NSAlignmentOptions = 1;
pub const NSAlignmentOptions_NSAlignMinYInward: NSAlignmentOptions = 2;
pub const NSAlignmentOptions_NSAlignMaxXInward: NSAlignmentOptions = 4;
pub const NSAlignmentOptions_NSAlignMaxYInward: NSAlignmentOptions = 8;
pub const NSAlignmentOptions_NSAlignWidthInward: NSAlignmentOptions = 16;
pub const NSAlignmentOptions_NSAlignHeightInward: NSAlignmentOptions = 32;
pub const NSAlignmentOptions_NSAlignMinXOutward: NSAlignmentOptions = 256;
pub const NSAlignmentOptions_NSAlignMinYOutward: NSAlignmentOptions = 512;
pub const NSAlignmentOptions_NSAlignMaxXOutward: NSAlignmentOptions = 1024;
pub const NSAlignmentOptions_NSAlignMaxYOutward: NSAlignmentOptions = 2048;
pub const NSAlignmentOptions_NSAlignWidthOutward: NSAlignmentOptions = 4096;
pub const NSAlignmentOptions_NSAlignHeightOutward: NSAlignmentOptions = 8192;
pub const NSAlignmentOptions_NSAlignMinXNearest: NSAlignmentOptions = 65536;
pub const NSAlignmentOptions_NSAlignMinYNearest: NSAlignmentOptions = 131072;
pub const NSAlignmentOptions_NSAlignMaxXNearest: NSAlignmentOptions = 262144;
pub const NSAlignmentOptions_NSAlignMaxYNearest: NSAlignmentOptions = 524288;
pub const NSAlignmentOptions_NSAlignWidthNearest: NSAlignmentOptions = 1048576;
pub const NSAlignmentOptions_NSAlignHeightNearest: NSAlignmentOptions = 2097152;
pub const NSAlignmentOptions_NSAlignRectFlipped: NSAlignmentOptions = 9223372036854775808;
pub const NSAlignmentOptions_NSAlignAllEdgesInward: NSAlignmentOptions = 15;
pub const NSAlignmentOptions_NSAlignAllEdgesOutward: NSAlignmentOptions = 3840;
pub const NSAlignmentOptions_NSAlignAllEdgesNearest: NSAlignmentOptions = 983040;
pub type NSAlignmentOptions = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub static NSZeroPoint: NSPoint;
}
unsafe extern "C" {
    pub static NSZeroSize: NSSize;
}
unsafe extern "C" {
    pub static NSZeroRect: NSRect;
}
unsafe extern "C" {
    pub static NSEdgeInsetsZero: NSEdgeInsets;
}
unsafe extern "C" {
    pub fn NSEqualPoints(aPoint: NSPoint, bPoint: NSPoint) -> BOOL;
}
unsafe extern "C" {
    pub fn NSEqualSizes(aSize: NSSize, bSize: NSSize) -> BOOL;
}
unsafe extern "C" {
    pub fn NSEqualRects(aRect: NSRect, bRect: NSRect) -> BOOL;
}
unsafe extern "C" {
    pub fn NSIsEmptyRect(aRect: NSRect) -> BOOL;
}
unsafe extern "C" {
    pub fn NSEdgeInsetsEqual(aInsets: NSEdgeInsets, bInsets: NSEdgeInsets) -> BOOL;
}
unsafe extern "C" {
    pub fn NSInsetRect(aRect: NSRect, dX: CGFloat, dY: CGFloat) -> NSRect;
}
unsafe extern "C" {
    pub fn NSIntegralRect(aRect: NSRect) -> NSRect;
}
unsafe extern "C" {
    pub fn NSIntegralRectWithOptions(aRect: NSRect, opts: NSAlignmentOptions) -> NSRect;
}
unsafe extern "C" {
    pub fn NSUnionRect(aRect: NSRect, bRect: NSRect) -> NSRect;
}
unsafe extern "C" {
    pub fn NSIntersectionRect(aRect: NSRect, bRect: NSRect) -> NSRect;
}
unsafe extern "C" {
    pub fn NSOffsetRect(aRect: NSRect, dX: CGFloat, dY: CGFloat) -> NSRect;
}
unsafe extern "C" {
    pub fn NSDivideRect(
        inRect: NSRect,
        slice: *mut NSRect,
        rem: *mut NSRect,
        amount: CGFloat,
        edge: NSRectEdge,
    );
}
unsafe extern "C" {
    pub fn NSPointInRect(aPoint: NSPoint, aRect: NSRect) -> BOOL;
}
unsafe extern "C" {
    pub fn NSMouseInRect(aPoint: NSPoint, aRect: NSRect, flipped: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn NSContainsRect(aRect: NSRect, bRect: NSRect) -> BOOL;
}
unsafe extern "C" {
    pub fn NSIntersectsRect(aRect: NSRect, bRect: NSRect) -> BOOL;
}
unsafe extern "C" {
    pub fn NSStringFromPoint(aPoint: NSPoint) -> NSString;
}
unsafe extern "C" {
    pub fn NSStringFromSize(aSize: NSSize) -> NSString;
}
unsafe extern "C" {
    pub fn NSStringFromRect(aRect: NSRect) -> NSString;
}
unsafe extern "C" {
    pub fn NSPointFromString(aString: NSString) -> NSPoint;
}
unsafe extern "C" {
    pub fn NSSizeFromString(aString: NSString) -> NSSize;
}
unsafe extern "C" {
    pub fn NSRectFromString(aString: NSString) -> NSRect;
}
impl NSValue_NSValueGeometryExtensions for NSValue {}
pub trait NSValue_NSValueGeometryExtensions: Sized + std::ops::Deref {
    unsafe fn pointValue(&self) -> NSPoint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, pointValue) }
    }
    unsafe fn sizeValue(&self) -> NSSize
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, sizeValue) }
    }
    unsafe fn rectValue(&self) -> NSRect
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rectValue) }
    }
    unsafe fn edgeInsetsValue(&self) -> NSEdgeInsets
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, edgeInsetsValue) }
    }
    unsafe fn valueWithPoint_(point: NSPoint) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithPoint : point) }
    }
    unsafe fn valueWithSize_(size: NSSize) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithSize : size) }
    }
    unsafe fn valueWithRect_(rect: NSRect) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithRect : rect) }
    }
    unsafe fn valueWithEdgeInsets_(insets: NSEdgeInsets) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSValue) , valueWithEdgeInsets : insets) }
    }
}
impl NSCoder_NSGeometryCoding for NSCoder {}
pub trait NSCoder_NSGeometryCoding: Sized + std::ops::Deref {
    unsafe fn encodePoint_(&self, point: NSPoint)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodePoint : point) }
    }
    unsafe fn decodePoint(&self) -> NSPoint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodePoint) }
    }
    unsafe fn encodeSize_(&self, size: NSSize)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeSize : size) }
    }
    unsafe fn decodeSize(&self) -> NSSize
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodeSize) }
    }
    unsafe fn encodeRect_(&self, rect: NSRect)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeRect : rect) }
    }
    unsafe fn decodeRect(&self) -> NSRect
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decodeRect) }
    }
}
impl NSCoder_NSGeometryKeyedCoding for NSCoder {}
pub trait NSCoder_NSGeometryKeyedCoding: Sized + std::ops::Deref {
    unsafe fn encodePoint_forKey_(&self, point: NSPoint, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodePoint : point forKey : key) }
    }
    unsafe fn encodeSize_forKey_(&self, size: NSSize, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeSize : size forKey : key) }
    }
    unsafe fn encodeRect_forKey_(&self, rect: NSRect, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , encodeRect : rect forKey : key) }
    }
    unsafe fn decodePointForKey_(&self, key: NSString) -> NSPoint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodePointForKey : key) }
    }
    unsafe fn decodeSizeForKey_(&self, key: NSString) -> NSSize
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeSizeForKey : key) }
    }
    unsafe fn decodeRectForKey_(&self, key: NSString) -> NSRect
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , decodeRectForKey : key) }
    }
}
pub type unichar = ::std::os::raw::c_ushort;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSProgress(pub id);
impl std::ops::Deref for NSProgress {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSProgress {}
impl NSProgress {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSProgress), alloc) })
    }
}
impl INSProgress for NSProgress {}
pub trait INSProgress: Sized + std::ops::Deref {}
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityAll:
    NSItemProviderRepresentationVisibility = 0;
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityTeam:
    NSItemProviderRepresentationVisibility = 1;
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityGroup:
    NSItemProviderRepresentationVisibility = 2;
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityOwnProcess : NSItemProviderRepresentationVisibility = 3 ;
pub type NSItemProviderRepresentationVisibility = NSInteger;
pub const NSItemProviderFileOptions_NSItemProviderFileOptionOpenInPlace: NSItemProviderFileOptions =
    1;
pub type NSItemProviderFileOptions = NSInteger;
pub trait PNSItemProviderWriting: Sized + std::ops::Deref {
    unsafe fn itemProviderVisibilityForRepresentationWithTypeIdentifier_(
        &self,
        typeIdentifier: NSString,
    ) -> NSItemProviderRepresentationVisibility
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , itemProviderVisibilityForRepresentationWithTypeIdentifier : typeIdentifier)
        }
    }
    unsafe fn loadDataWithTypeIdentifier_forItemProviderCompletionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadDataWithTypeIdentifier : typeIdentifier forItemProviderCompletionHandler : completionHandler)
        }
    }
    unsafe fn writableTypeIdentifiersForItemProvider(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, writableTypeIdentifiersForItemProvider) }
    }
    unsafe fn class_itemProviderVisibilityForRepresentationWithTypeIdentifier_(
        typeIdentifier: NSString,
    ) -> NSItemProviderRepresentationVisibility
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSItemProviderWriting) , itemProviderVisibilityForRepresentationWithTypeIdentifier : typeIdentifier)
        }
    }
    unsafe fn class_writableTypeIdentifiersForItemProvider() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send!(
                class!(NSItemProviderWriting),
                writableTypeIdentifiersForItemProvider
            )
        }
    }
}
pub trait PNSItemProviderReading: Sized + std::ops::Deref {
    unsafe fn objectWithItemProviderData_typeIdentifier_error_(
        data: NSData,
        typeIdentifier: NSString,
        outError: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSItemProviderReading) , objectWithItemProviderData : data typeIdentifier : typeIdentifier error : outError)
        }
    }
    unsafe fn readableTypeIdentifiersForItemProvider() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send!(
                class!(NSItemProviderReading),
                readableTypeIdentifiersForItemProvider
            )
        }
    }
}
pub type NSItemProviderCompletionHandler = *mut ::std::os::raw::c_void;
pub type NSItemProviderLoadHandler = *mut ::std::os::raw::c_void;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSItemProvider(pub id);
impl std::ops::Deref for NSItemProvider {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSItemProvider {}
impl NSItemProvider {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSItemProvider), alloc) })
    }
}
impl PNSCopying for NSItemProvider {}
impl INSObject for NSItemProvider {}
impl PNSObject for NSItemProvider {}
impl From<NSItemProvider> for NSObject {
    fn from(child: NSItemProvider) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSItemProvider {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSItemProvider, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSItemProvider)) };
        if is_kind_of {
            Ok(NSItemProvider(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSItemProvider")
        }
    }
}
impl INSItemProvider for NSItemProvider {}
pub trait INSItemProvider: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn registerDataRepresentationForTypeIdentifier_visibility_loadHandler_(
        &self,
        typeIdentifier: NSString,
        visibility: NSItemProviderRepresentationVisibility,
        loadHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , registerDataRepresentationForTypeIdentifier : typeIdentifier visibility : visibility loadHandler : loadHandler)
        }
    }
    unsafe fn registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_(
        &self,
        typeIdentifier: NSString,
        fileOptions: NSItemProviderFileOptions,
        visibility: NSItemProviderRepresentationVisibility,
        loadHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , registerFileRepresentationForTypeIdentifier : typeIdentifier fileOptions : fileOptions visibility : visibility loadHandler : loadHandler)
        }
    }
    unsafe fn registeredTypeIdentifiersWithFileOptions_(
        &self,
        fileOptions: NSItemProviderFileOptions,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , registeredTypeIdentifiersWithFileOptions : fileOptions) }
    }
    unsafe fn hasItemConformingToTypeIdentifier_(&self, typeIdentifier: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , hasItemConformingToTypeIdentifier : typeIdentifier) }
    }
    unsafe fn hasRepresentationConformingToTypeIdentifier_fileOptions_(
        &self,
        typeIdentifier: NSString,
        fileOptions: NSItemProviderFileOptions,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , hasRepresentationConformingToTypeIdentifier : typeIdentifier fileOptions : fileOptions)
        }
    }
    unsafe fn loadDataRepresentationForTypeIdentifier_completionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadDataRepresentationForTypeIdentifier : typeIdentifier completionHandler : completionHandler)
        }
    }
    unsafe fn loadFileRepresentationForTypeIdentifier_completionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadFileRepresentationForTypeIdentifier : typeIdentifier completionHandler : completionHandler)
        }
    }
    unsafe fn loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadInPlaceFileRepresentationForTypeIdentifier : typeIdentifier completionHandler : completionHandler)
        }
    }
    unsafe fn initWithObject_(&self, object: *mut u64) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithObject : object) }
    }
    unsafe fn registerObject_visibility_(
        &self,
        object: *mut u64,
        visibility: NSItemProviderRepresentationVisibility,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , registerObject : object visibility : visibility) }
    }
    unsafe fn registerObjectOfClass_visibility_loadHandler_(
        &self,
        aClass: *mut u64,
        visibility: NSItemProviderRepresentationVisibility,
        loadHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , registerObjectOfClass : aClass visibility : visibility loadHandler : loadHandler)
        }
    }
    unsafe fn canLoadObjectOfClass_(&self, aClass: *mut u64) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , canLoadObjectOfClass : aClass) }
    }
    unsafe fn loadObjectOfClass_completionHandler_(
        &self,
        aClass: *mut u64,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadObjectOfClass : aClass completionHandler : completionHandler)
        }
    }
    unsafe fn initWithItem_typeIdentifier_(
        &self,
        item: *mut u64,
        typeIdentifier: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithItem : item typeIdentifier : typeIdentifier) }
    }
    unsafe fn initWithContentsOfURL_(&self, fileURL: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : fileURL) }
    }
    unsafe fn registerItemForTypeIdentifier_loadHandler_(
        &self,
        typeIdentifier: NSString,
        loadHandler: NSItemProviderLoadHandler,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , registerItemForTypeIdentifier : typeIdentifier loadHandler : loadHandler)
        }
    }
    unsafe fn loadItemForTypeIdentifier_options_completionHandler_(
        &self,
        typeIdentifier: NSString,
        options: NSDictionary,
        completionHandler: NSItemProviderCompletionHandler,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadItemForTypeIdentifier : typeIdentifier options : options completionHandler : completionHandler)
        }
    }
    unsafe fn registeredTypeIdentifiers(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, registeredTypeIdentifiers) }
    }
    unsafe fn suggestedName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, suggestedName) }
    }
    unsafe fn setSuggestedName_(&self, suggestedName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setSuggestedName : suggestedName) }
    }
}
unsafe extern "C" {
    pub static NSItemProviderPreferredImageSizeKey: NSString;
}
impl NSItemProvider_NSPreviewSupport for NSItemProvider {}
pub trait NSItemProvider_NSPreviewSupport: Sized + std::ops::Deref {
    unsafe fn loadPreviewImageWithOptions_completionHandler_(
        &self,
        options: NSDictionary,
        completionHandler: NSItemProviderCompletionHandler,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadPreviewImageWithOptions : options completionHandler : completionHandler)
        }
    }
    unsafe fn previewImageHandler(&self) -> NSItemProviderLoadHandler
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, previewImageHandler) }
    }
    unsafe fn setPreviewImageHandler_(&self, previewImageHandler: NSItemProviderLoadHandler)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPreviewImageHandler : previewImageHandler) }
    }
}
unsafe extern "C" {
    pub static NSExtensionJavaScriptPreprocessingResultsKey: NSString;
}
unsafe extern "C" {
    pub static NSExtensionJavaScriptFinalizeArgumentKey: NSString;
}
unsafe extern "C" {
    pub static NSItemProviderErrorDomain: NSString;
}
pub const NSItemProviderErrorCode_NSItemProviderUnknownError: NSItemProviderErrorCode = -1;
pub const NSItemProviderErrorCode_NSItemProviderItemUnavailableError: NSItemProviderErrorCode =
    -1000;
pub const NSItemProviderErrorCode_NSItemProviderUnexpectedValueClassError: NSItemProviderErrorCode =
    -1100;
pub const NSItemProviderErrorCode_NSItemProviderUnavailableCoercionError: NSItemProviderErrorCode =
    -1200;
pub type NSItemProviderErrorCode = NSInteger;
pub const NSStringCompareOptions_NSCaseInsensitiveSearch: NSStringCompareOptions = 1;
pub const NSStringCompareOptions_NSLiteralSearch: NSStringCompareOptions = 2;
pub const NSStringCompareOptions_NSBackwardsSearch: NSStringCompareOptions = 4;
pub const NSStringCompareOptions_NSAnchoredSearch: NSStringCompareOptions = 8;
pub const NSStringCompareOptions_NSNumericSearch: NSStringCompareOptions = 64;
pub const NSStringCompareOptions_NSDiacriticInsensitiveSearch: NSStringCompareOptions = 128;
pub const NSStringCompareOptions_NSWidthInsensitiveSearch: NSStringCompareOptions = 256;
pub const NSStringCompareOptions_NSForcedOrderingSearch: NSStringCompareOptions = 512;
pub const NSStringCompareOptions_NSRegularExpressionSearch: NSStringCompareOptions = 1024;
pub type NSStringCompareOptions = NSUInteger;
pub type NSStringEncoding = NSUInteger;
pub const NSASCIIStringEncoding: _bindgen_ty_22 = 1;
pub const NSNEXTSTEPStringEncoding: _bindgen_ty_22 = 2;
pub const NSJapaneseEUCStringEncoding: _bindgen_ty_22 = 3;
pub const NSUTF8StringEncoding: _bindgen_ty_22 = 4;
pub const NSISOLatin1StringEncoding: _bindgen_ty_22 = 5;
pub const NSSymbolStringEncoding: _bindgen_ty_22 = 6;
pub const NSNonLossyASCIIStringEncoding: _bindgen_ty_22 = 7;
pub const NSShiftJISStringEncoding: _bindgen_ty_22 = 8;
pub const NSISOLatin2StringEncoding: _bindgen_ty_22 = 9;
pub const NSUnicodeStringEncoding: _bindgen_ty_22 = 10;
pub const NSWindowsCP1251StringEncoding: _bindgen_ty_22 = 11;
pub const NSWindowsCP1252StringEncoding: _bindgen_ty_22 = 12;
pub const NSWindowsCP1253StringEncoding: _bindgen_ty_22 = 13;
pub const NSWindowsCP1254StringEncoding: _bindgen_ty_22 = 14;
pub const NSWindowsCP1250StringEncoding: _bindgen_ty_22 = 15;
pub const NSISO2022JPStringEncoding: _bindgen_ty_22 = 21;
pub const NSMacOSRomanStringEncoding: _bindgen_ty_22 = 30;
pub const NSUTF16StringEncoding: _bindgen_ty_22 = 10;
pub const NSUTF16BigEndianStringEncoding: _bindgen_ty_22 = 2415919360;
pub const NSUTF16LittleEndianStringEncoding: _bindgen_ty_22 = 2483028224;
pub const NSUTF32StringEncoding: _bindgen_ty_22 = 2348810496;
pub const NSUTF32BigEndianStringEncoding: _bindgen_ty_22 = 2550137088;
pub const NSUTF32LittleEndianStringEncoding: _bindgen_ty_22 = 2617245952;
pub type _bindgen_ty_22 = NSStringEncoding;
pub const NSStringEncodingConversionOptions_NSStringEncodingConversionAllowLossy:
    NSStringEncodingConversionOptions = 1;
pub const NSStringEncodingConversionOptions_NSStringEncodingConversionExternalRepresentation:
    NSStringEncodingConversionOptions = 2;
pub type NSStringEncodingConversionOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSString(pub id);
impl std::ops::Deref for NSString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSString {}
impl NSString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSString), alloc) })
    }
}
impl PNSCopying for NSString {}
impl PNSMutableCopying for NSString {}
impl PNSSecureCoding for NSString {}
impl INSObject for NSString {}
impl PNSObject for NSString {}
impl From<NSString> for NSObject {
    fn from(child: NSString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSString, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSString)) };
        if is_kind_of {
            Ok(NSString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSString")
        }
    }
}
impl INSString for NSString {}
pub trait INSString: Sized + std::ops::Deref {
    unsafe fn characterAtIndex_(&self, index: NSUInteger) -> unichar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , characterAtIndex : index) }
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, length) }
    }
}
impl NSString_NSStringExtensionMethods for NSString {}
pub trait NSString_NSStringExtensionMethods: Sized + std::ops::Deref {
    unsafe fn substringFromIndex_(&self, from: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , substringFromIndex : from) }
    }
    unsafe fn substringToIndex_(&self, to: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , substringToIndex : to) }
    }
    unsafe fn substringWithRange_(&self, range: NSRange) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , substringWithRange : range) }
    }
    unsafe fn getCharacters_range_(&self, buffer: *mut unichar, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getCharacters : buffer range : range) }
    }
    unsafe fn compare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , compare : string) }
    }
    unsafe fn compare_options_(
        &self,
        string: NSString,
        mask: NSStringCompareOptions,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , compare : string options : mask) }
    }
    unsafe fn compare_options_range_(
        &self,
        string: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToCompare: NSRange,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , compare : string options : mask range : rangeOfReceiverToCompare)
        }
    }
    unsafe fn compare_options_range_locale_(
        &self,
        string: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToCompare: NSRange,
        locale: id,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , compare : string options : mask range : rangeOfReceiverToCompare locale : locale)
        }
    }
    unsafe fn caseInsensitiveCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , caseInsensitiveCompare : string) }
    }
    unsafe fn localizedCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , localizedCompare : string) }
    }
    unsafe fn localizedCaseInsensitiveCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , localizedCaseInsensitiveCompare : string) }
    }
    unsafe fn localizedStandardCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , localizedStandardCompare : string) }
    }
    unsafe fn isEqualToString_(&self, aString: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isEqualToString : aString) }
    }
    unsafe fn hasPrefix_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , hasPrefix : str_) }
    }
    unsafe fn hasSuffix_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , hasSuffix : str_) }
    }
    unsafe fn commonPrefixWithString_options_(
        &self,
        str_: NSString,
        mask: NSStringCompareOptions,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , commonPrefixWithString : str_ options : mask) }
    }
    unsafe fn containsString_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , containsString : str_) }
    }
    unsafe fn localizedCaseInsensitiveContainsString_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , localizedCaseInsensitiveContainsString : str_) }
    }
    unsafe fn localizedStandardContainsString_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , localizedStandardContainsString : str_) }
    }
    unsafe fn localizedStandardRangeOfString_(&self, str_: NSString) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , localizedStandardRangeOfString : str_) }
    }
    unsafe fn rangeOfString_(&self, searchString: NSString) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , rangeOfString : searchString) }
    }
    unsafe fn rangeOfString_options_(
        &self,
        searchString: NSString,
        mask: NSStringCompareOptions,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , rangeOfString : searchString options : mask) }
    }
    unsafe fn rangeOfString_options_range_(
        &self,
        searchString: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToSearch: NSRange,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , rangeOfString : searchString options : mask range : rangeOfReceiverToSearch)
        }
    }
    unsafe fn rangeOfString_options_range_locale_(
        &self,
        searchString: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToSearch: NSRange,
        locale: NSLocale,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , rangeOfString : searchString options : mask range : rangeOfReceiverToSearch locale : locale)
        }
    }
    unsafe fn rangeOfCharacterFromSet_(&self, searchSet: NSCharacterSet) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , rangeOfCharacterFromSet : searchSet) }
    }
    unsafe fn rangeOfCharacterFromSet_options_(
        &self,
        searchSet: NSCharacterSet,
        mask: NSStringCompareOptions,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , rangeOfCharacterFromSet : searchSet options : mask) }
    }
    unsafe fn rangeOfCharacterFromSet_options_range_(
        &self,
        searchSet: NSCharacterSet,
        mask: NSStringCompareOptions,
        rangeOfReceiverToSearch: NSRange,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , rangeOfCharacterFromSet : searchSet options : mask range : rangeOfReceiverToSearch)
        }
    }
    unsafe fn rangeOfComposedCharacterSequenceAtIndex_(&self, index: NSUInteger) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , rangeOfComposedCharacterSequenceAtIndex : index) }
    }
    unsafe fn rangeOfComposedCharacterSequencesForRange_(&self, range: NSRange) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , rangeOfComposedCharacterSequencesForRange : range) }
    }
    unsafe fn stringByAppendingString_(&self, aString: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByAppendingString : aString) }
    }
    unsafe fn stringByAppendingFormat_(&self, format: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByAppendingFormat : format) }
    }
    unsafe fn uppercaseStringWithLocale_(&self, locale: NSLocale) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , uppercaseStringWithLocale : locale) }
    }
    unsafe fn lowercaseStringWithLocale_(&self, locale: NSLocale) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , lowercaseStringWithLocale : locale) }
    }
    unsafe fn capitalizedStringWithLocale_(&self, locale: NSLocale) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , capitalizedStringWithLocale : locale) }
    }
    unsafe fn getLineStart_end_contentsEnd_forRange_(
        &self,
        startPtr: *mut NSUInteger,
        lineEndPtr: *mut NSUInteger,
        contentsEndPtr: *mut NSUInteger,
        range: NSRange,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getLineStart : startPtr end : lineEndPtr contentsEnd : contentsEndPtr forRange : range)
        }
    }
    unsafe fn lineRangeForRange_(&self, range: NSRange) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , lineRangeForRange : range) }
    }
    unsafe fn getParagraphStart_end_contentsEnd_forRange_(
        &self,
        startPtr: *mut NSUInteger,
        parEndPtr: *mut NSUInteger,
        contentsEndPtr: *mut NSUInteger,
        range: NSRange,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getParagraphStart : startPtr end : parEndPtr contentsEnd : contentsEndPtr forRange : range)
        }
    }
    unsafe fn paragraphRangeForRange_(&self, range: NSRange) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , paragraphRangeForRange : range) }
    }
    unsafe fn enumerateSubstringsInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSStringEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , enumerateSubstringsInRange : range options : opts usingBlock : block)
        }
    }
    unsafe fn enumerateLinesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumerateLinesUsingBlock : block) }
    }
    unsafe fn dataUsingEncoding_allowLossyConversion_(
        &self,
        encoding: NSStringEncoding,
        lossy: BOOL,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , dataUsingEncoding : encoding allowLossyConversion : lossy) }
    }
    unsafe fn dataUsingEncoding_(&self, encoding: NSStringEncoding) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , dataUsingEncoding : encoding) }
    }
    unsafe fn canBeConvertedToEncoding_(&self, encoding: NSStringEncoding) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , canBeConvertedToEncoding : encoding) }
    }
    unsafe fn cStringUsingEncoding_(
        &self,
        encoding: NSStringEncoding,
    ) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , cStringUsingEncoding : encoding) }
    }
    unsafe fn getCString_maxLength_encoding_(
        &self,
        buffer: *mut ::std::os::raw::c_char,
        maxBufferCount: NSUInteger,
        encoding: NSStringEncoding,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getCString : buffer maxLength : maxBufferCount encoding : encoding)
        }
    }
    unsafe fn getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(
        &self,
        buffer: *mut ::std::os::raw::c_void,
        maxBufferCount: NSUInteger,
        usedBufferCount: *mut NSUInteger,
        encoding: NSStringEncoding,
        options: NSStringEncodingConversionOptions,
        range: NSRange,
        leftover: NSRangePointer,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getBytes : buffer maxLength : maxBufferCount usedLength : usedBufferCount encoding : encoding options : options range : range remainingRange : leftover)
        }
    }
    unsafe fn maximumLengthOfBytesUsingEncoding_(&self, enc: NSStringEncoding) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , maximumLengthOfBytesUsingEncoding : enc) }
    }
    unsafe fn lengthOfBytesUsingEncoding_(&self, enc: NSStringEncoding) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , lengthOfBytesUsingEncoding : enc) }
    }
    unsafe fn componentsSeparatedByString_(&self, separator: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , componentsSeparatedByString : separator) }
    }
    unsafe fn componentsSeparatedByCharactersInSet_(&self, separator: NSCharacterSet) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , componentsSeparatedByCharactersInSet : separator) }
    }
    unsafe fn stringByTrimmingCharactersInSet_(&self, set: NSCharacterSet) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByTrimmingCharactersInSet : set) }
    }
    unsafe fn stringByPaddingToLength_withString_startingAtIndex_(
        &self,
        newLength: NSUInteger,
        padString: NSString,
        padIndex: NSUInteger,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , stringByPaddingToLength : newLength withString : padString startingAtIndex : padIndex)
        }
    }
    unsafe fn stringByFoldingWithOptions_locale_(
        &self,
        options: NSStringCompareOptions,
        locale: NSLocale,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByFoldingWithOptions : options locale : locale) }
    }
    unsafe fn stringByReplacingOccurrencesOfString_withString_options_range_(
        &self,
        target: NSString,
        replacement: NSString,
        options: NSStringCompareOptions,
        searchRange: NSRange,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , stringByReplacingOccurrencesOfString : target withString : replacement options : options range : searchRange)
        }
    }
    unsafe fn stringByReplacingOccurrencesOfString_withString_(
        &self,
        target: NSString,
        replacement: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , stringByReplacingOccurrencesOfString : target withString : replacement)
        }
    }
    unsafe fn stringByReplacingCharactersInRange_withString_(
        &self,
        range: NSRange,
        replacement: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , stringByReplacingCharactersInRange : range withString : replacement)
        }
    }
    unsafe fn stringByApplyingTransform_reverse_(
        &self,
        transform: NSString,
        reverse: BOOL,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByApplyingTransform : transform reverse : reverse) }
    }
    unsafe fn writeToURL_atomically_encoding_error_(
        &self,
        url: NSURL,
        useAuxiliaryFile: BOOL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , writeToURL : url atomically : useAuxiliaryFile encoding : enc error : error)
        }
    }
    unsafe fn writeToFile_atomically_encoding_error_(
        &self,
        path: NSString,
        useAuxiliaryFile: BOOL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile encoding : enc error : error)
        }
    }
    unsafe fn initWithCharactersNoCopy_length_freeWhenDone_(
        &self,
        characters: *mut unichar,
        length: NSUInteger,
        freeBuffer: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithCharactersNoCopy : characters length : length freeWhenDone : freeBuffer)
        }
    }
    unsafe fn initWithCharactersNoCopy_length_deallocator_(
        &self,
        chars: *mut unichar,
        len: NSUInteger,
        deallocator: *mut ::std::os::raw::c_void,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithCharactersNoCopy : chars length : len deallocator : deallocator)
        }
    }
    unsafe fn initWithCharacters_length_(
        &self,
        characters: *const unichar,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCharacters : characters length : length) }
    }
    unsafe fn initWithUTF8String_(
        &self,
        nullTerminatedCString: *const ::std::os::raw::c_char,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithUTF8String : nullTerminatedCString) }
    }
    unsafe fn initWithString_(&self, aString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithString : aString) }
    }
    unsafe fn initWithFormat_(&self, format: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithFormat : format) }
    }
    unsafe fn initWithFormat_arguments_(&self, format: NSString, argList: va_list) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithFormat : format arguments : argList) }
    }
    unsafe fn initWithFormat_locale_(&self, format: NSString, locale: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithFormat : format locale : locale) }
    }
    unsafe fn initWithFormat_locale_arguments_(
        &self,
        format: NSString,
        locale: id,
        argList: va_list,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithFormat : format locale : locale arguments : argList) }
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers error : error)
        }
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_locale_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        locale: id,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers locale : locale error : error)
        }
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        argList: va_list,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers arguments : argList error : error)
        }
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        locale: id,
        argList: va_list,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers locale : locale arguments : argList error : error)
        }
    }
    unsafe fn initWithData_encoding_(
        &self,
        data: NSData,
        encoding: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithData : data encoding : encoding) }
    }
    unsafe fn initWithBytes_length_encoding_(
        &self,
        bytes: *const ::std::os::raw::c_void,
        len: NSUInteger,
        encoding: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithBytes : bytes length : len encoding : encoding) }
    }
    unsafe fn initWithBytesNoCopy_length_encoding_freeWhenDone_(
        &self,
        bytes: *mut ::std::os::raw::c_void,
        len: NSUInteger,
        encoding: NSStringEncoding,
        freeBuffer: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithBytesNoCopy : bytes length : len encoding : encoding freeWhenDone : freeBuffer)
        }
    }
    unsafe fn initWithBytesNoCopy_length_encoding_deallocator_(
        &self,
        bytes: *mut ::std::os::raw::c_void,
        len: NSUInteger,
        encoding: NSStringEncoding,
        deallocator: *mut ::std::os::raw::c_void,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithBytesNoCopy : bytes length : len encoding : encoding deallocator : deallocator)
        }
    }
    unsafe fn initWithCString_encoding_(
        &self,
        nullTerminatedCString: *const ::std::os::raw::c_char,
        encoding: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCString : nullTerminatedCString encoding : encoding) }
    }
    unsafe fn initWithContentsOfURL_encoding_error_(
        &self,
        url: NSURL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url encoding : enc error : error) }
    }
    unsafe fn initWithContentsOfFile_encoding_error_(
        &self,
        path: NSString,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfFile : path encoding : enc error : error) }
    }
    unsafe fn initWithContentsOfURL_usedEncoding_error_(
        &self,
        url: NSURL,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithContentsOfURL : url usedEncoding : enc error : error)
        }
    }
    unsafe fn initWithContentsOfFile_usedEncoding_error_(
        &self,
        path: NSString,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithContentsOfFile : path usedEncoding : enc error : error)
        }
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, doubleValue) }
    }
    unsafe fn floatValue(&self) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, floatValue) }
    }
    unsafe fn intValue(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, intValue) }
    }
    unsafe fn integerValue(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, integerValue) }
    }
    unsafe fn longLongValue(&self) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, longLongValue) }
    }
    unsafe fn boolValue(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, boolValue) }
    }
    unsafe fn uppercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, uppercaseString) }
    }
    unsafe fn lowercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, lowercaseString) }
    }
    unsafe fn capitalizedString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, capitalizedString) }
    }
    unsafe fn localizedUppercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedUppercaseString) }
    }
    unsafe fn localizedLowercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedLowercaseString) }
    }
    unsafe fn localizedCapitalizedString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedCapitalizedString) }
    }
    unsafe fn UTF8String(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, UTF8String) }
    }
    unsafe fn fastestEncoding(&self) -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fastestEncoding) }
    }
    unsafe fn smallestEncoding(&self) -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, smallestEncoding) }
    }
    unsafe fn decomposedStringWithCanonicalMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decomposedStringWithCanonicalMapping) }
    }
    unsafe fn precomposedStringWithCanonicalMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, precomposedStringWithCanonicalMapping) }
    }
    unsafe fn decomposedStringWithCompatibilityMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, decomposedStringWithCompatibilityMapping) }
    }
    unsafe fn precomposedStringWithCompatibilityMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, precomposedStringWithCompatibilityMapping) }
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, description) }
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hash) }
    }
    unsafe fn localizedNameOfStringEncoding_(encoding: NSStringEncoding) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , localizedNameOfStringEncoding : encoding) }
    }
    unsafe fn string() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSString), string) }
    }
    unsafe fn stringWithString_(string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithString : string) }
    }
    unsafe fn stringWithCharacters_length_(
        characters: *const unichar,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , stringWithCharacters : characters length : length)
        }
    }
    unsafe fn stringWithUTF8String_(
        nullTerminatedCString: *const ::std::os::raw::c_char,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithUTF8String : nullTerminatedCString) }
    }
    unsafe fn stringWithFormat_(format: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithFormat : format) }
    }
    unsafe fn localizedStringWithFormat_(format: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , localizedStringWithFormat : format) }
    }
    unsafe fn stringWithValidatedFormat_validFormatSpecifiers_error_(
        format: NSString,
        validFormatSpecifiers: NSString,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , stringWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers error : error)
        }
    }
    unsafe fn localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
        format: NSString,
        validFormatSpecifiers: NSString,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , localizedStringWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers error : error)
        }
    }
    unsafe fn stringWithCString_encoding_(
        cString: *const ::std::os::raw::c_char,
        enc: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithCString : cString encoding : enc) }
    }
    unsafe fn stringWithContentsOfURL_encoding_error_(
        url: NSURL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , stringWithContentsOfURL : url encoding : enc error : error)
        }
    }
    unsafe fn stringWithContentsOfFile_encoding_error_(
        path: NSString,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , stringWithContentsOfFile : path encoding : enc error : error)
        }
    }
    unsafe fn stringWithContentsOfURL_usedEncoding_error_(
        url: NSURL,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , stringWithContentsOfURL : url usedEncoding : enc error : error)
        }
    }
    unsafe fn stringWithContentsOfFile_usedEncoding_error_(
        path: NSString,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , stringWithContentsOfFile : path usedEncoding : enc error : error)
        }
    }
    unsafe fn availableStringEncodings() -> *const NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSString), availableStringEncodings) }
    }
    unsafe fn defaultCStringEncoding() -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSString), defaultCStringEncoding) }
    }
}
pub const NSStringEnumerationOptions_NSStringEnumerationByLines: NSStringEnumerationOptions = 0;
pub const NSStringEnumerationOptions_NSStringEnumerationByParagraphs: NSStringEnumerationOptions =
    1;
pub const NSStringEnumerationOptions_NSStringEnumerationByComposedCharacterSequences:
    NSStringEnumerationOptions = 2;
pub const NSStringEnumerationOptions_NSStringEnumerationByWords: NSStringEnumerationOptions = 3;
pub const NSStringEnumerationOptions_NSStringEnumerationBySentences: NSStringEnumerationOptions = 4;
pub const NSStringEnumerationOptions_NSStringEnumerationByCaretPositions:
    NSStringEnumerationOptions = 5;
pub const NSStringEnumerationOptions_NSStringEnumerationByDeletionClusters:
    NSStringEnumerationOptions = 6;
pub const NSStringEnumerationOptions_NSStringEnumerationReverse: NSStringEnumerationOptions = 256;
pub const NSStringEnumerationOptions_NSStringEnumerationSubstringNotRequired:
    NSStringEnumerationOptions = 512;
pub const NSStringEnumerationOptions_NSStringEnumerationLocalized: NSStringEnumerationOptions =
    1024;
pub type NSStringEnumerationOptions = NSUInteger;
pub type NSStringTransform = NSString;
unsafe extern "C" {
    pub static NSStringTransformLatinToKatakana: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformLatinToHiragana: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformLatinToHangul: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformLatinToArabic: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformLatinToHebrew: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformLatinToThai: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformLatinToCyrillic: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformLatinToGreek: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformToLatin: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformMandarinToLatin: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformHiraganaToKatakana: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformFullwidthToHalfwidth: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformToXMLHex: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformToUnicodeName: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformStripCombiningMarks: NSStringTransform;
}
unsafe extern "C" {
    pub static NSStringTransformStripDiacritics: NSStringTransform;
}
pub type NSStringEncodingDetectionOptionsKey = NSString;
impl NSString_NSStringEncodingDetection for NSString {}
pub trait NSString_NSStringEncodingDetection: Sized + std::ops::Deref {
    unsafe fn stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
        data: NSData,
        opts: NSDictionary,
        string: *mut NSString,
        usedLossyConversion: *mut BOOL,
    ) -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSString) , stringEncodingForData : data encodingOptions : opts convertedString : string usedLossyConversion : usedLossyConversion)
        }
    }
}
unsafe extern "C" {
    pub static NSStringEncodingDetectionSuggestedEncodingsKey: NSStringEncodingDetectionOptionsKey;
}
unsafe extern "C" {
    pub static NSStringEncodingDetectionDisallowedEncodingsKey: NSStringEncodingDetectionOptionsKey;
}
unsafe extern "C" {
    pub static NSStringEncodingDetectionUseOnlySuggestedEncodingsKey:
        NSStringEncodingDetectionOptionsKey;
}
unsafe extern "C" {
    pub static NSStringEncodingDetectionAllowLossyKey: NSStringEncodingDetectionOptionsKey;
}
unsafe extern "C" {
    pub static NSStringEncodingDetectionFromWindowsKey: NSStringEncodingDetectionOptionsKey;
}
unsafe extern "C" {
    pub static NSStringEncodingDetectionLossySubstitutionKey: NSStringEncodingDetectionOptionsKey;
}
unsafe extern "C" {
    pub static NSStringEncodingDetectionLikelyLanguageKey: NSStringEncodingDetectionOptionsKey;
}
impl NSString_NSItemProvider for NSString {}
pub trait NSString_NSItemProvider: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableString(pub id);
impl std::ops::Deref for NSMutableString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableString {}
impl NSMutableString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableString), alloc) })
    }
}
impl INSString for NSMutableString {}
impl PNSCopying for NSMutableString {}
impl PNSMutableCopying for NSMutableString {}
impl PNSSecureCoding for NSMutableString {}
impl From<NSMutableString> for NSString {
    fn from(child: NSMutableString) -> NSString {
        NSString(child.0)
    }
}
impl std::convert::TryFrom<NSString> for NSMutableString {
    type Error = &'static str;
    fn try_from(parent: NSString) -> Result<NSMutableString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableString)) };
        if is_kind_of {
            Ok(NSMutableString(parent.0))
        } else {
            Err("This NSString cannot be downcasted to NSMutableString")
        }
    }
}
impl INSObject for NSMutableString {}
impl PNSObject for NSMutableString {}
impl From<NSMutableString> for NSObject {
    fn from(child: NSMutableString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableString)) };
        if is_kind_of {
            Ok(NSMutableString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableString")
        }
    }
}
impl INSMutableString for NSMutableString {}
pub trait INSMutableString: Sized + std::ops::Deref {
    unsafe fn replaceCharactersInRange_withString_(&self, range: NSRange, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , replaceCharactersInRange : range withString : aString) }
    }
}
impl NSMutableString_NSMutableStringExtensionMethods for NSMutableString {}
pub trait NSMutableString_NSMutableStringExtensionMethods: Sized + std::ops::Deref {
    unsafe fn insertString_atIndex_(&self, aString: NSString, loc: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , insertString : aString atIndex : loc) }
    }
    unsafe fn deleteCharactersInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , deleteCharactersInRange : range) }
    }
    unsafe fn appendString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , appendString : aString) }
    }
    unsafe fn appendFormat_(&self, format: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , appendFormat : format) }
    }
    unsafe fn setString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setString : aString) }
    }
    unsafe fn replaceOccurrencesOfString_withString_options_range_(
        &self,
        target: NSString,
        replacement: NSString,
        options: NSStringCompareOptions,
        searchRange: NSRange,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , replaceOccurrencesOfString : target withString : replacement options : options range : searchRange)
        }
    }
    unsafe fn applyTransform_reverse_range_updatedRange_(
        &self,
        transform: NSString,
        reverse: BOOL,
        range: NSRange,
        resultingRange: NSRangePointer,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , applyTransform : transform reverse : reverse range : range updatedRange : resultingRange)
        }
    }
    unsafe fn initWithCapacity_(&self, capacity: NSUInteger) -> NSMutableString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCapacity : capacity) }
    }
    unsafe fn stringWithCapacity_(capacity: NSUInteger) -> NSMutableString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableString) , stringWithCapacity : capacity) }
    }
}
unsafe extern "C" {
    pub static NSCharacterConversionException: NSExceptionName;
}
unsafe extern "C" {
    pub static NSParseErrorException: NSExceptionName;
}
impl NSString_NSExtendedStringPropertyListParsing for NSString {}
pub trait NSString_NSExtendedStringPropertyListParsing: Sized + std::ops::Deref {
    unsafe fn propertyList(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, propertyList) }
    }
    unsafe fn propertyListFromStringsFileFormat(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, propertyListFromStringsFileFormat) }
    }
}
impl NSString_NSStringDeprecated for NSString {}
pub trait NSString_NSStringDeprecated: Sized + std::ops::Deref {
    unsafe fn cString(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, cString) }
    }
    unsafe fn lossyCString(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, lossyCString) }
    }
    unsafe fn cStringLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, cStringLength) }
    }
    unsafe fn getCString_(&self, bytes: *mut ::std::os::raw::c_char)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getCString : bytes) }
    }
    unsafe fn getCString_maxLength_(
        &self,
        bytes: *mut ::std::os::raw::c_char,
        maxLength: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getCString : bytes maxLength : maxLength) }
    }
    unsafe fn getCString_maxLength_range_remainingRange_(
        &self,
        bytes: *mut ::std::os::raw::c_char,
        maxLength: NSUInteger,
        aRange: NSRange,
        leftoverRange: NSRangePointer,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getCString : bytes maxLength : maxLength range : aRange remainingRange : leftoverRange)
        }
    }
    unsafe fn writeToFile_atomically_(&self, path: NSString, useAuxiliaryFile: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile) }
    }
    unsafe fn writeToURL_atomically_(&self, url: NSURL, atomically: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeToURL : url atomically : atomically) }
    }
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfFile : path) }
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithContentsOfURL : url) }
    }
    unsafe fn initWithCStringNoCopy_length_freeWhenDone_(
        &self,
        bytes: *mut ::std::os::raw::c_char,
        length: NSUInteger,
        freeBuffer: BOOL,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithCStringNoCopy : bytes length : length freeWhenDone : freeBuffer)
        }
    }
    unsafe fn initWithCString_length_(
        &self,
        bytes: *const ::std::os::raw::c_char,
        length: NSUInteger,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCString : bytes length : length) }
    }
    unsafe fn initWithCString_(&self, bytes: *const ::std::os::raw::c_char) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCString : bytes) }
    }
    unsafe fn getCharacters_(&self, buffer: *mut unichar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getCharacters : buffer) }
    }
    unsafe fn stringWithContentsOfFile_(path: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithContentsOfFile : path) }
    }
    unsafe fn stringWithContentsOfURL_(url: NSURL) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithContentsOfURL : url) }
    }
    unsafe fn stringWithCString_length_(
        bytes: *const ::std::os::raw::c_char,
        length: NSUInteger,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithCString : bytes length : length) }
    }
    unsafe fn stringWithCString_(bytes: *const ::std::os::raw::c_char) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , stringWithCString : bytes) }
    }
}
pub const NSProprietaryStringEncoding: _bindgen_ty_23 = 65536;
pub type _bindgen_ty_23 = NSStringEncoding;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSimpleCString(pub id);
impl std::ops::Deref for NSSimpleCString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSimpleCString {}
impl NSSimpleCString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSimpleCString), alloc) })
    }
}
impl INSString for NSSimpleCString {}
impl PNSCopying for NSSimpleCString {}
impl PNSMutableCopying for NSSimpleCString {}
impl PNSSecureCoding for NSSimpleCString {}
impl From<NSSimpleCString> for NSString {
    fn from(child: NSSimpleCString) -> NSString {
        NSString(child.0)
    }
}
impl std::convert::TryFrom<NSString> for NSSimpleCString {
    type Error = &'static str;
    fn try_from(parent: NSString) -> Result<NSSimpleCString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSSimpleCString)) };
        if is_kind_of {
            Ok(NSSimpleCString(parent.0))
        } else {
            Err("This NSString cannot be downcasted to NSSimpleCString")
        }
    }
}
impl INSObject for NSSimpleCString {}
impl PNSObject for NSSimpleCString {}
impl From<NSSimpleCString> for NSObject {
    fn from(child: NSSimpleCString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSSimpleCString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSSimpleCString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSSimpleCString)) };
        if is_kind_of {
            Ok(NSSimpleCString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSSimpleCString")
        }
    }
}
impl INSSimpleCString for NSSimpleCString {}
pub trait INSSimpleCString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSConstantString(pub id);
impl std::ops::Deref for NSConstantString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSConstantString {}
impl NSConstantString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSConstantString), alloc) })
    }
}
impl INSSimpleCString for NSConstantString {}
impl From<NSConstantString> for NSSimpleCString {
    fn from(child: NSConstantString) -> NSSimpleCString {
        NSSimpleCString(child.0)
    }
}
impl std::convert::TryFrom<NSSimpleCString> for NSConstantString {
    type Error = &'static str;
    fn try_from(parent: NSSimpleCString) -> Result<NSConstantString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSConstantString)) };
        if is_kind_of {
            Ok(NSConstantString(parent.0))
        } else {
            Err("This NSSimpleCString cannot be downcasted to NSConstantString")
        }
    }
}
impl INSString for NSConstantString {}
impl PNSCopying for NSConstantString {}
impl PNSMutableCopying for NSConstantString {}
impl PNSSecureCoding for NSConstantString {}
impl From<NSConstantString> for NSString {
    fn from(child: NSConstantString) -> NSString {
        NSString(child.0)
    }
}
impl std::convert::TryFrom<NSString> for NSConstantString {
    type Error = &'static str;
    fn try_from(parent: NSString) -> Result<NSConstantString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSConstantString)) };
        if is_kind_of {
            Ok(NSConstantString(parent.0))
        } else {
            Err("This NSString cannot be downcasted to NSConstantString")
        }
    }
}
impl INSObject for NSConstantString {}
impl PNSObject for NSConstantString {}
impl From<NSConstantString> for NSObject {
    fn from(child: NSConstantString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSConstantString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSConstantString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSConstantString)) };
        if is_kind_of {
            Ok(NSConstantString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSConstantString")
        }
    }
}
impl INSConstantString for NSConstantString {}
pub trait INSConstantString: Sized + std::ops::Deref {}
impl NSString_NSStringPathExtensions for NSString {}
pub trait NSString_NSStringPathExtensions: Sized + std::ops::Deref {
    unsafe fn stringByAppendingPathComponent_(&self, str_: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByAppendingPathComponent : str_) }
    }
    unsafe fn stringByAppendingPathExtension_(&self, str_: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByAppendingPathExtension : str_) }
    }
    unsafe fn stringsByAppendingPaths_(&self, paths: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringsByAppendingPaths : paths) }
    }
    unsafe fn completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_(
        &self,
        outputName: *mut NSString,
        flag: BOOL,
        outputArray: *mut NSArray,
        filterTypes: NSArray,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , completePathIntoString : outputName caseSensitive : flag matchesIntoArray : outputArray filterTypes : filterTypes)
        }
    }
    unsafe fn getFileSystemRepresentation_maxLength_(
        &self,
        cname: *mut ::std::os::raw::c_char,
        max: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getFileSystemRepresentation : cname maxLength : max) }
    }
    unsafe fn pathComponents(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, pathComponents) }
    }
    unsafe fn isAbsolutePath(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isAbsolutePath) }
    }
    unsafe fn lastPathComponent(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, lastPathComponent) }
    }
    unsafe fn stringByDeletingLastPathComponent(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringByDeletingLastPathComponent) }
    }
    unsafe fn pathExtension(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, pathExtension) }
    }
    unsafe fn stringByDeletingPathExtension(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringByDeletingPathExtension) }
    }
    unsafe fn stringByAbbreviatingWithTildeInPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringByAbbreviatingWithTildeInPath) }
    }
    unsafe fn stringByExpandingTildeInPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringByExpandingTildeInPath) }
    }
    unsafe fn stringByStandardizingPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringByStandardizingPath) }
    }
    unsafe fn stringByResolvingSymlinksInPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringByResolvingSymlinksInPath) }
    }
    unsafe fn fileSystemRepresentation(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileSystemRepresentation) }
    }
    unsafe fn pathWithComponents_(components: NSArray) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSString) , pathWithComponents : components) }
    }
}
impl<ObjectType: 'static> NSArray_NSArrayPathExtensions<ObjectType> for NSArray {}
pub trait NSArray_NSArrayPathExtensions<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn pathsMatchingExtensions_(&self, filterTypes: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , pathsMatchingExtensions : filterTypes) }
    }
}
unsafe extern "C" {
    pub fn NSUserName() -> NSString;
}
unsafe extern "C" {
    pub fn NSFullUserName() -> NSString;
}
unsafe extern "C" {
    pub fn NSHomeDirectory() -> NSString;
}
unsafe extern "C" {
    pub fn NSHomeDirectoryForUser(userName: NSString) -> NSString;
}
unsafe extern "C" {
    pub fn NSTemporaryDirectory() -> NSString;
}
unsafe extern "C" {
    pub fn NSOpenStepRootDirectory() -> NSString;
}
pub const NSSearchPathDirectory_NSApplicationDirectory: NSSearchPathDirectory = 1;
pub const NSSearchPathDirectory_NSDemoApplicationDirectory: NSSearchPathDirectory = 2;
pub const NSSearchPathDirectory_NSDeveloperApplicationDirectory: NSSearchPathDirectory = 3;
pub const NSSearchPathDirectory_NSAdminApplicationDirectory: NSSearchPathDirectory = 4;
pub const NSSearchPathDirectory_NSLibraryDirectory: NSSearchPathDirectory = 5;
pub const NSSearchPathDirectory_NSDeveloperDirectory: NSSearchPathDirectory = 6;
pub const NSSearchPathDirectory_NSUserDirectory: NSSearchPathDirectory = 7;
pub const NSSearchPathDirectory_NSDocumentationDirectory: NSSearchPathDirectory = 8;
pub const NSSearchPathDirectory_NSDocumentDirectory: NSSearchPathDirectory = 9;
pub const NSSearchPathDirectory_NSCoreServiceDirectory: NSSearchPathDirectory = 10;
pub const NSSearchPathDirectory_NSAutosavedInformationDirectory: NSSearchPathDirectory = 11;
pub const NSSearchPathDirectory_NSDesktopDirectory: NSSearchPathDirectory = 12;
pub const NSSearchPathDirectory_NSCachesDirectory: NSSearchPathDirectory = 13;
pub const NSSearchPathDirectory_NSApplicationSupportDirectory: NSSearchPathDirectory = 14;
pub const NSSearchPathDirectory_NSDownloadsDirectory: NSSearchPathDirectory = 15;
pub const NSSearchPathDirectory_NSInputMethodsDirectory: NSSearchPathDirectory = 16;
pub const NSSearchPathDirectory_NSMoviesDirectory: NSSearchPathDirectory = 17;
pub const NSSearchPathDirectory_NSMusicDirectory: NSSearchPathDirectory = 18;
pub const NSSearchPathDirectory_NSPicturesDirectory: NSSearchPathDirectory = 19;
pub const NSSearchPathDirectory_NSPrinterDescriptionDirectory: NSSearchPathDirectory = 20;
pub const NSSearchPathDirectory_NSSharedPublicDirectory: NSSearchPathDirectory = 21;
pub const NSSearchPathDirectory_NSPreferencePanesDirectory: NSSearchPathDirectory = 22;
pub const NSSearchPathDirectory_NSApplicationScriptsDirectory: NSSearchPathDirectory = 23;
pub const NSSearchPathDirectory_NSItemReplacementDirectory: NSSearchPathDirectory = 99;
pub const NSSearchPathDirectory_NSAllApplicationsDirectory: NSSearchPathDirectory = 100;
pub const NSSearchPathDirectory_NSAllLibrariesDirectory: NSSearchPathDirectory = 101;
pub const NSSearchPathDirectory_NSTrashDirectory: NSSearchPathDirectory = 102;
pub type NSSearchPathDirectory = NSUInteger;
pub const NSSearchPathDomainMask_NSUserDomainMask: NSSearchPathDomainMask = 1;
pub const NSSearchPathDomainMask_NSLocalDomainMask: NSSearchPathDomainMask = 2;
pub const NSSearchPathDomainMask_NSNetworkDomainMask: NSSearchPathDomainMask = 4;
pub const NSSearchPathDomainMask_NSSystemDomainMask: NSSearchPathDomainMask = 8;
pub const NSSearchPathDomainMask_NSAllDomainsMask: NSSearchPathDomainMask = 65535;
pub type NSSearchPathDomainMask = NSUInteger;
unsafe extern "C" {
    pub fn NSSearchPathForDirectoriesInDomains(
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
        expandTilde: BOOL,
    ) -> NSArray;
}
pub type NSNotificationName = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOperationQueue(pub id);
impl std::ops::Deref for NSOperationQueue {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOperationQueue {}
impl NSOperationQueue {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOperationQueue), alloc) })
    }
}
impl INSOperationQueue for NSOperationQueue {}
pub trait INSOperationQueue: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNotification(pub id);
impl std::ops::Deref for NSNotification {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNotification {}
impl NSNotification {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNotification), alloc) })
    }
}
impl PNSCopying for NSNotification {}
impl PNSCoding for NSNotification {}
impl INSObject for NSNotification {}
impl PNSObject for NSNotification {}
impl From<NSNotification> for NSObject {
    fn from(child: NSNotification) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNotification {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNotification, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSNotification)) };
        if is_kind_of {
            Ok(NSNotification(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNotification")
        }
    }
}
impl INSNotification for NSNotification {}
pub trait INSNotification: Sized + std::ops::Deref {
    unsafe fn initWithName_object_userInfo_(
        &self,
        name: NSString,
        object: id,
        userInfo: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithName : name object : object userInfo : userInfo) }
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
    unsafe fn name(&self) -> NSNotificationName
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, name) }
    }
    unsafe fn object(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, object) }
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, userInfo) }
    }
}
impl NSNotification_NSNotificationCreation for NSNotification {}
pub trait NSNotification_NSNotificationCreation: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn notificationWithName_object_(aName: NSString, anObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSNotification) , notificationWithName : aName object : anObject)
        }
    }
    unsafe fn notificationWithName_object_userInfo_(
        aName: NSString,
        anObject: id,
        aUserInfo: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSNotification) , notificationWithName : aName object : anObject userInfo : aUserInfo)
        }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNotificationCenter(pub id);
impl std::ops::Deref for NSNotificationCenter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNotificationCenter {}
impl NSNotificationCenter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNotificationCenter), alloc) })
    }
}
impl INSObject for NSNotificationCenter {}
impl PNSObject for NSNotificationCenter {}
impl From<NSNotificationCenter> for NSObject {
    fn from(child: NSNotificationCenter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNotificationCenter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNotificationCenter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSNotificationCenter)) };
        if is_kind_of {
            Ok(NSNotificationCenter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNotificationCenter")
        }
    }
}
impl INSNotificationCenter for NSNotificationCenter {}
pub trait INSNotificationCenter: Sized + std::ops::Deref {
    unsafe fn addObserver_selector_name_object_(
        &self,
        observer: id,
        aSelector: objc::runtime::Sel,
        aName: NSString,
        anObject: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , addObserver : observer selector : aSelector name : aName object : anObject)
        }
    }
    unsafe fn postNotification_(&self, notification: NSNotification)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , postNotification : notification) }
    }
    unsafe fn postNotificationName_object_(&self, aName: NSString, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , postNotificationName : aName object : anObject) }
    }
    unsafe fn postNotificationName_object_userInfo_(
        &self,
        aName: NSString,
        anObject: id,
        aUserInfo: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , postNotificationName : aName object : anObject userInfo : aUserInfo)
        }
    }
    unsafe fn removeObserver_(&self, observer: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObserver : observer) }
    }
    unsafe fn removeObserver_name_object_(&self, observer: id, aName: NSString, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeObserver : observer name : aName object : anObject) }
    }
    unsafe fn addObserverForName_object_queue_usingBlock_(
        &self,
        name: NSString,
        obj: id,
        queue: NSOperationQueue,
        block: *mut ::std::os::raw::c_void,
    ) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , addObserverForName : name object : obj queue : queue usingBlock : block)
        }
    }
    unsafe fn defaultCenter() -> NSNotificationCenter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSNotificationCenter), defaultCenter) }
    }
}
pub type NSErrorDomain = NSString;
unsafe extern "C" {
    pub static NSCocoaErrorDomain: NSErrorDomain;
}
unsafe extern "C" {
    pub static NSPOSIXErrorDomain: NSErrorDomain;
}
unsafe extern "C" {
    pub static NSOSStatusErrorDomain: NSErrorDomain;
}
unsafe extern "C" {
    pub static NSMachErrorDomain: NSErrorDomain;
}
pub type NSErrorUserInfoKey = NSString;
unsafe extern "C" {
    pub static NSUnderlyingErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSMultipleUnderlyingErrorsKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSLocalizedDescriptionKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSLocalizedFailureReasonErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSLocalizedRecoverySuggestionErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSLocalizedRecoveryOptionsErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSRecoveryAttempterErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSHelpAnchorErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSDebugDescriptionErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSLocalizedFailureErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSStringEncodingErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSURLErrorKey: NSErrorUserInfoKey;
}
unsafe extern "C" {
    pub static NSFilePathErrorKey: NSErrorUserInfoKey;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSError(pub id);
impl std::ops::Deref for NSError {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSError {}
impl NSError {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSError), alloc) })
    }
}
impl PNSCopying for NSError {}
impl PNSSecureCoding for NSError {}
impl INSObject for NSError {}
impl PNSObject for NSError {}
impl From<NSError> for NSObject {
    fn from(child: NSError) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSError {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSError, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSError)) };
        if is_kind_of {
            Ok(NSError(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSError")
        }
    }
}
impl INSError for NSError {}
pub trait INSError: Sized + std::ops::Deref {
    unsafe fn initWithDomain_code_userInfo_(
        &self,
        domain: NSString,
        code: NSInteger,
        dict: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithDomain : domain code : code userInfo : dict) }
    }
    unsafe fn domain(&self) -> NSErrorDomain
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, domain) }
    }
    unsafe fn code(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, code) }
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, userInfo) }
    }
    unsafe fn localizedDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedDescription) }
    }
    unsafe fn localizedFailureReason(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedFailureReason) }
    }
    unsafe fn localizedRecoverySuggestion(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedRecoverySuggestion) }
    }
    unsafe fn localizedRecoveryOptions(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedRecoveryOptions) }
    }
    unsafe fn recoveryAttempter(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, recoveryAttempter) }
    }
    unsafe fn helpAnchor(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, helpAnchor) }
    }
    unsafe fn underlyingErrors(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, underlyingErrors) }
    }
    unsafe fn errorWithDomain_code_userInfo_(
        domain: NSString,
        code: NSInteger,
        dict: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSError) , errorWithDomain : domain code : code userInfo : dict)
        }
    }
    unsafe fn setUserInfoValueProviderForDomain_provider_(
        errorDomain: NSString,
        provider: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSError) , setUserInfoValueProviderForDomain : errorDomain provider : provider)
        }
    }
    unsafe fn userInfoValueProviderForDomain_(errorDomain: NSString) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSError) , userInfoValueProviderForDomain : errorDomain) }
    }
}
impl NSObject_NSErrorRecoveryAttempting for NSObject {}
pub trait NSObject_NSErrorRecoveryAttempting: Sized + std::ops::Deref {
    unsafe fn attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_(
        &self,
        error: NSError,
        recoveryOptionIndex: NSUInteger,
        delegate: id,
        didRecoverSelector: objc::runtime::Sel,
        contextInfo: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , attemptRecoveryFromError : error optionIndex : recoveryOptionIndex delegate : delegate didRecoverSelector : didRecoverSelector contextInfo : contextInfo)
        }
    }
    unsafe fn attemptRecoveryFromError_optionIndex_(
        &self,
        error: NSError,
        recoveryOptionIndex: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , attemptRecoveryFromError : error optionIndex : recoveryOptionIndex)
        }
    }
}
pub const NSOpenStepUnicodeReservedBase: _bindgen_ty_24 = 62464;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCharacterSet(pub id);
impl std::ops::Deref for NSCharacterSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCharacterSet {}
impl NSCharacterSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCharacterSet), alloc) })
    }
}
impl PNSCopying for NSCharacterSet {}
impl PNSMutableCopying for NSCharacterSet {}
impl PNSSecureCoding for NSCharacterSet {}
impl INSObject for NSCharacterSet {}
impl PNSObject for NSCharacterSet {}
impl From<NSCharacterSet> for NSObject {
    fn from(child: NSCharacterSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCharacterSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCharacterSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSCharacterSet)) };
        if is_kind_of {
            Ok(NSCharacterSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCharacterSet")
        }
    }
}
impl INSCharacterSet for NSCharacterSet {}
pub trait INSCharacterSet: Sized + std::ops::Deref {
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
    unsafe fn characterIsMember_(&self, aCharacter: unichar) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , characterIsMember : aCharacter) }
    }
    unsafe fn longCharacterIsMember_(&self, theLongChar: UTF32Char) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , longCharacterIsMember : theLongChar) }
    }
    unsafe fn isSupersetOfSet_(&self, theOtherSet: NSCharacterSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isSupersetOfSet : theOtherSet) }
    }
    unsafe fn hasMemberInPlane_(&self, thePlane: u8) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , hasMemberInPlane : thePlane) }
    }
    unsafe fn bitmapRepresentation(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, bitmapRepresentation) }
    }
    unsafe fn invertedSet(&self) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, invertedSet) }
    }
    unsafe fn characterSetWithRange_(aRange: NSRange) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSCharacterSet) , characterSetWithRange : aRange) }
    }
    unsafe fn characterSetWithCharactersInString_(aString: NSString) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSCharacterSet) , characterSetWithCharactersInString : aString)
        }
    }
    unsafe fn characterSetWithBitmapRepresentation_(data: NSData) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSCharacterSet) , characterSetWithBitmapRepresentation : data)
        }
    }
    unsafe fn characterSetWithContentsOfFile_(fName: NSString) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSCharacterSet) , characterSetWithContentsOfFile : fName) }
    }
    unsafe fn controlCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), controlCharacterSet) }
    }
    unsafe fn whitespaceCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), whitespaceCharacterSet) }
    }
    unsafe fn whitespaceAndNewlineCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), whitespaceAndNewlineCharacterSet) }
    }
    unsafe fn decimalDigitCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), decimalDigitCharacterSet) }
    }
    unsafe fn letterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), letterCharacterSet) }
    }
    unsafe fn lowercaseLetterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), lowercaseLetterCharacterSet) }
    }
    unsafe fn uppercaseLetterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), uppercaseLetterCharacterSet) }
    }
    unsafe fn nonBaseCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), nonBaseCharacterSet) }
    }
    unsafe fn alphanumericCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), alphanumericCharacterSet) }
    }
    unsafe fn decomposableCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), decomposableCharacterSet) }
    }
    unsafe fn illegalCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), illegalCharacterSet) }
    }
    unsafe fn punctuationCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), punctuationCharacterSet) }
    }
    unsafe fn capitalizedLetterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), capitalizedLetterCharacterSet) }
    }
    unsafe fn symbolCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), symbolCharacterSet) }
    }
    unsafe fn newlineCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), newlineCharacterSet) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableCharacterSet(pub id);
impl std::ops::Deref for NSMutableCharacterSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableCharacterSet {}
impl NSMutableCharacterSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableCharacterSet), alloc) })
    }
}
impl PNSCopying for NSMutableCharacterSet {}
impl PNSMutableCopying for NSMutableCharacterSet {}
impl PNSSecureCoding for NSMutableCharacterSet {}
impl INSCharacterSet for NSMutableCharacterSet {}
impl From<NSMutableCharacterSet> for NSCharacterSet {
    fn from(child: NSMutableCharacterSet) -> NSCharacterSet {
        NSCharacterSet(child.0)
    }
}
impl std::convert::TryFrom<NSCharacterSet> for NSMutableCharacterSet {
    type Error = &'static str;
    fn try_from(parent: NSCharacterSet) -> Result<NSMutableCharacterSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableCharacterSet)) };
        if is_kind_of {
            Ok(NSMutableCharacterSet(parent.0))
        } else {
            Err("This NSCharacterSet cannot be downcasted to NSMutableCharacterSet")
        }
    }
}
impl INSObject for NSMutableCharacterSet {}
impl PNSObject for NSMutableCharacterSet {}
impl From<NSMutableCharacterSet> for NSObject {
    fn from(child: NSMutableCharacterSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableCharacterSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableCharacterSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSMutableCharacterSet)) };
        if is_kind_of {
            Ok(NSMutableCharacterSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableCharacterSet")
        }
    }
}
impl INSMutableCharacterSet for NSMutableCharacterSet {}
pub trait INSMutableCharacterSet: Sized + std::ops::Deref {
    unsafe fn addCharactersInRange_(&self, aRange: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addCharactersInRange : aRange) }
    }
    unsafe fn removeCharactersInRange_(&self, aRange: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeCharactersInRange : aRange) }
    }
    unsafe fn addCharactersInString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addCharactersInString : aString) }
    }
    unsafe fn removeCharactersInString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeCharactersInString : aString) }
    }
    unsafe fn formUnionWithCharacterSet_(&self, otherSet: NSCharacterSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , formUnionWithCharacterSet : otherSet) }
    }
    unsafe fn formIntersectionWithCharacterSet_(&self, otherSet: NSCharacterSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , formIntersectionWithCharacterSet : otherSet) }
    }
    unsafe fn invert(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, invert) }
    }
    unsafe fn controlCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), controlCharacterSet) }
    }
    unsafe fn whitespaceCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), whitespaceCharacterSet) }
    }
    unsafe fn whitespaceAndNewlineCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send!(
                class!(NSMutableCharacterSet),
                whitespaceAndNewlineCharacterSet
            )
        }
    }
    unsafe fn decimalDigitCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), decimalDigitCharacterSet) }
    }
    unsafe fn letterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), letterCharacterSet) }
    }
    unsafe fn lowercaseLetterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), lowercaseLetterCharacterSet) }
    }
    unsafe fn uppercaseLetterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), uppercaseLetterCharacterSet) }
    }
    unsafe fn nonBaseCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), nonBaseCharacterSet) }
    }
    unsafe fn alphanumericCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), alphanumericCharacterSet) }
    }
    unsafe fn decomposableCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), decomposableCharacterSet) }
    }
    unsafe fn illegalCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), illegalCharacterSet) }
    }
    unsafe fn punctuationCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), punctuationCharacterSet) }
    }
    unsafe fn capitalizedLetterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), capitalizedLetterCharacterSet) }
    }
    unsafe fn symbolCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), symbolCharacterSet) }
    }
    unsafe fn newlineCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSMutableCharacterSet), newlineCharacterSet) }
    }
    unsafe fn characterSetWithRange_(aRange: NSRange) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSMutableCharacterSet) , characterSetWithRange : aRange) }
    }
    unsafe fn characterSetWithCharactersInString_(aString: NSString) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSMutableCharacterSet) , characterSetWithCharactersInString : aString)
        }
    }
    unsafe fn characterSetWithBitmapRepresentation_(data: NSData) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSMutableCharacterSet) , characterSetWithBitmapRepresentation : data)
        }
    }
    unsafe fn characterSetWithContentsOfFile_(fName: NSString) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSMutableCharacterSet) , characterSetWithContentsOfFile : fName)
        }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableData(pub id);
impl std::ops::Deref for NSMutableData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableData {}
impl NSMutableData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableData), alloc) })
    }
}
impl INSMutableData for NSMutableData {}
pub trait INSMutableData: Sized + std::ops::Deref {}
unsafe extern "C" {
    pub static NSHTTPPropertyStatusCodeKey: NSString;
}
unsafe extern "C" {
    pub static NSHTTPPropertyStatusReasonKey: NSString;
}
unsafe extern "C" {
    pub static NSHTTPPropertyServerHTTPVersionKey: NSString;
}
unsafe extern "C" {
    pub static NSHTTPPropertyRedirectionHeadersKey: NSString;
}
unsafe extern "C" {
    pub static NSHTTPPropertyErrorPageDataKey: NSString;
}
unsafe extern "C" {
    pub static NSHTTPPropertyHTTPProxy: NSString;
}
unsafe extern "C" {
    pub static NSFTPPropertyUserLoginKey: NSString;
}
unsafe extern "C" {
    pub static NSFTPPropertyUserPasswordKey: NSString;
}
unsafe extern "C" {
    pub static NSFTPPropertyActiveTransferModeKey: NSString;
}
unsafe extern "C" {
    pub static NSFTPPropertyFileOffsetKey: NSString;
}
unsafe extern "C" {
    pub static NSFTPPropertyFTPProxy: NSString;
}
pub const NSURLHandleStatus_NSURLHandleNotLoaded: NSURLHandleStatus = 0;
pub const NSURLHandleStatus_NSURLHandleLoadSucceeded: NSURLHandleStatus = 1;
pub const NSURLHandleStatus_NSURLHandleLoadInProgress: NSURLHandleStatus = 2;
pub const NSURLHandleStatus_NSURLHandleLoadFailed: NSURLHandleStatus = 3;
pub type NSURLHandleStatus = NSUInteger;
pub trait PNSURLHandleClient: Sized + std::ops::Deref {
    unsafe fn URLHandle_resourceDataDidBecomeAvailable_(
        &self,
        sender: NSURLHandle,
        newBytes: NSData,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , URLHandle : sender resourceDataDidBecomeAvailable : newBytes)
        }
    }
    unsafe fn URLHandleResourceDidBeginLoading_(&self, sender: NSURLHandle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLHandleResourceDidBeginLoading : sender) }
    }
    unsafe fn URLHandleResourceDidFinishLoading_(&self, sender: NSURLHandle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLHandleResourceDidFinishLoading : sender) }
    }
    unsafe fn URLHandleResourceDidCancelLoading_(&self, sender: NSURLHandle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLHandleResourceDidCancelLoading : sender) }
    }
    unsafe fn URLHandle_resourceDidFailLoadingWithReason_(
        &self,
        sender: NSURLHandle,
        reason: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , URLHandle : sender resourceDidFailLoadingWithReason : reason)
        }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLHandle(pub id);
impl std::ops::Deref for NSURLHandle {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLHandle {}
impl NSURLHandle {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLHandle), alloc) })
    }
}
impl INSObject for NSURLHandle {}
impl PNSObject for NSURLHandle {}
impl From<NSURLHandle> for NSObject {
    fn from(child: NSURLHandle) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLHandle {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLHandle, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSURLHandle)) };
        if is_kind_of {
            Ok(NSURLHandle(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLHandle")
        }
    }
}
impl INSURLHandle for NSURLHandle {}
pub trait INSURLHandle: Sized + std::ops::Deref {
    unsafe fn status(&self) -> NSURLHandleStatus
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, status) }
    }
    unsafe fn failureReason(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, failureReason) }
    }
    unsafe fn addClient_(&self, client: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , addClient : client) }
    }
    unsafe fn removeClient_(&self, client: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeClient : client) }
    }
    unsafe fn loadInBackground(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, loadInBackground) }
    }
    unsafe fn cancelLoadInBackground(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, cancelLoadInBackground) }
    }
    unsafe fn resourceData(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, resourceData) }
    }
    unsafe fn availableResourceData(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, availableResourceData) }
    }
    unsafe fn expectedResourceDataSize(&self) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, expectedResourceDataSize) }
    }
    unsafe fn flushCachedData(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, flushCachedData) }
    }
    unsafe fn backgroundLoadDidFailWithReason_(&self, reason: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , backgroundLoadDidFailWithReason : reason) }
    }
    unsafe fn didLoadBytes_loadComplete_(&self, newBytes: NSData, yorn: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , didLoadBytes : newBytes loadComplete : yorn) }
    }
    unsafe fn initWithURL_cached_(&self, anURL: NSURL, willCache: BOOL) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithURL : anURL cached : willCache) }
    }
    unsafe fn propertyForKey_(&self, propertyKey: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , propertyForKey : propertyKey) }
    }
    unsafe fn propertyForKeyIfAvailable_(&self, propertyKey: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , propertyForKeyIfAvailable : propertyKey) }
    }
    unsafe fn writeProperty_forKey_(&self, propertyValue: id, propertyKey: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeProperty : propertyValue forKey : propertyKey) }
    }
    unsafe fn writeData_(&self, data: NSData) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , writeData : data) }
    }
    unsafe fn loadInForeground(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, loadInForeground) }
    }
    unsafe fn beginLoadInBackground(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, beginLoadInBackground) }
    }
    unsafe fn endLoadInBackground(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, endLoadInBackground) }
    }
    unsafe fn registerURLHandleClass_(anURLHandleSubclass: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURLHandle) , registerURLHandleClass : anURLHandleSubclass) }
    }
    unsafe fn URLHandleClassForURL_(anURL: NSURL) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURLHandle) , URLHandleClassForURL : anURL) }
    }
    unsafe fn canInitWithURL_(anURL: NSURL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURLHandle) , canInitWithURL : anURL) }
    }
    unsafe fn cachedHandleForURL_(anURL: NSURL) -> NSURLHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURLHandle) , cachedHandleForURL : anURL) }
    }
}
pub type NSURLResourceKey = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURL(pub id);
impl std::ops::Deref for NSURL {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURL {}
impl NSURL {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURL), alloc) })
    }
}
impl PNSSecureCoding for NSURL {}
impl PNSCopying for NSURL {}
impl INSObject for NSURL {}
impl PNSObject for NSURL {}
impl From<NSURL> for NSObject {
    fn from(child: NSURL) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURL {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURL, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send ! (parent , isKindOfClass : class ! (NSURL)) };
        if is_kind_of {
            Ok(NSURL(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURL")
        }
    }
}
impl INSURL for NSURL {}
pub trait INSURL: Sized + std::ops::Deref {
    unsafe fn initWithScheme_host_path_(
        &self,
        scheme: NSString,
        host: NSString,
        path: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithScheme : scheme host : host path : path) }
    }
    unsafe fn initFileURLWithPath_isDirectory_relativeToURL_(
        &self,
        path: NSString,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initFileURLWithPath : path isDirectory : isDir relativeToURL : baseURL)
        }
    }
    unsafe fn initFileURLWithPath_relativeToURL_(
        &self,
        path: NSString,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initFileURLWithPath : path relativeToURL : baseURL) }
    }
    unsafe fn initFileURLWithPath_isDirectory_(&self, path: NSString, isDir: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initFileURLWithPath : path isDirectory : isDir) }
    }
    unsafe fn initFileURLWithPath_(&self, path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initFileURLWithPath : path) }
    }
    unsafe fn initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
        &self,
        path: *const ::std::os::raw::c_char,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initFileURLWithFileSystemRepresentation : path isDirectory : isDir relativeToURL : baseURL)
        }
    }
    unsafe fn initWithString_(&self, URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithString : URLString) }
    }
    unsafe fn initWithString_relativeToURL_(
        &self,
        URLString: NSString,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithString : URLString relativeToURL : baseURL) }
    }
    unsafe fn initWithString_encodingInvalidCharacters_(
        &self,
        URLString: NSString,
        encodingInvalidCharacters: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithString : URLString encodingInvalidCharacters : encodingInvalidCharacters)
        }
    }
    unsafe fn initWithDataRepresentation_relativeToURL_(
        &self,
        data: NSData,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithDataRepresentation : data relativeToURL : baseURL) }
    }
    unsafe fn initAbsoluteURLWithDataRepresentation_relativeToURL_(
        &self,
        data: NSData,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initAbsoluteURLWithDataRepresentation : data relativeToURL : baseURL)
        }
    }
    unsafe fn getFileSystemRepresentation_maxLength_(
        &self,
        buffer: *mut ::std::os::raw::c_char,
        maxBufferLength: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getFileSystemRepresentation : buffer maxLength : maxBufferLength)
        }
    }
    unsafe fn isFileReferenceURL(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isFileReferenceURL) }
    }
    unsafe fn fileReferenceURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileReferenceURL) }
    }
    unsafe fn getResourceValue_forKey_error_(
        &self,
        value: *mut id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , getResourceValue : value forKey : key error : error) }
    }
    unsafe fn resourceValuesForKeys_error_(
        &self,
        keys: NSArray,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , resourceValuesForKeys : keys error : error) }
    }
    unsafe fn setResourceValue_forKey_error_(
        &self,
        value: id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setResourceValue : value forKey : key error : error) }
    }
    unsafe fn setResourceValues_error_(
        &self,
        keyedValues: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setResourceValues : keyedValues error : error) }
    }
    unsafe fn removeCachedResourceValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeCachedResourceValueForKey : key) }
    }
    unsafe fn removeAllCachedResourceValues(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, removeAllCachedResourceValues) }
    }
    unsafe fn setTemporaryResourceValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setTemporaryResourceValue : value forKey : key) }
    }
    unsafe fn bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(
        &self,
        options: NSURLBookmarkCreationOptions,
        keys: NSArray,
        relativeURL: NSURL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , bookmarkDataWithOptions : options includingResourceValuesForKeys : keys relativeToURL : relativeURL error : error)
        }
    }
    unsafe fn initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
        &self,
        bookmarkData: NSData,
        options: NSURLBookmarkResolutionOptions,
        relativeURL: NSURL,
        isStale: *mut BOOL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initByResolvingBookmarkData : bookmarkData options : options relativeToURL : relativeURL bookmarkDataIsStale : isStale error : error)
        }
    }
    unsafe fn startAccessingSecurityScopedResource(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, startAccessingSecurityScopedResource) }
    }
    unsafe fn stopAccessingSecurityScopedResource(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stopAccessingSecurityScopedResource) }
    }
    unsafe fn dataRepresentation(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, dataRepresentation) }
    }
    unsafe fn absoluteString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, absoluteString) }
    }
    unsafe fn relativeString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, relativeString) }
    }
    unsafe fn baseURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, baseURL) }
    }
    unsafe fn absoluteURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, absoluteURL) }
    }
    unsafe fn scheme(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, scheme) }
    }
    unsafe fn resourceSpecifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, resourceSpecifier) }
    }
    unsafe fn host(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, host) }
    }
    unsafe fn port(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, port) }
    }
    unsafe fn user(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, user) }
    }
    unsafe fn password(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, password) }
    }
    unsafe fn path(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, path) }
    }
    unsafe fn fragment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fragment) }
    }
    unsafe fn parameterString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, parameterString) }
    }
    unsafe fn query(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, query) }
    }
    unsafe fn relativePath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, relativePath) }
    }
    unsafe fn hasDirectoryPath(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hasDirectoryPath) }
    }
    unsafe fn fileSystemRepresentation(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileSystemRepresentation) }
    }
    unsafe fn isFileURL(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isFileURL) }
    }
    unsafe fn standardizedURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, standardizedURL) }
    }
    unsafe fn filePathURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, filePathURL) }
    }
    unsafe fn fileURLWithPath_isDirectory_relativeToURL_(
        path: NSString,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , fileURLWithPath : path isDirectory : isDir relativeToURL : baseURL)
        }
    }
    unsafe fn fileURLWithPath_relativeToURL_(path: NSString, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURL) , fileURLWithPath : path relativeToURL : baseURL) }
    }
    unsafe fn fileURLWithPath_isDirectory_(path: NSString, isDir: BOOL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURL) , fileURLWithPath : path isDirectory : isDir) }
    }
    unsafe fn fileURLWithPath_(path: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURL) , fileURLWithPath : path) }
    }
    unsafe fn fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
        path: *const ::std::os::raw::c_char,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , fileURLWithFileSystemRepresentation : path isDirectory : isDir relativeToURL : baseURL)
        }
    }
    unsafe fn URLWithString_(URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURL) , URLWithString : URLString) }
    }
    unsafe fn URLWithString_relativeToURL_(URLString: NSString, baseURL: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURL) , URLWithString : URLString relativeToURL : baseURL) }
    }
    unsafe fn URLWithString_encodingInvalidCharacters_(
        URLString: NSString,
        encodingInvalidCharacters: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , URLWithString : URLString encodingInvalidCharacters : encodingInvalidCharacters)
        }
    }
    unsafe fn URLWithDataRepresentation_relativeToURL_(data: NSData, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , URLWithDataRepresentation : data relativeToURL : baseURL)
        }
    }
    unsafe fn absoluteURLWithDataRepresentation_relativeToURL_(
        data: NSData,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , absoluteURLWithDataRepresentation : data relativeToURL : baseURL)
        }
    }
    unsafe fn URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
        bookmarkData: NSData,
        options: NSURLBookmarkResolutionOptions,
        relativeURL: NSURL,
        isStale: *mut BOOL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , URLByResolvingBookmarkData : bookmarkData options : options relativeToURL : relativeURL bookmarkDataIsStale : isStale error : error)
        }
    }
    unsafe fn resourceValuesForKeys_fromBookmarkData_(
        keys: NSArray,
        bookmarkData: NSData,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , resourceValuesForKeys : keys fromBookmarkData : bookmarkData)
        }
    }
    unsafe fn writeBookmarkData_toURL_options_error_(
        bookmarkData: NSData,
        bookmarkFileURL: NSURL,
        options: NSURLBookmarkFileCreationOptions,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , writeBookmarkData : bookmarkData toURL : bookmarkFileURL options : options error : error)
        }
    }
    unsafe fn bookmarkDataWithContentsOfURL_error_(
        bookmarkFileURL: NSURL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , bookmarkDataWithContentsOfURL : bookmarkFileURL error : error)
        }
    }
    unsafe fn URLByResolvingAliasFileAtURL_options_error_(
        url: NSURL,
        options: NSURLBookmarkResolutionOptions,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURL) , URLByResolvingAliasFileAtURL : url options : options error : error)
        }
    }
}
unsafe extern "C" {
    pub static NSURLFileScheme: NSString;
}
unsafe extern "C" {
    pub static NSURLKeysOfUnsetValuesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLNameKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLLocalizedNameKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsRegularFileKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsDirectoryKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsSymbolicLinkKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsVolumeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsPackageKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsApplicationKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLApplicationIsScriptableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsSystemImmutableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsUserImmutableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsHiddenKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLHasHiddenExtensionKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLCreationDateKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLContentAccessDateKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLContentModificationDateKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLAttributeModificationDateKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLLinkCountKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLParentDirectoryURLKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeURLKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLTypeIdentifierKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLContentTypeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLLocalizedTypeDescriptionKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLLabelNumberKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLLabelColorKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLLocalizedLabelKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLEffectiveIconKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLCustomIconKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLFileResourceIdentifierKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIdentifierKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLPreferredIOBlockSizeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsReadableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsWritableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsExecutableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLFileSecurityKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsExcludedFromBackupKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLTagNamesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLPathKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLCanonicalPathKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsMountTriggerKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLGenerationIdentifierKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLDocumentIdentifierKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLAddedToDirectoryDateKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLQuarantinePropertiesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLFileIdentifierKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLFileContentIdentifierKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLMayShareFileContentKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLMayHaveExtendedAttributesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsPurgeableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsSparseKey: NSURLResourceKey;
}
pub type NSURLFileResourceType = NSString;
unsafe extern "C" {
    pub static NSURLFileResourceTypeNamedPipe: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeCharacterSpecial: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeDirectory: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeBlockSpecial: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeRegular: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeSymbolicLink: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeSocket: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLFileResourceTypeUnknown: NSURLFileResourceType;
}
unsafe extern "C" {
    pub static NSURLThumbnailDictionaryKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLThumbnailKey: NSURLResourceKey;
}
pub type NSURLThumbnailDictionaryItem = NSString;
unsafe extern "C" {
    pub static NSThumbnail1024x1024SizeKey: NSURLThumbnailDictionaryItem;
}
unsafe extern "C" {
    pub static NSURLFileSizeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLFileAllocatedSizeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLTotalFileSizeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLTotalFileAllocatedSizeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsAliasFileKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLFileProtectionKey: NSURLResourceKey;
}
pub type NSURLFileProtectionType = NSString;
unsafe extern "C" {
    pub static NSURLFileProtectionNone: NSURLFileProtectionType;
}
unsafe extern "C" {
    pub static NSURLFileProtectionComplete: NSURLFileProtectionType;
}
unsafe extern "C" {
    pub static NSURLFileProtectionCompleteUnlessOpen: NSURLFileProtectionType;
}
unsafe extern "C" {
    pub static NSURLFileProtectionCompleteUntilFirstUserAuthentication: NSURLFileProtectionType;
}
unsafe extern "C" {
    pub static NSURLFileProtectionCompleteWhenUserInactive: NSURLFileProtectionType;
}
unsafe extern "C" {
    pub static NSURLDirectoryEntryCountKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeLocalizedFormatDescriptionKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeTotalCapacityKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeAvailableCapacityKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeResourceCountKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsPersistentIDsKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsSymbolicLinksKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsHardLinksKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsJournalingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsJournalingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsSparseFilesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsZeroRunsKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsCaseSensitiveNamesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsCasePreservedNamesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsRootDirectoryDatesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsVolumeSizesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsRenamingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsAdvisoryFileLockingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsExtendedSecurityKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsBrowsableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeMaximumFileSizeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsEjectableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsRemovableKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsInternalKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsAutomountedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsLocalKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsReadOnlyKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeCreationDateKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeURLForRemountingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeUUIDStringKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeNameKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeLocalizedNameKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsEncryptedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeIsRootFileSystemKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsCompressionKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsFileCloningKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsSwapRenamingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsExclusiveRenamingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsImmutableFilesKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsAccessPermissionsKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSupportsFileProtectionKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeAvailableCapacityForImportantUsageKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeAvailableCapacityForOpportunisticUsageKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeTypeNameKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeSubtypeKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLVolumeMountFromLocationKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLIsUbiquitousItemKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemHasUnresolvedConflictsKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemIsDownloadedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemIsDownloadingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemIsUploadedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemIsUploadingKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemPercentDownloadedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemPercentUploadedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemDownloadingErrorKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemUploadingErrorKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemDownloadRequestedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemContainerDisplayNameKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemIsExcludedFromSyncKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemIsSharedKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemCurrentUserRoleKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemCurrentUserPermissionsKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemOwnerNameComponentsKey: NSURLResourceKey;
}
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey: NSURLResourceKey;
}
pub type NSURLUbiquitousItemDownloadingStatus = NSString;
unsafe extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusNotDownloaded:
        NSURLUbiquitousItemDownloadingStatus;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusDownloaded: NSURLUbiquitousItemDownloadingStatus;
}
unsafe extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusCurrent: NSURLUbiquitousItemDownloadingStatus;
}
pub type NSURLUbiquitousSharedItemRole = NSString;
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemRoleOwner: NSURLUbiquitousSharedItemRole;
}
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemRoleParticipant: NSURLUbiquitousSharedItemRole;
}
pub type NSURLUbiquitousSharedItemPermissions = NSString;
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemPermissionsReadOnly: NSURLUbiquitousSharedItemPermissions;
}
unsafe extern "C" {
    pub static NSURLUbiquitousSharedItemPermissionsReadWrite: NSURLUbiquitousSharedItemPermissions;
}
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationPreferFileIDResolution:
    NSURLBookmarkCreationOptions = 256;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationMinimalBookmark:
    NSURLBookmarkCreationOptions = 512;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationSuitableForBookmarkFile:
    NSURLBookmarkCreationOptions = 1024;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationWithSecurityScope:
    NSURLBookmarkCreationOptions = 2048;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
    NSURLBookmarkCreationOptions = 4096;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationWithoutImplicitSecurityScope:
    NSURLBookmarkCreationOptions = 536870912;
pub type NSURLBookmarkCreationOptions = NSUInteger;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutUI:
    NSURLBookmarkResolutionOptions = 256;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutMounting:
    NSURLBookmarkResolutionOptions = 512;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithSecurityScope:
    NSURLBookmarkResolutionOptions = 1024;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutImplicitStartAccessing:
    NSURLBookmarkResolutionOptions = 32768;
pub type NSURLBookmarkResolutionOptions = NSUInteger;
pub type NSURLBookmarkFileCreationOptions = NSUInteger;
impl NSURL_NSPromisedItems for NSURL {}
pub trait NSURL_NSPromisedItems: Sized + std::ops::Deref {
    unsafe fn getPromisedItemResourceValue_forKey_error_(
        &self,
        value: *mut id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getPromisedItemResourceValue : value forKey : key error : error)
        }
    }
    unsafe fn promisedItemResourceValuesForKeys_error_(
        &self,
        keys: NSArray,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , promisedItemResourceValuesForKeys : keys error : error) }
    }
    unsafe fn checkPromisedItemIsReachableAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , checkPromisedItemIsReachableAndReturnError : error) }
    }
}
impl NSURL_NSItemProvider for NSURL {}
pub trait NSURL_NSItemProvider: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLQueryItem(pub id);
impl std::ops::Deref for NSURLQueryItem {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLQueryItem {}
impl NSURLQueryItem {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLQueryItem), alloc) })
    }
}
impl PNSSecureCoding for NSURLQueryItem {}
impl PNSCopying for NSURLQueryItem {}
impl INSObject for NSURLQueryItem {}
impl PNSObject for NSURLQueryItem {}
impl From<NSURLQueryItem> for NSObject {
    fn from(child: NSURLQueryItem) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLQueryItem {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLQueryItem, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSURLQueryItem)) };
        if is_kind_of {
            Ok(NSURLQueryItem(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLQueryItem")
        }
    }
}
impl INSURLQueryItem for NSURLQueryItem {}
pub trait INSURLQueryItem: Sized + std::ops::Deref {
    unsafe fn initWithName_value_(&self, name: NSString, value: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithName : name value : value) }
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, name) }
    }
    unsafe fn value(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, value) }
    }
    unsafe fn queryItemWithName_value_(name: NSString, value: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURLQueryItem) , queryItemWithName : name value : value) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLComponents(pub id);
impl std::ops::Deref for NSURLComponents {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLComponents {}
impl NSURLComponents {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLComponents), alloc) })
    }
}
impl PNSCopying for NSURLComponents {}
impl INSObject for NSURLComponents {}
impl PNSObject for NSURLComponents {}
impl From<NSURLComponents> for NSObject {
    fn from(child: NSURLComponents) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLComponents {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLComponents, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSURLComponents)) };
        if is_kind_of {
            Ok(NSURLComponents(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLComponents")
        }
    }
}
impl INSURLComponents for NSURLComponents {}
pub trait INSURLComponents: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, init) }
    }
    unsafe fn initWithURL_resolvingAgainstBaseURL_(&self, url: NSURL, resolve: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithURL : url resolvingAgainstBaseURL : resolve) }
    }
    unsafe fn initWithString_(&self, URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithString : URLString) }
    }
    unsafe fn initWithString_encodingInvalidCharacters_(
        &self,
        URLString: NSString,
        encodingInvalidCharacters: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , initWithString : URLString encodingInvalidCharacters : encodingInvalidCharacters)
        }
    }
    unsafe fn URLRelativeToURL_(&self, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLRelativeToURL : baseURL) }
    }
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, URL) }
    }
    unsafe fn string(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, string) }
    }
    unsafe fn scheme(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, scheme) }
    }
    unsafe fn setScheme_(&self, scheme: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setScheme : scheme) }
    }
    unsafe fn user(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, user) }
    }
    unsafe fn setUser_(&self, user: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setUser : user) }
    }
    unsafe fn password(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, password) }
    }
    unsafe fn setPassword_(&self, password: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPassword : password) }
    }
    unsafe fn host(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, host) }
    }
    unsafe fn setHost_(&self, host: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setHost : host) }
    }
    unsafe fn port(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, port) }
    }
    unsafe fn setPort_(&self, port: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPort : port) }
    }
    unsafe fn path(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, path) }
    }
    unsafe fn setPath_(&self, path: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPath : path) }
    }
    unsafe fn query(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, query) }
    }
    unsafe fn setQuery_(&self, query: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setQuery : query) }
    }
    unsafe fn fragment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fragment) }
    }
    unsafe fn setFragment_(&self, fragment: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setFragment : fragment) }
    }
    unsafe fn percentEncodedUser(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, percentEncodedUser) }
    }
    unsafe fn setPercentEncodedUser_(&self, percentEncodedUser: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPercentEncodedUser : percentEncodedUser) }
    }
    unsafe fn percentEncodedPassword(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, percentEncodedPassword) }
    }
    unsafe fn setPercentEncodedPassword_(&self, percentEncodedPassword: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPercentEncodedPassword : percentEncodedPassword) }
    }
    unsafe fn percentEncodedHost(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, percentEncodedHost) }
    }
    unsafe fn setPercentEncodedHost_(&self, percentEncodedHost: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPercentEncodedHost : percentEncodedHost) }
    }
    unsafe fn percentEncodedPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, percentEncodedPath) }
    }
    unsafe fn setPercentEncodedPath_(&self, percentEncodedPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPercentEncodedPath : percentEncodedPath) }
    }
    unsafe fn percentEncodedQuery(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, percentEncodedQuery) }
    }
    unsafe fn setPercentEncodedQuery_(&self, percentEncodedQuery: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPercentEncodedQuery : percentEncodedQuery) }
    }
    unsafe fn percentEncodedFragment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, percentEncodedFragment) }
    }
    unsafe fn setPercentEncodedFragment_(&self, percentEncodedFragment: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPercentEncodedFragment : percentEncodedFragment) }
    }
    unsafe fn encodedHost(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, encodedHost) }
    }
    unsafe fn setEncodedHost_(&self, encodedHost: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setEncodedHost : encodedHost) }
    }
    unsafe fn rangeOfScheme(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfScheme) }
    }
    unsafe fn rangeOfUser(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfUser) }
    }
    unsafe fn rangeOfPassword(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfPassword) }
    }
    unsafe fn rangeOfHost(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfHost) }
    }
    unsafe fn rangeOfPort(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfPort) }
    }
    unsafe fn rangeOfPath(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfPath) }
    }
    unsafe fn rangeOfQuery(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfQuery) }
    }
    unsafe fn rangeOfFragment(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, rangeOfFragment) }
    }
    unsafe fn queryItems(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, queryItems) }
    }
    unsafe fn setQueryItems_(&self, queryItems: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setQueryItems : queryItems) }
    }
    unsafe fn percentEncodedQueryItems(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, percentEncodedQueryItems) }
    }
    unsafe fn setPercentEncodedQueryItems_(&self, percentEncodedQueryItems: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPercentEncodedQueryItems : percentEncodedQueryItems) }
    }
    unsafe fn componentsWithURL_resolvingAgainstBaseURL_(url: NSURL, resolve: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURLComponents) , componentsWithURL : url resolvingAgainstBaseURL : resolve)
        }
    }
    unsafe fn componentsWithString_(URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURLComponents) , componentsWithString : URLString) }
    }
    unsafe fn componentsWithString_encodingInvalidCharacters_(
        URLString: NSString,
        encodingInvalidCharacters: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSURLComponents) , componentsWithString : URLString encodingInvalidCharacters : encodingInvalidCharacters)
        }
    }
}
impl NSCharacterSet_NSURLUtilities for NSCharacterSet {}
pub trait NSCharacterSet_NSURLUtilities: Sized + std::ops::Deref {
    unsafe fn URLUserAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), URLUserAllowedCharacterSet) }
    }
    unsafe fn URLPasswordAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), URLPasswordAllowedCharacterSet) }
    }
    unsafe fn URLHostAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), URLHostAllowedCharacterSet) }
    }
    unsafe fn URLPathAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), URLPathAllowedCharacterSet) }
    }
    unsafe fn URLQueryAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), URLQueryAllowedCharacterSet) }
    }
    unsafe fn URLFragmentAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSCharacterSet), URLFragmentAllowedCharacterSet) }
    }
}
impl NSString_NSURLUtilities for NSString {}
pub trait NSString_NSURLUtilities: Sized + std::ops::Deref {
    unsafe fn stringByAddingPercentEncodingWithAllowedCharacters_(
        &self,
        allowedCharacters: NSCharacterSet,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , stringByAddingPercentEncodingWithAllowedCharacters : allowedCharacters)
        }
    }
    unsafe fn stringByAddingPercentEscapesUsingEncoding_(&self, enc: NSStringEncoding) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByAddingPercentEscapesUsingEncoding : enc) }
    }
    unsafe fn stringByReplacingPercentEscapesUsingEncoding_(
        &self,
        enc: NSStringEncoding,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringByReplacingPercentEscapesUsingEncoding : enc) }
    }
    unsafe fn stringByRemovingPercentEncoding(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, stringByRemovingPercentEncoding) }
    }
}
impl NSURL_NSURLPathUtilities for NSURL {}
pub trait NSURL_NSURLPathUtilities: Sized + std::ops::Deref {
    unsafe fn URLByAppendingPathComponent_(&self, pathComponent: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLByAppendingPathComponent : pathComponent) }
    }
    unsafe fn URLByAppendingPathComponent_isDirectory_(
        &self,
        pathComponent: NSString,
        isDirectory: BOOL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , URLByAppendingPathComponent : pathComponent isDirectory : isDirectory)
        }
    }
    unsafe fn URLByAppendingPathExtension_(&self, pathExtension: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLByAppendingPathExtension : pathExtension) }
    }
    unsafe fn checkResourceIsReachableAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , checkResourceIsReachableAndReturnError : error) }
    }
    unsafe fn pathComponents(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, pathComponents) }
    }
    unsafe fn lastPathComponent(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, lastPathComponent) }
    }
    unsafe fn pathExtension(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, pathExtension) }
    }
    unsafe fn URLByDeletingLastPathComponent(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, URLByDeletingLastPathComponent) }
    }
    unsafe fn URLByDeletingPathExtension(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, URLByDeletingPathExtension) }
    }
    unsafe fn URLByStandardizingPath(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, URLByStandardizingPath) }
    }
    unsafe fn URLByResolvingSymlinksInPath(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, URLByResolvingSymlinksInPath) }
    }
    unsafe fn fileURLWithPathComponents_(components: NSArray) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (class ! (NSURL) , fileURLWithPathComponents : components) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileSecurity(pub id);
impl std::ops::Deref for NSFileSecurity {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileSecurity {}
impl NSFileSecurity {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileSecurity), alloc) })
    }
}
impl PNSCopying for NSFileSecurity {}
impl PNSSecureCoding for NSFileSecurity {}
impl INSObject for NSFileSecurity {}
impl PNSObject for NSFileSecurity {}
impl From<NSFileSecurity> for NSObject {
    fn from(child: NSFileSecurity) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileSecurity {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileSecurity, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSFileSecurity)) };
        if is_kind_of {
            Ok(NSFileSecurity(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileSecurity")
        }
    }
}
impl INSFileSecurity for NSFileSecurity {}
pub trait INSFileSecurity: Sized + std::ops::Deref {
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , initWithCoder : coder) }
    }
}
impl NSObject_NSURLClient for NSObject {}
pub trait NSObject_NSURLClient: Sized + std::ops::Deref {
    unsafe fn URL_resourceDataDidBecomeAvailable_(&self, sender: NSURL, newBytes: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URL : sender resourceDataDidBecomeAvailable : newBytes) }
    }
    unsafe fn URLResourceDidFinishLoading_(&self, sender: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLResourceDidFinishLoading : sender) }
    }
    unsafe fn URLResourceDidCancelLoading_(&self, sender: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLResourceDidCancelLoading : sender) }
    }
    unsafe fn URL_resourceDidFailLoadingWithReason_(&self, sender: NSURL, reason: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URL : sender resourceDidFailLoadingWithReason : reason) }
    }
}
impl NSURL_NSURLLoading for NSURL {}
pub trait NSURL_NSURLLoading: Sized + std::ops::Deref {
    unsafe fn resourceDataUsingCache_(&self, shouldUseCache: BOOL) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , resourceDataUsingCache : shouldUseCache) }
    }
    unsafe fn loadResourceDataNotifyingClient_usingCache_(&self, client: id, shouldUseCache: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , loadResourceDataNotifyingClient : client usingCache : shouldUseCache)
        }
    }
    unsafe fn propertyForKey_(&self, propertyKey: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , propertyForKey : propertyKey) }
    }
    unsafe fn setResourceData_(&self, data: NSData) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setResourceData : data) }
    }
    unsafe fn setProperty_forKey_(&self, property: id, propertyKey: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setProperty : property forKey : propertyKey) }
    }
    unsafe fn URLHandleUsingCache_(&self, shouldUseCache: BOOL) -> NSURLHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLHandleUsingCache : shouldUseCache) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSXPCConnection(pub id);
impl std::ops::Deref for NSXPCConnection {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSXPCConnection {}
impl NSXPCConnection {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSXPCConnection), alloc) })
    }
}
impl INSXPCConnection for NSXPCConnection {}
pub trait INSXPCConnection: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLock(pub id);
impl std::ops::Deref for NSLock {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLock {}
impl NSLock {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLock), alloc) })
    }
}
impl INSLock for NSLock {}
pub trait INSLock: Sized + std::ops::Deref {}
pub type NSFileAttributeKey = NSString;
pub type NSFileAttributeType = NSString;
pub type NSFileProtectionType = NSString;
pub type NSFileProviderServiceName = NSString;
pub const NSVolumeEnumerationOptions_NSVolumeEnumerationSkipHiddenVolumes:
    NSVolumeEnumerationOptions = 2;
pub const NSVolumeEnumerationOptions_NSVolumeEnumerationProduceFileReferenceURLs:
    NSVolumeEnumerationOptions = 4;
pub type NSVolumeEnumerationOptions = NSUInteger;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsSubdirectoryDescendants:
    NSDirectoryEnumerationOptions = 1;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsPackageDescendants:
    NSDirectoryEnumerationOptions = 2;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsHiddenFiles:
    NSDirectoryEnumerationOptions = 4;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationIncludesDirectoriesPostOrder:
    NSDirectoryEnumerationOptions = 8;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationProducesRelativePathURLs:
    NSDirectoryEnumerationOptions = 16;
pub type NSDirectoryEnumerationOptions = NSUInteger;
pub const NSFileManagerItemReplacementOptions_NSFileManagerItemReplacementUsingNewMetadataOnly:
    NSFileManagerItemReplacementOptions = 1;
pub const NSFileManagerItemReplacementOptions_NSFileManagerItemReplacementWithoutDeletingBackupItem : NSFileManagerItemReplacementOptions = 2 ;
pub type NSFileManagerItemReplacementOptions = NSUInteger;
pub const NSURLRelationship_NSURLRelationshipContains: NSURLRelationship = 0;
pub const NSURLRelationship_NSURLRelationshipSame: NSURLRelationship = 1;
pub const NSURLRelationship_NSURLRelationshipOther: NSURLRelationship = 2;
pub type NSURLRelationship = NSInteger;
pub const NSFileManagerUnmountOptions_NSFileManagerUnmountAllPartitionsAndEjectDisk:
    NSFileManagerUnmountOptions = 1;
pub const NSFileManagerUnmountOptions_NSFileManagerUnmountWithoutUI: NSFileManagerUnmountOptions =
    2;
pub type NSFileManagerUnmountOptions = NSUInteger;
unsafe extern "C" {
    pub static NSFileManagerUnmountDissentingProcessIdentifierErrorKey: NSString;
}
unsafe extern "C" {
    pub static NSUbiquityIdentityDidChangeNotification: NSNotificationName;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileManager(pub id);
impl std::ops::Deref for NSFileManager {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileManager {}
impl NSFileManager {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileManager), alloc) })
    }
}
impl INSObject for NSFileManager {}
impl PNSObject for NSFileManager {}
impl From<NSFileManager> for NSObject {
    fn from(child: NSFileManager) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileManager {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileManager, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSFileManager)) };
        if is_kind_of {
            Ok(NSFileManager(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileManager")
        }
    }
}
impl INSFileManager for NSFileManager {}
pub trait INSFileManager: Sized + std::ops::Deref {
    unsafe fn mountedVolumeURLsIncludingResourceValuesForKeys_options_(
        &self,
        propertyKeys: NSArray,
        options: NSVolumeEnumerationOptions,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , mountedVolumeURLsIncludingResourceValuesForKeys : propertyKeys options : options)
        }
    }
    unsafe fn unmountVolumeAtURL_options_completionHandler_(
        &self,
        url: NSURL,
        mask: NSFileManagerUnmountOptions,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , unmountVolumeAtURL : url options : mask completionHandler : completionHandler)
        }
    }
    unsafe fn contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(
        &self,
        url: NSURL,
        keys: NSArray,
        mask: NSDirectoryEnumerationOptions,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , contentsOfDirectoryAtURL : url includingPropertiesForKeys : keys options : mask error : error)
        }
    }
    unsafe fn URLsForDirectory_inDomains_(
        &self,
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLsForDirectory : directory inDomains : domainMask) }
    }
    unsafe fn URLForDirectory_inDomain_appropriateForURL_create_error_(
        &self,
        directory: NSSearchPathDirectory,
        domain: NSSearchPathDomainMask,
        url: NSURL,
        shouldCreate: BOOL,
        error: *mut NSError,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , URLForDirectory : directory inDomain : domain appropriateForURL : url create : shouldCreate error : error)
        }
    }
    unsafe fn getRelationship_ofDirectoryAtURL_toItemAtURL_error_(
        &self,
        outRelationship: *mut NSURLRelationship,
        directoryURL: NSURL,
        otherURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getRelationship : outRelationship ofDirectoryAtURL : directoryURL toItemAtURL : otherURL error : error)
        }
    }
    unsafe fn getRelationship_ofDirectory_inDomain_toItemAtURL_error_(
        &self,
        outRelationship: *mut NSURLRelationship,
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
        url: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getRelationship : outRelationship ofDirectory : directory inDomain : domainMask toItemAtURL : url error : error)
        }
    }
    unsafe fn createDirectoryAtURL_withIntermediateDirectories_attributes_error_(
        &self,
        url: NSURL,
        createIntermediates: BOOL,
        attributes: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , createDirectoryAtURL : url withIntermediateDirectories : createIntermediates attributes : attributes error : error)
        }
    }
    unsafe fn createSymbolicLinkAtURL_withDestinationURL_error_(
        &self,
        url: NSURL,
        destURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , createSymbolicLinkAtURL : url withDestinationURL : destURL error : error)
        }
    }
    unsafe fn setAttributes_ofItemAtPath_error_(
        &self,
        attributes: NSDictionary,
        path: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setAttributes : attributes ofItemAtPath : path error : error)
        }
    }
    unsafe fn createDirectoryAtPath_withIntermediateDirectories_attributes_error_(
        &self,
        path: NSString,
        createIntermediates: BOOL,
        attributes: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , createDirectoryAtPath : path withIntermediateDirectories : createIntermediates attributes : attributes error : error)
        }
    }
    unsafe fn contentsOfDirectoryAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , contentsOfDirectoryAtPath : path error : error) }
    }
    unsafe fn subpathsOfDirectoryAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , subpathsOfDirectoryAtPath : path error : error) }
    }
    unsafe fn attributesOfItemAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , attributesOfItemAtPath : path error : error) }
    }
    unsafe fn attributesOfFileSystemForPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , attributesOfFileSystemForPath : path error : error) }
    }
    unsafe fn createSymbolicLinkAtPath_withDestinationPath_error_(
        &self,
        path: NSString,
        destPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , createSymbolicLinkAtPath : path withDestinationPath : destPath error : error)
        }
    }
    unsafe fn destinationOfSymbolicLinkAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , destinationOfSymbolicLinkAtPath : path error : error) }
    }
    unsafe fn copyItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , copyItemAtPath : srcPath toPath : dstPath error : error) }
    }
    unsafe fn moveItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , moveItemAtPath : srcPath toPath : dstPath error : error) }
    }
    unsafe fn linkItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , linkItemAtPath : srcPath toPath : dstPath error : error) }
    }
    unsafe fn removeItemAtPath_error_(&self, path: NSString, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeItemAtPath : path error : error) }
    }
    unsafe fn copyItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , copyItemAtURL : srcURL toURL : dstURL error : error) }
    }
    unsafe fn moveItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , moveItemAtURL : srcURL toURL : dstURL error : error) }
    }
    unsafe fn linkItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , linkItemAtURL : srcURL toURL : dstURL error : error) }
    }
    unsafe fn removeItemAtURL_error_(&self, URL: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeItemAtURL : URL error : error) }
    }
    unsafe fn trashItemAtURL_resultingItemURL_error_(
        &self,
        url: NSURL,
        outResultingURL: *mut NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , trashItemAtURL : url resultingItemURL : outResultingURL error : error)
        }
    }
    unsafe fn fileAttributesAtPath_traverseLink_(&self, path: NSString, yorn: BOOL) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileAttributesAtPath : path traverseLink : yorn) }
    }
    unsafe fn changeFileAttributes_atPath_(&self, attributes: NSDictionary, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , changeFileAttributes : attributes atPath : path) }
    }
    unsafe fn directoryContentsAtPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , directoryContentsAtPath : path) }
    }
    unsafe fn fileSystemAttributesAtPath_(&self, path: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileSystemAttributesAtPath : path) }
    }
    unsafe fn pathContentOfSymbolicLinkAtPath_(&self, path: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , pathContentOfSymbolicLinkAtPath : path) }
    }
    unsafe fn createSymbolicLinkAtPath_pathContent_(
        &self,
        path: NSString,
        otherpath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , createSymbolicLinkAtPath : path pathContent : otherpath) }
    }
    unsafe fn createDirectoryAtPath_attributes_(
        &self,
        path: NSString,
        attributes: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , createDirectoryAtPath : path attributes : attributes) }
    }
    unsafe fn linkPath_toPath_handler_(&self, src: NSString, dest: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , linkPath : src toPath : dest handler : handler) }
    }
    unsafe fn copyPath_toPath_handler_(&self, src: NSString, dest: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , copyPath : src toPath : dest handler : handler) }
    }
    unsafe fn movePath_toPath_handler_(&self, src: NSString, dest: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , movePath : src toPath : dest handler : handler) }
    }
    unsafe fn removeFileAtPath_handler_(&self, path: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , removeFileAtPath : path handler : handler) }
    }
    unsafe fn changeCurrentDirectoryPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , changeCurrentDirectoryPath : path) }
    }
    unsafe fn fileExistsAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileExistsAtPath : path) }
    }
    unsafe fn fileExistsAtPath_isDirectory_(&self, path: NSString, isDirectory: *mut BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileExistsAtPath : path isDirectory : isDirectory) }
    }
    unsafe fn isReadableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isReadableFileAtPath : path) }
    }
    unsafe fn isWritableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isWritableFileAtPath : path) }
    }
    unsafe fn isExecutableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isExecutableFileAtPath : path) }
    }
    unsafe fn isDeletableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isDeletableFileAtPath : path) }
    }
    unsafe fn contentsEqualAtPath_andPath_(&self, path1: NSString, path2: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , contentsEqualAtPath : path1 andPath : path2) }
    }
    unsafe fn displayNameAtPath_(&self, path: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , displayNameAtPath : path) }
    }
    unsafe fn componentsToDisplayForPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , componentsToDisplayForPath : path) }
    }
    unsafe fn enumeratorAtPath_(&self, path: NSString) -> NSDirectoryEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , enumeratorAtPath : path) }
    }
    unsafe fn enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(
        &self,
        url: NSURL,
        keys: NSArray,
        mask: NSDirectoryEnumerationOptions,
        handler: *mut ::std::os::raw::c_void,
    ) -> NSDirectoryEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , enumeratorAtURL : url includingPropertiesForKeys : keys options : mask errorHandler : handler)
        }
    }
    unsafe fn subpathsAtPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , subpathsAtPath : path) }
    }
    unsafe fn contentsAtPath_(&self, path: NSString) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , contentsAtPath : path) }
    }
    unsafe fn createFileAtPath_contents_attributes_(
        &self,
        path: NSString,
        data: NSData,
        attr: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , createFileAtPath : path contents : data attributes : attr) }
    }
    unsafe fn fileSystemRepresentationWithPath_(
        &self,
        path: NSString,
    ) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileSystemRepresentationWithPath : path) }
    }
    unsafe fn stringWithFileSystemRepresentation_length_(
        &self,
        str_: *const ::std::os::raw::c_char,
        len: NSUInteger,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , stringWithFileSystemRepresentation : str_ length : len) }
    }
    unsafe fn replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(
        &self,
        originalItemURL: NSURL,
        newItemURL: NSURL,
        backupItemName: NSString,
        options: NSFileManagerItemReplacementOptions,
        resultingURL: *mut NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , replaceItemAtURL : originalItemURL withItemAtURL : newItemURL backupItemName : backupItemName options : options resultingItemURL : resultingURL error : error)
        }
    }
    unsafe fn setUbiquitous_itemAtURL_destinationURL_error_(
        &self,
        flag: BOOL,
        url: NSURL,
        destinationURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setUbiquitous : flag itemAtURL : url destinationURL : destinationURL error : error)
        }
    }
    unsafe fn isUbiquitousItemAtURL_(&self, url: NSURL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isUbiquitousItemAtURL : url) }
    }
    unsafe fn startDownloadingUbiquitousItemAtURL_error_(
        &self,
        url: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , startDownloadingUbiquitousItemAtURL : url error : error) }
    }
    unsafe fn evictUbiquitousItemAtURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , evictUbiquitousItemAtURL : url error : error) }
    }
    unsafe fn URLForUbiquityContainerIdentifier_(&self, containerIdentifier: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLForUbiquityContainerIdentifier : containerIdentifier) }
    }
    unsafe fn URLForPublishingUbiquitousItemAtURL_expirationDate_error_(
        &self,
        url: NSURL,
        outDate: *mut NSDate,
        error: *mut NSError,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , URLForPublishingUbiquitousItemAtURL : url expirationDate : outDate error : error)
        }
    }
    unsafe fn getFileProviderServicesForItemAtURL_completionHandler_(
        &self,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getFileProviderServicesForItemAtURL : url completionHandler : completionHandler)
        }
    }
    unsafe fn containerURLForSecurityApplicationGroupIdentifier_(
        &self,
        groupIdentifier: NSString,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , containerURLForSecurityApplicationGroupIdentifier : groupIdentifier)
        }
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, delegate) }
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setDelegate : delegate) }
    }
    unsafe fn currentDirectoryPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, currentDirectoryPath) }
    }
    unsafe fn ubiquityIdentityToken(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, ubiquityIdentityToken) }
    }
    unsafe fn defaultManager() -> NSFileManager
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSFileManager), defaultManager) }
    }
}
impl NSFileManager_NSUserInformation for NSFileManager {}
pub trait NSFileManager_NSUserInformation: Sized + std::ops::Deref {
    unsafe fn homeDirectoryForUser_(&self, userName: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , homeDirectoryForUser : userName) }
    }
    unsafe fn homeDirectoryForCurrentUser(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, homeDirectoryForCurrentUser) }
    }
    unsafe fn temporaryDirectory(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, temporaryDirectory) }
    }
}
impl NSObject_NSCopyLinkMoveHandler for NSObject {}
pub trait NSObject_NSCopyLinkMoveHandler: Sized + std::ops::Deref {
    unsafe fn fileManager_shouldProceedAfterError_(
        &self,
        fm: NSFileManager,
        errorInfo: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileManager : fm shouldProceedAfterError : errorInfo) }
    }
    unsafe fn fileManager_willProcessPath_(&self, fm: NSFileManager, path: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileManager : fm willProcessPath : path) }
    }
}
pub trait PNSFileManagerDelegate: Sized + std::ops::Deref {
    unsafe fn fileManager_shouldCopyItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldCopyItemAtPath : srcPath toPath : dstPath)
        }
    }
    unsafe fn fileManager_shouldCopyItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldCopyItemAtURL : srcURL toURL : dstURL)
        }
    }
    unsafe fn fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error copyingItemAtPath : srcPath toPath : dstPath)
        }
    }
    unsafe fn fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error copyingItemAtURL : srcURL toURL : dstURL)
        }
    }
    unsafe fn fileManager_shouldMoveItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldMoveItemAtPath : srcPath toPath : dstPath)
        }
    }
    unsafe fn fileManager_shouldMoveItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldMoveItemAtURL : srcURL toURL : dstURL)
        }
    }
    unsafe fn fileManager_shouldProceedAfterError_movingItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error movingItemAtPath : srcPath toPath : dstPath)
        }
    }
    unsafe fn fileManager_shouldProceedAfterError_movingItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error movingItemAtURL : srcURL toURL : dstURL)
        }
    }
    unsafe fn fileManager_shouldLinkItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldLinkItemAtPath : srcPath toPath : dstPath)
        }
    }
    unsafe fn fileManager_shouldLinkItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldLinkItemAtURL : srcURL toURL : dstURL)
        }
    }
    unsafe fn fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error linkingItemAtPath : srcPath toPath : dstPath)
        }
    }
    unsafe fn fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error linkingItemAtURL : srcURL toURL : dstURL)
        }
    }
    unsafe fn fileManager_shouldRemoveItemAtPath_(
        &self,
        fileManager: NSFileManager,
        path: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileManager : fileManager shouldRemoveItemAtPath : path) }
    }
    unsafe fn fileManager_shouldRemoveItemAtURL_(
        &self,
        fileManager: NSFileManager,
        URL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fileManager : fileManager shouldRemoveItemAtURL : URL) }
    }
    unsafe fn fileManager_shouldProceedAfterError_removingItemAtPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        path: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error removingItemAtPath : path)
        }
    }
    unsafe fn fileManager_shouldProceedAfterError_removingItemAtURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        URL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error removingItemAtURL : URL)
        }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDirectoryEnumerator(pub id);
impl std::ops::Deref for NSDirectoryEnumerator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDirectoryEnumerator {}
impl NSDirectoryEnumerator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDirectoryEnumerator), alloc) })
    }
}
impl<ObjectType: 'static> INSEnumerator<ObjectType> for NSDirectoryEnumerator {}
impl PNSFastEnumeration for NSDirectoryEnumerator {}
impl INSObject for NSDirectoryEnumerator {}
impl PNSObject for NSDirectoryEnumerator {}
impl From<NSDirectoryEnumerator> for NSObject {
    fn from(child: NSDirectoryEnumerator) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDirectoryEnumerator {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDirectoryEnumerator, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSDirectoryEnumerator)) };
        if is_kind_of {
            Ok(NSDirectoryEnumerator(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDirectoryEnumerator")
        }
    }
}
impl<ObjectType: 'static> INSDirectoryEnumerator<ObjectType> for NSDirectoryEnumerator {}
pub trait INSDirectoryEnumerator<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn skipDescendents(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, skipDescendents) }
    }
    unsafe fn skipDescendants(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, skipDescendants) }
    }
    unsafe fn fileAttributes(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileAttributes) }
    }
    unsafe fn directoryAttributes(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, directoryAttributes) }
    }
    unsafe fn isEnumeratingDirectoryPostOrder(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isEnumeratingDirectoryPostOrder) }
    }
    unsafe fn level(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, level) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileProviderService(pub id);
impl std::ops::Deref for NSFileProviderService {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileProviderService {}
impl NSFileProviderService {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileProviderService), alloc) })
    }
}
impl INSObject for NSFileProviderService {}
impl PNSObject for NSFileProviderService {}
impl From<NSFileProviderService> for NSObject {
    fn from(child: NSFileProviderService) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileProviderService {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileProviderService, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSFileProviderService)) };
        if is_kind_of {
            Ok(NSFileProviderService(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileProviderService")
        }
    }
}
impl INSFileProviderService for NSFileProviderService {}
pub trait INSFileProviderService: Sized + std::ops::Deref {
    unsafe fn getFileProviderConnectionWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getFileProviderConnectionWithCompletionHandler : completionHandler)
        }
    }
    unsafe fn name(&self) -> NSFileProviderServiceName
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, name) }
    }
}
unsafe extern "C" {
    pub static NSFileType: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileTypeDirectory: NSFileAttributeType;
}
unsafe extern "C" {
    pub static NSFileTypeRegular: NSFileAttributeType;
}
unsafe extern "C" {
    pub static NSFileTypeSymbolicLink: NSFileAttributeType;
}
unsafe extern "C" {
    pub static NSFileTypeSocket: NSFileAttributeType;
}
unsafe extern "C" {
    pub static NSFileTypeCharacterSpecial: NSFileAttributeType;
}
unsafe extern "C" {
    pub static NSFileTypeBlockSpecial: NSFileAttributeType;
}
unsafe extern "C" {
    pub static NSFileTypeUnknown: NSFileAttributeType;
}
unsafe extern "C" {
    pub static NSFileSize: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileModificationDate: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileReferenceCount: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileDeviceIdentifier: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileOwnerAccountName: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileGroupOwnerAccountName: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFilePosixPermissions: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileSystemNumber: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileSystemFileNumber: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileExtensionHidden: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileHFSCreatorCode: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileHFSTypeCode: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileImmutable: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileAppendOnly: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileCreationDate: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileOwnerAccountID: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileGroupOwnerAccountID: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileBusy: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileProtectionKey: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileProtectionNone: NSFileProtectionType;
}
unsafe extern "C" {
    pub static NSFileProtectionComplete: NSFileProtectionType;
}
unsafe extern "C" {
    pub static NSFileProtectionCompleteUnlessOpen: NSFileProtectionType;
}
unsafe extern "C" {
    pub static NSFileProtectionCompleteUntilFirstUserAuthentication: NSFileProtectionType;
}
unsafe extern "C" {
    pub static NSFileProtectionCompleteWhenUserInactive: NSFileProtectionType;
}
unsafe extern "C" {
    pub static NSFileSystemSize: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileSystemFreeSize: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileSystemNodes: NSFileAttributeKey;
}
unsafe extern "C" {
    pub static NSFileSystemFreeNodes: NSFileAttributeKey;
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSFileAttributes<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSFileAttributes<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn fileSize(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileSize) }
    }
    unsafe fn fileModificationDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileModificationDate) }
    }
    unsafe fn fileType(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileType) }
    }
    unsafe fn filePosixPermissions(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, filePosixPermissions) }
    }
    unsafe fn fileOwnerAccountName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileOwnerAccountName) }
    }
    unsafe fn fileGroupOwnerAccountName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileGroupOwnerAccountName) }
    }
    unsafe fn fileSystemNumber(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileSystemNumber) }
    }
    unsafe fn fileSystemFileNumber(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileSystemFileNumber) }
    }
    unsafe fn fileExtensionHidden(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileExtensionHidden) }
    }
    unsafe fn fileHFSCreatorCode(&self) -> OSType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileHFSCreatorCode) }
    }
    unsafe fn fileHFSTypeCode(&self) -> OSType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileHFSTypeCode) }
    }
    unsafe fn fileIsImmutable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileIsImmutable) }
    }
    unsafe fn fileIsAppendOnly(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileIsAppendOnly) }
    }
    unsafe fn fileCreationDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileCreationDate) }
    }
    unsafe fn fileOwnerAccountID(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileOwnerAccountID) }
    }
    unsafe fn fileGroupOwnerAccountID(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileGroupOwnerAccountID) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSColor(pub id);
impl std::ops::Deref for NSColor {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSColor {}
impl NSColor {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSColor), alloc) })
    }
}
impl INSColor for NSColor {}
pub trait INSColor: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSImage(pub id);
impl std::ops::Deref for NSImage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSImage {}
impl NSImage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSImage), alloc) })
    }
}
impl INSImage for NSImage {}
pub trait INSImage: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSView(pub id);
impl std::ops::Deref for NSView {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSView {}
impl NSView {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSView), alloc) })
    }
}
impl INSView for NSView {}
pub trait INSView: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSScreen(pub id);
impl std::ops::Deref for NSScreen {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSScreen {}
impl NSScreen {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSScreen), alloc) })
    }
}
impl INSScreen for NSScreen {}
pub trait INSScreen: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAppleEventDescriptor(pub id);
impl std::ops::Deref for NSAppleEventDescriptor {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAppleEventDescriptor {}
impl NSAppleEventDescriptor {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAppleEventDescriptor), alloc) })
    }
}
impl INSAppleEventDescriptor for NSAppleEventDescriptor {}
pub trait INSAppleEventDescriptor: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct UTType(pub id);
impl std::ops::Deref for UTType {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for UTType {}
impl UTType {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(UTType), alloc) })
    }
}
impl IUTType for UTType {}
pub trait IUTType: Sized + std::ops::Deref {}
pub const NSWorkspaceIconCreationOptions_NSExcludeQuickDrawElementsIconCreationOption:
    NSWorkspaceIconCreationOptions = 2;
pub const NSWorkspaceIconCreationOptions_NSExclude10_4ElementsIconCreationOption:
    NSWorkspaceIconCreationOptions = 4;
pub type NSWorkspaceIconCreationOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSWorkspace(pub id);
impl std::ops::Deref for NSWorkspace {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSWorkspace {}
impl NSWorkspace {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSWorkspace), alloc) })
    }
}
impl INSObject for NSWorkspace {}
impl PNSObject for NSWorkspace {}
impl From<NSWorkspace> for NSObject {
    fn from(child: NSWorkspace) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSWorkspace {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSWorkspace, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSWorkspace)) };
        if is_kind_of {
            Ok(NSWorkspace(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSWorkspace")
        }
    }
}
impl INSWorkspace for NSWorkspace {}
pub trait INSWorkspace: Sized + std::ops::Deref {
    unsafe fn openURL_(&self, url: NSURL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , openURL : url) }
    }
    unsafe fn openURL_configuration_completionHandler_(
        &self,
        url: NSURL,
        configuration: NSWorkspaceOpenConfiguration,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openURL : url configuration : configuration completionHandler : completionHandler)
        }
    }
    unsafe fn openURLs_withApplicationAtURL_configuration_completionHandler_(
        &self,
        urls: NSArray,
        applicationURL: NSURL,
        configuration: NSWorkspaceOpenConfiguration,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openURLs : urls withApplicationAtURL : applicationURL configuration : configuration completionHandler : completionHandler)
        }
    }
    unsafe fn openApplicationAtURL_configuration_completionHandler_(
        &self,
        applicationURL: NSURL,
        configuration: NSWorkspaceOpenConfiguration,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openApplicationAtURL : applicationURL configuration : configuration completionHandler : completionHandler)
        }
    }
    unsafe fn selectFile_inFileViewerRootedAtPath_(
        &self,
        fullPath: NSString,
        rootFullPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , selectFile : fullPath inFileViewerRootedAtPath : rootFullPath)
        }
    }
    unsafe fn activateFileViewerSelectingURLs_(&self, fileURLs: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , activateFileViewerSelectingURLs : fileURLs) }
    }
    unsafe fn showSearchResultsForQueryString_(&self, queryString: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , showSearchResultsForQueryString : queryString) }
    }
    unsafe fn noteFileSystemChanged_(&self, path: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , noteFileSystemChanged : path) }
    }
    unsafe fn isFilePackageAtPath_(&self, fullPath: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , isFilePackageAtPath : fullPath) }
    }
    unsafe fn iconForFile_(&self, fullPath: NSString) -> NSImage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , iconForFile : fullPath) }
    }
    unsafe fn iconForFiles_(&self, fullPaths: NSArray) -> NSImage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , iconForFiles : fullPaths) }
    }
    unsafe fn iconForContentType_(&self, contentType: UTType) -> NSImage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , iconForContentType : contentType) }
    }
    unsafe fn setIcon_forFile_options_(
        &self,
        image: NSImage,
        fullPath: NSString,
        options: NSWorkspaceIconCreationOptions,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setIcon : image forFile : fullPath options : options) }
    }
    unsafe fn recycleURLs_completionHandler_(
        &self,
        URLs: NSArray,
        handler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , recycleURLs : URLs completionHandler : handler) }
    }
    unsafe fn duplicateURLs_completionHandler_(
        &self,
        URLs: NSArray,
        handler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , duplicateURLs : URLs completionHandler : handler) }
    }
    unsafe fn getFileSystemInfoForPath_isRemovable_isWritable_isUnmountable_description_type_(
        &self,
        fullPath: NSString,
        removableFlag: *mut BOOL,
        writableFlag: *mut BOOL,
        unmountableFlag: *mut BOOL,
        description: *mut NSString,
        fileSystemType: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getFileSystemInfoForPath : fullPath isRemovable : removableFlag isWritable : writableFlag isUnmountable : unmountableFlag description : description r#type : fileSystemType)
        }
    }
    unsafe fn unmountAndEjectDeviceAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , unmountAndEjectDeviceAtPath : path) }
    }
    unsafe fn unmountAndEjectDeviceAtURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , unmountAndEjectDeviceAtURL : url error : error) }
    }
    unsafe fn extendPowerOffBy_(&self, requested: NSInteger) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , extendPowerOffBy : requested) }
    }
    unsafe fn hideOtherApplications(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hideOtherApplications) }
    }
    unsafe fn URLForApplicationWithBundleIdentifier_(&self, bundleIdentifier: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLForApplicationWithBundleIdentifier : bundleIdentifier) }
    }
    unsafe fn URLsForApplicationsWithBundleIdentifier_(&self, bundleIdentifier: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLsForApplicationsWithBundleIdentifier : bundleIdentifier) }
    }
    unsafe fn URLForApplicationToOpenURL_(&self, url: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLForApplicationToOpenURL : url) }
    }
    unsafe fn URLsForApplicationsToOpenURL_(&self, url: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLsForApplicationsToOpenURL : url) }
    }
    unsafe fn setDefaultApplicationAtURL_toOpenContentTypeOfFileAtURL_completionHandler_(
        &self,
        applicationURL: NSURL,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setDefaultApplicationAtURL : applicationURL toOpenContentTypeOfFileAtURL : url completionHandler : completionHandler)
        }
    }
    unsafe fn setDefaultApplicationAtURL_toOpenURLsWithScheme_completionHandler_(
        &self,
        applicationURL: NSURL,
        urlScheme: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setDefaultApplicationAtURL : applicationURL toOpenURLsWithScheme : urlScheme completionHandler : completionHandler)
        }
    }
    unsafe fn setDefaultApplicationAtURL_toOpenFileAtURL_completionHandler_(
        &self,
        applicationURL: NSURL,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setDefaultApplicationAtURL : applicationURL toOpenFileAtURL : url completionHandler : completionHandler)
        }
    }
    unsafe fn URLForApplicationToOpenContentType_(&self, contentType: UTType) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLForApplicationToOpenContentType : contentType) }
    }
    unsafe fn URLsForApplicationsToOpenContentType_(&self, contentType: UTType) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , URLsForApplicationsToOpenContentType : contentType) }
    }
    unsafe fn setDefaultApplicationAtURL_toOpenContentType_completionHandler_(
        &self,
        applicationURL: NSURL,
        contentType: UTType,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setDefaultApplicationAtURL : applicationURL toOpenContentType : contentType completionHandler : completionHandler)
        }
    }
    unsafe fn notificationCenter(&self) -> NSNotificationCenter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, notificationCenter) }
    }
    unsafe fn fileLabels(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileLabels) }
    }
    unsafe fn fileLabelColors(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileLabelColors) }
    }
    unsafe fn frontmostApplication(&self) -> NSRunningApplication
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, frontmostApplication) }
    }
    unsafe fn menuBarOwningApplication(&self) -> NSRunningApplication
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, menuBarOwningApplication) }
    }
    unsafe fn sharedWorkspace() -> NSWorkspace
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSWorkspace), sharedWorkspace) }
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSWorkspaceOpenConfiguration(pub id);
impl std::ops::Deref for NSWorkspaceOpenConfiguration {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSWorkspaceOpenConfiguration {}
impl NSWorkspaceOpenConfiguration {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSWorkspaceOpenConfiguration), alloc) })
    }
}
impl PNSCopying for NSWorkspaceOpenConfiguration {}
impl INSObject for NSWorkspaceOpenConfiguration {}
impl PNSObject for NSWorkspaceOpenConfiguration {}
impl From<NSWorkspaceOpenConfiguration> for NSObject {
    fn from(child: NSWorkspaceOpenConfiguration) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSWorkspaceOpenConfiguration {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSWorkspaceOpenConfiguration, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSWorkspaceOpenConfiguration)) };
        if is_kind_of {
            Ok(NSWorkspaceOpenConfiguration(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSWorkspaceOpenConfiguration")
        }
    }
}
impl INSWorkspaceOpenConfiguration for NSWorkspaceOpenConfiguration {}
pub trait INSWorkspaceOpenConfiguration: Sized + std::ops::Deref {
    unsafe fn promptsUserIfNeeded(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, promptsUserIfNeeded) }
    }
    unsafe fn setPromptsUserIfNeeded_(&self, promptsUserIfNeeded: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setPromptsUserIfNeeded : promptsUserIfNeeded) }
    }
    unsafe fn addsToRecentItems(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, addsToRecentItems) }
    }
    unsafe fn setAddsToRecentItems_(&self, addsToRecentItems: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setAddsToRecentItems : addsToRecentItems) }
    }
    unsafe fn activates(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, activates) }
    }
    unsafe fn setActivates_(&self, activates: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setActivates : activates) }
    }
    unsafe fn hides(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hides) }
    }
    unsafe fn setHides_(&self, hides: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setHides : hides) }
    }
    unsafe fn hidesOthers(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hidesOthers) }
    }
    unsafe fn setHidesOthers_(&self, hidesOthers: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setHidesOthers : hidesOthers) }
    }
    unsafe fn isForPrinting(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isForPrinting) }
    }
    unsafe fn setForPrinting_(&self, forPrinting: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setForPrinting : forPrinting) }
    }
    unsafe fn createsNewApplicationInstance(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, createsNewApplicationInstance) }
    }
    unsafe fn setCreatesNewApplicationInstance_(&self, createsNewApplicationInstance: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setCreatesNewApplicationInstance : createsNewApplicationInstance)
        }
    }
    unsafe fn allowsRunningApplicationSubstitution(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, allowsRunningApplicationSubstitution) }
    }
    unsafe fn setAllowsRunningApplicationSubstitution_(
        &self,
        allowsRunningApplicationSubstitution: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setAllowsRunningApplicationSubstitution : allowsRunningApplicationSubstitution)
        }
    }
    unsafe fn arguments(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, arguments) }
    }
    unsafe fn setArguments_(&self, arguments: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setArguments : arguments) }
    }
    unsafe fn environment(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, environment) }
    }
    unsafe fn setEnvironment_(&self, environment: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setEnvironment : environment) }
    }
    unsafe fn appleEvent(&self) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, appleEvent) }
    }
    unsafe fn setAppleEvent_(&self, appleEvent: NSAppleEventDescriptor)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setAppleEvent : appleEvent) }
    }
    unsafe fn architecture(&self) -> cpu_type_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, architecture) }
    }
    unsafe fn setArchitecture_(&self, architecture: cpu_type_t)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setArchitecture : architecture) }
    }
    unsafe fn requiresUniversalLinks(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, requiresUniversalLinks) }
    }
    unsafe fn setRequiresUniversalLinks_(&self, requiresUniversalLinks: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , setRequiresUniversalLinks : requiresUniversalLinks) }
    }
    unsafe fn configuration() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSWorkspaceOpenConfiguration), configuration) }
    }
}
pub type NSWorkspaceDesktopImageOptionKey = NSString;
unsafe extern "C" {
    pub static NSWorkspaceDesktopImageScalingKey: NSWorkspaceDesktopImageOptionKey;
}
unsafe extern "C" {
    pub static NSWorkspaceDesktopImageAllowClippingKey: NSWorkspaceDesktopImageOptionKey;
}
unsafe extern "C" {
    pub static NSWorkspaceDesktopImageFillColorKey: NSWorkspaceDesktopImageOptionKey;
}
impl NSWorkspace_NSDesktopImages for NSWorkspace {}
pub trait NSWorkspace_NSDesktopImages: Sized + std::ops::Deref {
    unsafe fn setDesktopImageURL_forScreen_options_error_(
        &self,
        url: NSURL,
        screen: NSScreen,
        options: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , setDesktopImageURL : url forScreen : screen options : options error : error)
        }
    }
    unsafe fn desktopImageURLForScreen_(&self, screen: NSScreen) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , desktopImageURLForScreen : screen) }
    }
    unsafe fn desktopImageOptionsForScreen_(&self, screen: NSScreen) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , desktopImageOptionsForScreen : screen) }
    }
}
pub const NSWorkspaceAuthorizationType_NSWorkspaceAuthorizationTypeCreateSymbolicLink:
    NSWorkspaceAuthorizationType = 0;
pub const NSWorkspaceAuthorizationType_NSWorkspaceAuthorizationTypeSetAttributes:
    NSWorkspaceAuthorizationType = 1;
pub const NSWorkspaceAuthorizationType_NSWorkspaceAuthorizationTypeReplaceFile:
    NSWorkspaceAuthorizationType = 2;
pub type NSWorkspaceAuthorizationType = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSWorkspaceAuthorization(pub id);
impl std::ops::Deref for NSWorkspaceAuthorization {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSWorkspaceAuthorization {}
impl NSWorkspaceAuthorization {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSWorkspaceAuthorization), alloc) })
    }
}
impl INSObject for NSWorkspaceAuthorization {}
impl PNSObject for NSWorkspaceAuthorization {}
impl From<NSWorkspaceAuthorization> for NSObject {
    fn from(child: NSWorkspaceAuthorization) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSWorkspaceAuthorization {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSWorkspaceAuthorization, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSWorkspaceAuthorization)) };
        if is_kind_of {
            Ok(NSWorkspaceAuthorization(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSWorkspaceAuthorization")
        }
    }
}
impl INSWorkspaceAuthorization for NSWorkspaceAuthorization {}
pub trait INSWorkspaceAuthorization: Sized + std::ops::Deref {}
impl NSWorkspace_NSWorkspaceAuthorization for NSWorkspace {}
pub trait NSWorkspace_NSWorkspaceAuthorization: Sized + std::ops::Deref {
    unsafe fn requestAuthorizationOfType_completionHandler_(
        &self,
        type_: NSWorkspaceAuthorizationType,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , requestAuthorizationOfType : type_ completionHandler : completionHandler)
        }
    }
}
impl NSFileManager_NSWorkspaceAuthorization for NSFileManager {}
pub trait NSFileManager_NSWorkspaceAuthorization: Sized + std::ops::Deref {
    unsafe fn fileManagerWithAuthorization_(authorization: NSWorkspaceAuthorization) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSFileManager) , fileManagerWithAuthorization : authorization)
        }
    }
}
unsafe extern "C" {
    pub static NSWorkspaceApplicationKey: NSString;
}
unsafe extern "C" {
    pub static mut NSWorkspaceWillLaunchApplicationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDidLaunchApplicationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDidTerminateApplicationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceDidHideApplicationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceDidUnhideApplicationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceDidActivateApplicationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceDidDeactivateApplicationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceVolumeLocalizedNameKey: NSString;
}
unsafe extern "C" {
    pub static NSWorkspaceVolumeURLKey: NSString;
}
unsafe extern "C" {
    pub static NSWorkspaceVolumeOldLocalizedNameKey: NSString;
}
unsafe extern "C" {
    pub static NSWorkspaceVolumeOldURLKey: NSString;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDidMountNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDidUnmountNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceWillUnmountNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceDidRenameVolumeNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceWillPowerOffNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceWillSleepNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDidWakeNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceScreensDidSleepNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceScreensDidWakeNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceSessionDidBecomeActiveNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceSessionDidResignActiveNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceDidChangeFileLabelsNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static NSWorkspaceActiveSpaceDidChangeNotification: NSNotificationName;
}
pub type NSWorkspaceFileOperationName = NSString;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchAndPrint: NSWorkspaceLaunchOptions = 2;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchWithErrorPresentation:
    NSWorkspaceLaunchOptions = 64;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchInhibitingBackgroundOnly:
    NSWorkspaceLaunchOptions = 128;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchWithoutAddingToRecents:
    NSWorkspaceLaunchOptions = 256;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchWithoutActivation: NSWorkspaceLaunchOptions =
    512;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchAsync: NSWorkspaceLaunchOptions = 65536;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchNewInstance: NSWorkspaceLaunchOptions = 524288;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchAndHide: NSWorkspaceLaunchOptions = 1048576;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchAndHideOthers: NSWorkspaceLaunchOptions =
    2097152;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchDefault: NSWorkspaceLaunchOptions = 65536;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchAllowingClassicStartup:
    NSWorkspaceLaunchOptions = 131072;
pub const NSWorkspaceLaunchOptions_NSWorkspaceLaunchPreferringClassic: NSWorkspaceLaunchOptions =
    262144;
pub type NSWorkspaceLaunchOptions = NSUInteger;
pub type NSWorkspaceLaunchConfigurationKey = NSString;
unsafe extern "C" {
    pub static NSWorkspaceLaunchConfigurationAppleEvent: NSWorkspaceLaunchConfigurationKey;
}
unsafe extern "C" {
    pub static NSWorkspaceLaunchConfigurationArguments: NSWorkspaceLaunchConfigurationKey;
}
unsafe extern "C" {
    pub static NSWorkspaceLaunchConfigurationEnvironment: NSWorkspaceLaunchConfigurationKey;
}
unsafe extern "C" {
    pub static NSWorkspaceLaunchConfigurationArchitecture: NSWorkspaceLaunchConfigurationKey;
}
impl NSWorkspace_NSDeprecated for NSWorkspace {}
pub trait NSWorkspace_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn openFile_(&self, fullPath: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , openFile : fullPath) }
    }
    unsafe fn openFile_withApplication_(&self, fullPath: NSString, appName: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , openFile : fullPath withApplication : appName) }
    }
    unsafe fn openFile_withApplication_andDeactivate_(
        &self,
        fullPath: NSString,
        appName: NSString,
        flag: BOOL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openFile : fullPath withApplication : appName andDeactivate : flag)
        }
    }
    unsafe fn launchApplication_(&self, appName: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , launchApplication : appName) }
    }
    unsafe fn launchApplicationAtURL_options_configuration_error_(
        &self,
        url: NSURL,
        options: NSWorkspaceLaunchOptions,
        configuration: NSDictionary,
        error: *mut NSError,
    ) -> NSRunningApplication
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , launchApplicationAtURL : url options : options configuration : configuration error : error)
        }
    }
    unsafe fn openURL_options_configuration_error_(
        &self,
        url: NSURL,
        options: NSWorkspaceLaunchOptions,
        configuration: NSDictionary,
        error: *mut NSError,
    ) -> NSRunningApplication
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openURL : url options : options configuration : configuration error : error)
        }
    }
    unsafe fn openURLs_withApplicationAtURL_options_configuration_error_(
        &self,
        urls: NSArray,
        applicationURL: NSURL,
        options: NSWorkspaceLaunchOptions,
        configuration: NSDictionary,
        error: *mut NSError,
    ) -> NSRunningApplication
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openURLs : urls withApplicationAtURL : applicationURL options : options configuration : configuration error : error)
        }
    }
    unsafe fn launchApplication_showIcon_autolaunch_(
        &self,
        appName: NSString,
        showIcon: BOOL,
        autolaunch: BOOL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , launchApplication : appName showIcon : showIcon autolaunch : autolaunch)
        }
    }
    unsafe fn fullPathForApplication_(&self, appName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , fullPathForApplication : appName) }
    }
    unsafe fn absolutePathForAppBundleWithIdentifier_(&self, bundleIdentifier: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , absolutePathForAppBundleWithIdentifier : bundleIdentifier) }
    }
    unsafe fn launchAppWithBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifier_(
        &self,
        bundleIdentifier: NSString,
        options: NSWorkspaceLaunchOptions,
        descriptor: NSAppleEventDescriptor,
        identifier: *mut NSNumber,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , launchAppWithBundleIdentifier : bundleIdentifier options : options additionalEventParamDescriptor : descriptor launchIdentifier : identifier)
        }
    }
    unsafe fn openURLs_withAppBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifiers_(
        &self,
        urls: NSArray,
        bundleIdentifier: NSString,
        options: NSWorkspaceLaunchOptions,
        descriptor: NSAppleEventDescriptor,
        identifiers: *mut NSArray,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openURLs : urls withAppBundleIdentifier : bundleIdentifier options : options additionalEventParamDescriptor : descriptor launchIdentifiers : identifiers)
        }
    }
    unsafe fn openTempFile_(&self, fullPath: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , openTempFile : fullPath) }
    }
    unsafe fn findApplications(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, findApplications) }
    }
    unsafe fn noteUserDefaultsChanged(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, noteUserDefaultsChanged) }
    }
    unsafe fn slideImage_from_to_(&self, image: NSImage, fromPoint: NSPoint, toPoint: NSPoint)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , slideImage : image from : fromPoint to : toPoint) }
    }
    unsafe fn checkForRemovableMedia(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, checkForRemovableMedia) }
    }
    unsafe fn noteFileSystemChanged(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, noteFileSystemChanged) }
    }
    unsafe fn fileSystemChanged(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, fileSystemChanged) }
    }
    unsafe fn userDefaultsChanged(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, userDefaultsChanged) }
    }
    unsafe fn mountNewRemovableMedia(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, mountNewRemovableMedia) }
    }
    unsafe fn activeApplication(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, activeApplication) }
    }
    unsafe fn mountedLocalVolumePaths(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, mountedLocalVolumePaths) }
    }
    unsafe fn mountedRemovableMedia(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, mountedRemovableMedia) }
    }
    unsafe fn launchedApplications(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, launchedApplications) }
    }
    unsafe fn openFile_fromImage_at_inView_(
        &self,
        fullPath: NSString,
        image: NSImage,
        point: NSPoint,
        view: NSView,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , openFile : fullPath fromImage : image at : point inView : view)
        }
    }
    unsafe fn performFileOperation_source_destination_files_tag_(
        &self,
        operation: NSString,
        source: NSString,
        destination: NSString,
        files: NSArray,
        tag: *mut NSInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , performFileOperation : operation source : source destination : destination files : files tag : tag)
        }
    }
    unsafe fn getInfoForFile_application_type_(
        &self,
        fullPath: NSString,
        appName: *mut NSString,
        type_: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , getInfoForFile : fullPath application : appName r#type : type_)
        }
    }
    unsafe fn iconForFileType_(&self, fileType: NSString) -> NSImage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , iconForFileType : fileType) }
    }
    unsafe fn typeOfFile_error_(
        &self,
        absoluteFilePath: NSString,
        outError: *mut NSError,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , typeOfFile : absoluteFilePath error : outError) }
    }
    unsafe fn localizedDescriptionForType_(&self, typeName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , localizedDescriptionForType : typeName) }
    }
    unsafe fn preferredFilenameExtensionForType_(&self, typeName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , preferredFilenameExtensionForType : typeName) }
    }
    unsafe fn filenameExtension_isValidForType_(
        &self,
        filenameExtension: NSString,
        typeName: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (* self , filenameExtension : filenameExtension isValidForType : typeName)
        }
    }
    unsafe fn type_conformsToType_(&self, firstTypeName: NSString, secondTypeName: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , type : firstTypeName conformsToType : secondTypeName) }
    }
}
unsafe extern "C" {
    pub static mut NSWorkspaceMoveOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceCopyOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceLinkOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceCompressOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDecompressOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceEncryptOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDecryptOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDestroyOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceRecycleOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDuplicateOperation: NSWorkspaceFileOperationName;
}
unsafe extern "C" {
    pub static mut NSWorkspaceDidPerformFileOperationNotification: NSNotificationName;
}
unsafe extern "C" {
    pub static mut NSPlainFileType: NSString;
}
unsafe extern "C" {
    pub static mut NSDirectoryFileType: NSString;
}
unsafe extern "C" {
    pub static mut NSApplicationFileType: NSString;
}
unsafe extern "C" {
    pub static mut NSFilesystemFileType: NSString;
}
unsafe extern "C" {
    pub static mut NSShellCommandFileType: NSString;
}
pub const NSApplicationActivationOptions_NSApplicationActivateAllWindows:
    NSApplicationActivationOptions = 1;
pub const NSApplicationActivationOptions_NSApplicationActivateIgnoringOtherApps:
    NSApplicationActivationOptions = 2;
pub type NSApplicationActivationOptions = NSUInteger;
pub const NSApplicationActivationPolicy_NSApplicationActivationPolicyRegular:
    NSApplicationActivationPolicy = 0;
pub const NSApplicationActivationPolicy_NSApplicationActivationPolicyAccessory:
    NSApplicationActivationPolicy = 1;
pub const NSApplicationActivationPolicy_NSApplicationActivationPolicyProhibited:
    NSApplicationActivationPolicy = 2;
pub type NSApplicationActivationPolicy = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSRunningApplication(pub id);
impl std::ops::Deref for NSRunningApplication {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSRunningApplication {}
impl NSRunningApplication {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSRunningApplication), alloc) })
    }
}
impl INSObject for NSRunningApplication {}
impl PNSObject for NSRunningApplication {}
impl From<NSRunningApplication> for NSObject {
    fn from(child: NSRunningApplication) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSRunningApplication {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSRunningApplication, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send ! (parent , isKindOfClass : class ! (NSRunningApplication)) };
        if is_kind_of {
            Ok(NSRunningApplication(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSRunningApplication")
        }
    }
}
impl INSRunningApplication for NSRunningApplication {}
pub trait INSRunningApplication: Sized + std::ops::Deref {
    unsafe fn hide(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, hide) }
    }
    unsafe fn unhide(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, unhide) }
    }
    unsafe fn activateFromApplication_options_(
        &self,
        application: NSRunningApplication,
        options: NSApplicationActivationOptions,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , activateFromApplication : application options : options) }
    }
    unsafe fn activateWithOptions_(&self, options: NSApplicationActivationOptions) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send ! (* self , activateWithOptions : options) }
    }
    unsafe fn terminate(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, terminate) }
    }
    unsafe fn forceTerminate(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, forceTerminate) }
    }
    unsafe fn isTerminated(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isTerminated) }
    }
    unsafe fn isFinishedLaunching(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isFinishedLaunching) }
    }
    unsafe fn isHidden(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isHidden) }
    }
    unsafe fn isActive(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, isActive) }
    }
    unsafe fn ownsMenuBar(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, ownsMenuBar) }
    }
    unsafe fn activationPolicy(&self) -> NSApplicationActivationPolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, activationPolicy) }
    }
    unsafe fn localizedName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, localizedName) }
    }
    unsafe fn bundleIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, bundleIdentifier) }
    }
    unsafe fn bundleURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, bundleURL) }
    }
    unsafe fn executableURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, executableURL) }
    }
    unsafe fn processIdentifier(&self) -> pid_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, processIdentifier) }
    }
    unsafe fn launchDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, launchDate) }
    }
    unsafe fn icon(&self) -> NSImage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, icon) }
    }
    unsafe fn executableArchitecture(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, executableArchitecture) }
    }
    unsafe fn runningApplicationsWithBundleIdentifier_(bundleIdentifier: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSRunningApplication) , runningApplicationsWithBundleIdentifier : bundleIdentifier)
        }
    }
    unsafe fn runningApplicationWithProcessIdentifier_(pid: pid_t) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send ! (class ! (NSRunningApplication) , runningApplicationWithProcessIdentifier : pid)
        }
    }
    unsafe fn terminateAutomaticallyTerminableApplications()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe {
            msg_send!(
                class!(NSRunningApplication),
                terminateAutomaticallyTerminableApplications
            )
        }
    }
    unsafe fn currentApplication() -> NSRunningApplication
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(class!(NSRunningApplication), currentApplication) }
    }
}
impl NSWorkspace_NSWorkspaceRunningApplications for NSWorkspace {}
pub trait NSWorkspace_NSWorkspaceRunningApplications: Sized + std::ops::Deref {
    unsafe fn runningApplications(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        unsafe { msg_send!(*self, runningApplications) }
    }
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
pub type instancetype = id;
